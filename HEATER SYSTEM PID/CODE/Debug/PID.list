
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006680  08006680  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006680  08006680  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006680  08006680  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000060  080066e8  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  080066e8  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133aa  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002adf  00000000  00000000  00033476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f23  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001992f  00000000  00000000  000381c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017114  00000000  00000000  00051af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091078  00000000  00000000  00068c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005788  00000000  00000000  000f9c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ff408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800659c 	.word	0x0800659c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800659c 	.word	0x0800659c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_f2uiz>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	d20e      	bcs.n	80007de <__aeabi_f2uiz+0x22>
 80007c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007c4:	d30b      	bcc.n	80007de <__aeabi_f2uiz+0x22>
 80007c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007ce:	d409      	bmi.n	80007e4 <__aeabi_f2uiz+0x28>
 80007d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d8:	fa23 f002 	lsr.w	r0, r3, r2
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr
 80007e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007e8:	d101      	bne.n	80007ee <__aeabi_f2uiz+0x32>
 80007ea:	0242      	lsls	r2, r0, #9
 80007ec:	d102      	bne.n	80007f4 <__aeabi_f2uiz+0x38>
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	0000      	movs	r0, r0
	...

08000800 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000804:	b090      	sub	sp, #64	; 0x40
 8000806:	af06      	add	r7, sp, #24
 8000808:	4603      	mov	r3, r0
 800080a:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (GPIO_Pin == GPIO_PIN_2 && (HAL_GetTick() - sw_timestap) > 1000) {
 800080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080e:	2b04      	cmp	r3, #4
 8000810:	d143      	bne.n	800089a <HAL_GPIO_EXTI_Callback+0x9a>
 8000812:	f000 fef3 	bl	80015fc <HAL_GetTick>
 8000816:	4603      	mov	r3, r0
 8000818:	2200      	movs	r2, #0
 800081a:	469a      	mov	sl, r3
 800081c:	4693      	mov	fp, r2
 800081e:	4b72      	ldr	r3, [pc, #456]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000824:	ebba 0402 	subs.w	r4, sl, r2
 8000828:	eb6b 0503 	sbc.w	r5, fp, r3
 800082c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8000830:	429c      	cmp	r4, r3
 8000832:	f175 0300 	sbcs.w	r3, r5, #0
 8000836:	d330      	bcc.n	800089a <HAL_GPIO_EXTI_Callback+0x9a>
		if (status == 0) {
 8000838:	4b6c      	ldr	r3, [pc, #432]	; (80009ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11e      	bne.n	800087e <HAL_GPIO_EXTI_Callback+0x7e>
			status = 1;
 8000840:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
			initTime();
 8000846:	f005 f889 	bl	800595c <initTime>
			PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff feea 	bl	8000628 <__aeabi_ui2d>
 8000854:	4602      	mov	r2, r0
 8000856:	460b      	mov	r3, r1
 8000858:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800085c:	a35e      	add	r3, pc, #376	; (adr r3, 80009d8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000866:	a35e      	add	r3, pc, #376	; (adr r3, 80009e0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800086c:	e9cd 2300 	strd	r2, r3, [sp]
 8000870:	f04f 0200 	mov.w	r2, #0
 8000874:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000876:	4860      	ldr	r0, [pc, #384]	; (80009f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000878:	f005 f94e 	bl	8005b18 <PID_Init>
 800087c:	e002      	b.n	8000884 <HAL_GPIO_EXTI_Callback+0x84>
		} else {
			status = 0;
 800087e:	4b5b      	ldr	r3, [pc, #364]	; (80009ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
		}
		sw_timestap = HAL_GetTick();
 8000884:	f000 feba 	bl	80015fc <HAL_GetTick>
 8000888:	4603      	mov	r3, r0
 800088a:	2200      	movs	r2, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	61fa      	str	r2, [r7, #28]
 8000890:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000892:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000896:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if ((HAL_GetTick() - timestap) > 100)
 800089a:	f000 feaf 	bl	80015fc <HAL_GetTick>
 800089e:	4603      	mov	r3, r0
 80008a0:	2200      	movs	r2, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	617a      	str	r2, [r7, #20]
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 80008a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008b0:	4604      	mov	r4, r0
 80008b2:	ebb4 0802 	subs.w	r8, r4, r2
 80008b6:	eb61 0903 	sbc.w	r9, r1, r3
 80008ba:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80008be:	f179 0300 	sbcs.w	r3, r9, #0
 80008c2:	d302      	bcc.n	80008ca <HAL_GPIO_EXTI_Callback+0xca>
		dir = 0;
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_1 && dir == 0
 80008ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d103      	bne.n	80008d8 <HAL_GPIO_EXTI_Callback+0xd8>
 80008d0:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <HAL_GPIO_EXTI_Callback+0xe6>
			|| GPIO_Pin == GPIO_PIN_1 && dir == 1) {
 80008d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d133      	bne.n	8000946 <HAL_GPIO_EXTI_Callback+0x146>
 80008de:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d12f      	bne.n	8000946 <HAL_GPIO_EXTI_Callback+0x146>
		encoderCount++;
 80008e6:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a40      	ldr	r2, [pc, #256]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008ee:	6013      	str	r3, [r2, #0]
		PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 80008f0:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe97 	bl	8000628 <__aeabi_ui2d>
 80008fa:	4602      	mov	r2, r0
 80008fc:	460b      	mov	r3, r1
 80008fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000902:	a335      	add	r3, pc, #212	; (adr r3, 80009d8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800090c:	a334      	add	r3, pc, #208	; (adr r3, 80009e0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000912:	e9cd 2300 	strd	r2, r3, [sp]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800091c:	4836      	ldr	r0, [pc, #216]	; (80009f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800091e:	f005 f8fb 	bl	8005b18 <PID_Init>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4837      	ldr	r0, [pc, #220]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x204>)
 8000926:	f001 f941 	bl	8001bac <HAL_GPIO_TogglePin>
		dir = 1;
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
		timestap = HAL_GetTick();
 8000930:	f000 fe64 	bl	80015fc <HAL_GetTick>
 8000934:	4603      	mov	r3, r0
 8000936:	2200      	movs	r2, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	60fa      	str	r2, [r7, #12]
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 800093e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000942:	e9c3 1200 	strd	r1, r2, [r3]
	}
	if (GPIO_Pin == GPIO_PIN_0 && dir == 0
 8000946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000948:	2b01      	cmp	r3, #1
 800094a:	d103      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x154>
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <HAL_GPIO_EXTI_Callback+0x162>
			|| GPIO_Pin == GPIO_PIN_0 && dir == 2) {
 8000954:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000956:	2b01      	cmp	r3, #1
 8000958:	d137      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0x1ca>
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d133      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0x1ca>
		if (encoderCount > 0) {
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d01d      	beq.n	80009a6 <HAL_GPIO_EXTI_Callback+0x1a6>
			encoderCount--;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000972:	6013      	str	r3, [r2, #0]
			PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fe55 	bl	8000628 <__aeabi_ui2d>
 800097e:	4602      	mov	r2, r0
 8000980:	460b      	mov	r3, r1
 8000982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000986:	a314      	add	r3, pc, #80	; (adr r3, 80009d8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800098c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000990:	a313      	add	r3, pc, #76	; (adr r3, 80009e0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000996:	e9cd 2300 	strd	r2, r3, [sp]
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80009a0:	4815      	ldr	r0, [pc, #84]	; (80009f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80009a2:	f005 f8b9 	bl	8005b18 <PID_Init>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009a6:	2120      	movs	r1, #32
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x204>)
 80009aa:	f001 f8ff 	bl	8001bac <HAL_GPIO_TogglePin>
		dir = 2;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x200>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	701a      	strb	r2, [r3, #0]
		timestap = HAL_GetTick();
 80009b4:	f000 fe22 	bl	80015fc <HAL_GetTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2200      	movs	r2, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 80009c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80009c6:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80009d4:	f3af 8000 	nop.w
 80009d8:	47ae147b 	.word	0x47ae147b
 80009dc:	3f847ae1 	.word	0x3f847ae1
 80009e0:	9999999a 	.word	0x9999999a
 80009e4:	3fb99999 	.word	0x3fb99999
 80009e8:	20000260 	.word	0x20000260
 80009ec:	20000268 	.word	0x20000268
 80009f0:	20000000 	.word	0x20000000
 80009f4:	3ff00000 	.word	0x3ff00000
 80009f8:	20000220 	.word	0x20000220
 80009fc:	20000258 	.word	0x20000258
 8000a00:	20000254 	.word	0x20000254
 8000a04:	40010800 	.word	0x40010800

08000a08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a0c:	f000 fd9e 	bl	800154c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a10:	f000 f864 	bl	8000adc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a14:	f000 fa8e 	bl	8000f34 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a18:	f000 f8b8 	bl	8000b8c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000a1c:	f000 fa60 	bl	8000ee0 <MX_USART1_UART_Init>
	MX_SPI2_Init();
 8000a20:	f000 f92c 	bl	8000c7c <MX_SPI2_Init>
	MX_RTC_Init();
 8000a24:	f000 f8e0 	bl	8000be8 <MX_RTC_Init>
	MX_TIM2_Init();
 8000a28:	f000 f9e4 	bl	8000df4 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000a2c:	f000 f95e 	bl	8000cec <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	initApp();
 8000a30:	f004 fee0 	bl	80057f4 <initApp>
	MAX6675_Init();
 8000a34:	f005 f800 	bl	8005a38 <MAX6675_Init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <main+0xb8>)
 8000a3c:	f003 feda 	bl	80047f4 <HAL_TIM_PWM_Start>

	mainMenu();
 8000a40:	f004 fef8 	bl	8005834 <mainMenu>
	initTime();
 8000a44:	f004 ff8a 	bl	800595c <initTime>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a48:	2110      	movs	r1, #16
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <main+0xbc>)
 8000a4c:	f001 f8ae 	bl	8001bac <HAL_GPIO_TogglePin>
		updateSetpoint(encoderCount);
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <main+0xc0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 ff1e 	bl	8005898 <updateSetpoint>
		updateStatus(status);
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <main+0xc4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 ff59 	bl	8005918 <updateStatus>

		/* Functions */
		realValue = getTem();
 8000a66:	f005 f80d 	bl	8005a84 <getTem>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <main+0xc8>)
 8000a6e:	6013      	str	r3, [r2, #0]

		updateRealValue(realValue);
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <main+0xc8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 ff2e 	bl	80058d8 <updateRealValue>

		if (status == 1) {
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <main+0xc4>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d118      	bne.n	8000ab6 <main+0xae>
			control_signal = PID_Update(&pid, realValue);
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <main+0xc8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fdcd 	bl	8000628 <__aeabi_ui2d>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	460b      	mov	r3, r1
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <main+0xcc>)
 8000a94:	f005 f86d 	bl	8005b72 <PID_Update>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	490e      	ldr	r1, [pc, #56]	; (8000ad8 <main+0xd0>)
 8000a9e:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, (70));
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <main+0xb8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2246      	movs	r2, #70	; 0x46
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(200);
 8000aaa:	20c8      	movs	r0, #200	; 0xc8
 8000aac:	f000 fdb0 	bl	8001610 <HAL_Delay>
			updateTime();
 8000ab0:	f004 ff6e 	bl	8005990 <updateTime>
 8000ab4:	e7c8      	b.n	8000a48 <main+0x40>
		} else {
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	4801      	ldr	r0, [pc, #4]	; (8000ac0 <main+0xb8>)
 8000aba:	f003 ff3d 	bl	8004938 <HAL_TIM_PWM_Stop>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000abe:	e7c3      	b.n	8000a48 <main+0x40>
 8000ac0:	20000184 	.word	0x20000184
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000268 	.word	0x20000268
 8000ad0:	20000250 	.word	0x20000250
 8000ad4:	20000220 	.word	0x20000220
 8000ad8:	20000270 	.word	0x20000270

08000adc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f005 f8c4 	bl	8005c78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b20:	2300      	movs	r3, #0
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b24:	2300      	movs	r3, #0
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fd17 	bl	8002560 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x60>
		Error_Handler();
 8000b38:	f000 fa9a 	bl	8001070 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 ff84 	bl	8002a64 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x8a>
		Error_Handler();
 8000b62:	f000 fa85 	bl	8001070 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b66:	2301      	movs	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6e:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 f904 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xa6>
		Error_Handler();
 8000b7e:	f000 fa77 	bl	8001070 <Error_Handler>
	}
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_I2C1_Init+0x54>)
 8000b94:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_I2C1_Init+0x58>)
 8000b9a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bca:	f001 f821 	bl	8001c10 <HAL_I2C_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000bd4:	f000 fa4c 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000007c 	.word	0x2000007c
 8000be0:	40005400 	.word	0x40005400
 8000be4:	000186a0 	.word	0x000186a0

08000be8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <MX_RTC_Init+0x90>)
 8000c02:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c06:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0a:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c12:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000c14:	4817      	ldr	r0, [pc, #92]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c16:	f002 fa1f 	bl	8003058 <HAL_RTC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_RTC_Init+0x3c>
		Error_Handler();
 8000c20:	f000 fa26 	bl	8001070 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2201      	movs	r2, #1
 8000c34:	4619      	mov	r1, r3
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c38:	f002 fa9a 	bl	8003170 <HAL_RTC_SetTime>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_RTC_Init+0x5e>
		Error_Handler();
 8000c42:	f000 fa15 	bl	8001070 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c46:	2301      	movs	r3, #1
 8000c48:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 8000c56:	463b      	mov	r3, r7
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c5e:	f002 fbf7 	bl	8003450 <HAL_RTC_SetDate>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0x84>
		Error_Handler();
 8000c68:	f000 fa02 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000d0 	.word	0x200000d0
 8000c78:	40002800 	.word	0x40002800

08000c7c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000c82:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000c84:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c94:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000cb4:	2230      	movs	r2, #48	; 0x30
 8000cb6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI2_Init+0x68>)
 8000cd2:	f002 ff69 	bl	8003ba8 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI2_Init+0x64>
		Error_Handler();
 8000cdc:	f000 f9c8 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000e4 	.word	0x200000e4
 8000ce8:	40003800 	.word	0x40003800

08000cec <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b092      	sub	sp, #72	; 0x48
 8000cf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2220      	movs	r2, #32
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 ffae 	bl	8005c78 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d1e:	4a34      	ldr	r2, [pc, #208]	; (8000df0 <MX_TIM1_Init+0x104>)
 8000d20:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d34:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d4a:	f003 fd04 	bl	8004756 <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8000d54:	f000 f98c 	bl	8001070 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d64:	4619      	mov	r1, r3
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d68:	f004 fa78 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000d72:	f000 f97d 	bl	8001070 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	; 0x60
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_TIM1_Init+0x100>)
 8000d9c:	f003 fe30 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8000da6:	f000 f963 	bl	8001070 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM1_Init+0x100>)
 8000dce:	f004 faa3 	bl	8005318 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8000dd8:	f000 f94a 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM1_Init+0x100>)
 8000dde:	f000 fa67 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3748      	adds	r7, #72	; 0x48
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000013c 	.word	0x2000013c
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e4e:	f003 fc33 	bl	80046b8 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x68>
		Error_Handler();
 8000e58:	f000 f90a 	bl	8001070 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	4619      	mov	r1, r3
 8000e68:	481c      	ldr	r0, [pc, #112]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e6a:	f003 fe8b 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000e74:	f000 f8fc 	bl	8001070 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e7a:	f003 fc6c 	bl	8004756 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000e84:	f000 f8f4 	bl	8001070 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000e98:	f004 f9e0 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000ea2:	f000 f8e5 	bl	8001070 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000ebe:	f003 fd9f 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000ec8:	f000 f8d2 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM2_Init+0xe8>)
 8000ece:	f000 f9ef 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3738      	adds	r7, #56	; 0x38
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000184 	.word	0x20000184

08000ee0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_USART1_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f18:	f004 fa4f 	bl	80053ba <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f22:	f000 f8a5 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001cc 	.word	0x200001cc
 8000f30:	40013800 	.word	0x40013800

08000f34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a44      	ldr	r2, [pc, #272]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a3e      	ldr	r2, [pc, #248]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a38      	ldr	r2, [pc, #224]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD1_Pin | LD2_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2170      	movs	r1, #112	; 0x70
 8000fac:	482d      	ldr	r0, [pc, #180]	; (8001064 <MX_GPIO_Init+0x130>)
 8000fae:	f000 fde5 	bl	8001b7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_Pin | LED_LCD_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <MX_GPIO_Init+0x134>)
 8000fba:	f000 fddf 	bl	8001b7c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD2_Pin | LD3_Pin;
 8000fbe:	2370      	movs	r3, #112	; 0x70
 8000fc0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4823      	ldr	r0, [pc, #140]	; (8001064 <MX_GPIO_Init+0x130>)
 8000fd6:	f000 fc4d 	bl	8001874 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_GPIO_Init+0x138>)
 8000fe0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <MX_GPIO_Init+0x134>)
 8000fee:	f000 fc41 	bl	8001874 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin LED_LCD_Pin */
	GPIO_InitStruct.Pin = CS_Pin | LED_LCD_Pin;
 8000ff2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000ff6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2302      	movs	r3, #2
 8001002:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <MX_GPIO_Init+0x134>)
 800100c:	f000 fc32 	bl	8001874 <HAL_GPIO_Init>

	/*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin */
	GPIO_InitStruct.Pin = BT1_Pin | BT2_Pin | BT3_Pin;
 8001010:	2338      	movs	r3, #56	; 0x38
 8001012:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	; (8001068 <MX_GPIO_Init+0x134>)
 8001024:	f000 fc26 	bl	8001874 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2006      	movs	r0, #6
 800102e:	f000 fbea 	bl	8001806 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001032:	2006      	movs	r0, #6
 8001034:	f000 fc03 	bl	800183e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2007      	movs	r0, #7
 800103e:	f000 fbe2 	bl	8001806 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001042:	2007      	movs	r0, #7
 8001044:	f000 fbfb 	bl	800183e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2008      	movs	r0, #8
 800104e:	f000 fbda 	bl	8001806 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001052:	2008      	movs	r0, #8
 8001054:	f000 fbf3 	bl	800183e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800
 8001068:	40010c00 	.word	0x40010c00
 800106c:	10210000 	.word	0x10210000

08001070 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_MspInit+0x5c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_MspInit+0x5c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_MspInit+0x60>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_MspInit+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000

080010e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_I2C_MspInit+0x70>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d123      	bne.n	8001148 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_I2C_MspInit+0x74>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a13      	ldr	r2, [pc, #76]	; (8001154 <HAL_I2C_MspInit+0x74>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_I2C_MspInit+0x74>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <HAL_I2C_MspInit+0x78>)
 800112c:	f000 fba2 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_I2C_MspInit+0x74>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_I2C_MspInit+0x74>)
 8001136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113a:	61d3      	str	r3, [r2, #28]
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_I2C_MspInit+0x74>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40005400 	.word	0x40005400
 8001154:	40021000 	.word	0x40021000
 8001158:	40010c00 	.word	0x40010c00

0800115c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_RTC_MspInit+0x3c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d110      	bne.n	8001190 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800116e:	f001 f9eb 	bl	8002548 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_RTC_MspInit+0x40>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_RTC_MspInit+0x40>)
 8001178:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_RTC_MspInit+0x40>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_RTC_MspInit+0x44>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40002800 	.word	0x40002800
 800119c:	40021000 	.word	0x40021000
 80011a0:	4242043c 	.word	0x4242043c

080011a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_SPI_MspInit+0x8c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d131      	bne.n	8001228 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_SPI_MspInit+0x90>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <HAL_SPI_MspInit+0x90>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	61d3      	str	r3, [r2, #28]
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_SPI_MspInit+0x90>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_SPI_MspInit+0x90>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_SPI_MspInit+0x90>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_SPI_MspInit+0x90>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <HAL_SPI_MspInit+0x94>)
 800120a:	f000 fb33 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800120e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <HAL_SPI_MspInit+0x94>)
 8001224:	f000 fb26 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40003800 	.word	0x40003800
 8001234:	40021000 	.word	0x40021000
 8001238:	40010c00 	.word	0x40010c00

0800123c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_TIM_PWM_MspInit+0x34>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_TIM_PWM_MspInit+0x38>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_TIM_PWM_MspInit+0x38>)
 8001254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_TIM_PWM_MspInit+0x38>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40012c00 	.word	0x40012c00
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001288:	d10b      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_TIM_Base_MspInit+0x34>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_TIM_Base_MspInit+0x34>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_TIM_Base_MspInit+0x34>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_TIM_MspPostInit+0xb8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d12a      	bne.n	8001326 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_TIM_MspPostInit+0xbc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_TIM_MspPostInit+0xbc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_TIM_MspPostInit+0xbc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_TIM_MspPostInit+0xc0>)
 80012fc:	f000 faba 	bl	8001874 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_TIM_MspPostInit+0xc4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_TIM_MspPostInit+0xc4>)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001324:	e01c      	b.n	8001360 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132e:	d117      	bne.n	8001360 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_TIM_MspPostInit+0xbc>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <HAL_TIM_MspPostInit+0xbc>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_TIM_MspPostInit+0xbc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001348:	2302      	movs	r3, #2
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_TIM_MspPostInit+0xc0>)
 800135c:	f000 fa8a 	bl	8001874 <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_UART_MspInit+0x8c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d131      	bne.n	80013fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_UART_MspInit+0x90>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_UART_MspInit+0x90>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <HAL_UART_MspInit+0x94>)
 80013de:	f000 fa49 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x94>)
 80013f8:	f000 fa3c 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013800 	.word	0x40013800
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f8bf 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001462:	2001      	movs	r0, #1
 8001464:	f000 fbbc 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001470:	2002      	movs	r0, #2
 8001472:	f000 fbb5 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}

0800147a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800147e:	2004      	movs	r0, #4
 8001480:	f000 fbae 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f004 fbe6 	bl	8005c88 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20005000 	.word	0x20005000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20000278 	.word	0x20000278
 80014f0:	200003d0 	.word	0x200003d0

080014f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <Reset_Handler>:
 8001500:	f7ff fff8 	bl	80014f4 <SystemInit>
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <LoopFillZerobss+0xe>)
 8001506:	490c      	ldr	r1, [pc, #48]	; (8001538 <LoopFillZerobss+0x12>)
 8001508:	4a0c      	ldr	r2, [pc, #48]	; (800153c <LoopFillZerobss+0x16>)
 800150a:	2300      	movs	r3, #0
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:
 800150e:	58d4      	ldr	r4, [r2, r3]
 8001510:	50c4      	str	r4, [r0, r3]
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:
 8001514:	18c4      	adds	r4, r0, r3
 8001516:	428c      	cmp	r4, r1
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <LoopFillZerobss+0x1a>)
 800151c:	4c09      	ldr	r4, [pc, #36]	; (8001544 <LoopFillZerobss+0x1e>)
 800151e:	2300      	movs	r3, #0
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:
 8001526:	42a2      	cmp	r2, r4
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
 800152a:	f004 fbb3 	bl	8005c94 <__libc_init_array>
 800152e:	f7ff fa6b 	bl	8000a08 <main>
 8001532:	4770      	bx	lr
 8001534:	20000000 	.word	0x20000000
 8001538:	20000060 	.word	0x20000060
 800153c:	08006688 	.word	0x08006688
 8001540:	20000060 	.word	0x20000060
 8001544:	200003d0 	.word	0x200003d0

08001548 <ADC1_2_IRQHandler>:
 8001548:	e7fe      	b.n	8001548 <ADC1_2_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_Init+0x28>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_Init+0x28>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f947 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	200f      	movs	r0, #15
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff fd88 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40022000 	.word	0x40022000

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f95f 	bl	800185a <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f927 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000004 	.word	0x20000004
 80015d0:	2000000c 	.word	0x2000000c
 80015d4:	20000008 	.word	0x20000008

080015d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x1c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_IncTick+0x20>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_IncTick+0x20>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	2000027c 	.word	0x2000027c

080015fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_GetTick+0x10>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	2000027c 	.word	0x2000027c

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fff0 	bl	80015fc <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d005      	beq.n	8001636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_Delay+0x44>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001636:	bf00      	nop
 8001638:	f7ff ffe0 	bl	80015fc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f7      	bhi.n	8001638 <HAL_Delay+0x28>
  {
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000000c 	.word	0x2000000c

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <__NVIC_EnableIRQ+0x34>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff90 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff2d 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff42 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff90 	bl	8001748 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5f 	bl	80016f4 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff35 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e169      	b.n	8001b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001888:	2201      	movs	r2, #1
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8158 	bne.w	8001b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a9a      	ldr	r2, [pc, #616]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018b0:	4a98      	ldr	r2, [pc, #608]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d875      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018b6:	4a98      	ldr	r2, [pc, #608]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d058      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018bc:	4a96      	ldr	r2, [pc, #600]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d86f      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018c2:	4a96      	ldr	r2, [pc, #600]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d052      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018c8:	4a94      	ldr	r2, [pc, #592]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d869      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ce:	4a94      	ldr	r2, [pc, #592]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04c      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018d4:	4a92      	ldr	r2, [pc, #584]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d863      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018da:	4a92      	ldr	r2, [pc, #584]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d046      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018e0:	4a90      	ldr	r2, [pc, #576]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d85d      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d82a      	bhi.n	8001940 <HAL_GPIO_Init+0xcc>
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d859      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <HAL_GPIO_Init+0x80>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	08001949 	.word	0x08001949
 80018fc:	0800195b 	.word	0x0800195b
 8001900:	0800199d 	.word	0x0800199d
 8001904:	080019a3 	.word	0x080019a3
 8001908:	080019a3 	.word	0x080019a3
 800190c:	080019a3 	.word	0x080019a3
 8001910:	080019a3 	.word	0x080019a3
 8001914:	080019a3 	.word	0x080019a3
 8001918:	080019a3 	.word	0x080019a3
 800191c:	080019a3 	.word	0x080019a3
 8001920:	080019a3 	.word	0x080019a3
 8001924:	080019a3 	.word	0x080019a3
 8001928:	080019a3 	.word	0x080019a3
 800192c:	080019a3 	.word	0x080019a3
 8001930:	080019a3 	.word	0x080019a3
 8001934:	080019a3 	.word	0x080019a3
 8001938:	08001951 	.word	0x08001951
 800193c:	08001965 	.word	0x08001965
 8001940:	4a79      	ldr	r2, [pc, #484]	; (8001b28 <HAL_GPIO_Init+0x2b4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001946:	e02c      	b.n	80019a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e029      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	3304      	adds	r3, #4
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e024      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	3308      	adds	r3, #8
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e01f      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	330c      	adds	r3, #12
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e01a      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001976:	2304      	movs	r3, #4
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e013      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	611a      	str	r2, [r3, #16]
          break;
 800198e:	e009      	b.n	80019a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	615a      	str	r2, [r3, #20]
          break;
 800199a:	e003      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          break;
 80019a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d801      	bhi.n	80019ae <HAL_GPIO_Init+0x13a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_Init+0x13e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d802      	bhi.n	80019c0 <HAL_GPIO_Init+0x14c>
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x152>
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3b08      	subs	r3, #8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	210f      	movs	r1, #15
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80b1 	beq.w	8001b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f4:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a0c:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_GPIO_Init+0x1ec>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3f      	ldr	r2, [pc, #252]	; (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_GPIO_Init+0x1e8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <HAL_GPIO_Init+0x2c8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_GPIO_Init+0x1e0>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e004      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a60:	2300      	movs	r3, #0
 8001a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a64:	f002 0203 	and.w	r2, r2, #3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a72:	492f      	ldr	r1, [pc, #188]	; (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	492c      	ldr	r1, [pc, #176]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4928      	ldr	r1, [pc, #160]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4922      	ldr	r1, [pc, #136]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	491e      	ldr	r1, [pc, #120]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4918      	ldr	r1, [pc, #96]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4914      	ldr	r1, [pc, #80]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d021      	beq.n	8001b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e021      	b.n	8001b56 <HAL_GPIO_Init+0x2e2>
 8001b12:	bf00      	nop
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10310000 	.word	0x10310000
 8001b1c:	10220000 	.word	0x10220000
 8001b20:	10210000 	.word	0x10210000
 8001b24:	10120000 	.word	0x10120000
 8001b28:	10110000 	.word	0x10110000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40011400 	.word	0x40011400
 8001b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4909      	ldr	r1, [pc, #36]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f ae8e 	bne.w	8001888 <HAL_GPIO_Init+0x14>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	372c      	adds	r7, #44	; 0x2c
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43d9      	mvns	r1, r3
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fdfe 	bl	8000800 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e12b      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fa52 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	; 0x24
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c74:	f001 f83e 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a81      	ldr	r2, [pc, #516]	; (8001e84 <HAL_I2C_Init+0x274>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d807      	bhi.n	8001c94 <HAL_I2C_Init+0x84>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <HAL_I2C_Init+0x278>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e006      	b.n	8001ca2 <HAL_I2C_Init+0x92>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a7d      	ldr	r2, [pc, #500]	; (8001e8c <HAL_I2C_Init+0x27c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e7      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a78      	ldr	r2, [pc, #480]	; (8001e90 <HAL_I2C_Init+0x280>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_I2C_Init+0x274>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_I2C_Init+0xd4>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <HAL_I2C_Init+0xe8>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a69      	ldr	r2, [pc, #420]	; (8001e94 <HAL_I2C_Init+0x284>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	495c      	ldr	r1, [pc, #368]	; (8001e84 <HAL_I2C_Init+0x274>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d819      	bhi.n	8001d4c <HAL_I2C_Init+0x13c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_I2C_Init+0x138>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e59      	subs	r1, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	e051      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e04f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_I2C_Init+0x168>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e012      	b.n	8001d9e <HAL_I2C_Init+0x18e>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x196>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e022      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_I2C_Init+0x1bc>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	440b      	add	r3, r1
 8001dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dca:	e00f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6911      	ldr	r1, [r2, #16]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	000186a0 	.word	0x000186a0
 8001e88:	001e847f 	.word	0x001e847f
 8001e8c:	003d08ff 	.word	0x003d08ff
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	817b      	strh	r3, [r7, #10]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fba6 	bl	80015fc <HAL_GetTick>
 8001eb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	f040 80e0 	bne.w	8002080 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2319      	movs	r3, #25
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4970      	ldr	r1, [pc, #448]	; (800208c <HAL_I2C_Master_Transmit+0x1f4>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f964 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0d3      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2C_Master_Transmit+0x50>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e0cc      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d007      	beq.n	8001f0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f50:	8979      	ldrh	r1, [r7, #10]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f89c 	bl	8002094 <I2C_MasterRequestWrite>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e08d      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f7c:	e066      	b.n	800204c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa22 	bl	80023cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11b      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x188>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d017      	beq.n	8002020 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fa19 	bl	800245c <I2C_WaitOnBTFFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e01a      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d194      	bne.n	8001f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	00100002 	.word	0x00100002
 8002090:	ffff0000 	.word	0xffff0000

08002094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d006      	beq.n	80020be <I2C_MasterRequestWrite+0x2a>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d003      	beq.n	80020be <I2C_MasterRequestWrite+0x2a>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020bc:	d108      	bne.n	80020d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e00b      	b.n	80020e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d107      	bne.n	80020e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f84f 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210e:	d103      	bne.n	8002118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e035      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002124:	d108      	bne.n	8002138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e01b      	b.n	8002170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	11db      	asrs	r3, r3, #7
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0306 	and.w	r3, r3, #6
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f063 030f 	orn	r3, r3, #15
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <I2C_MasterRequestWrite+0xfc>)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f898 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e010      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <I2C_MasterRequestWrite+0x100>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f888 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	00010008 	.word	0x00010008
 8002194:	00010002 	.word	0x00010002

08002198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	e048      	b.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d044      	beq.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff fa23 	bl	80015fc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d139      	bne.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0c1b      	lsrs	r3, r3, #16
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10d      	bne.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e00c      	b.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	429a      	cmp	r2, r3
 800220c:	d116      	bne.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e023      	b.n	8002284 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10d      	bne.n	8002262 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	e00c      	b.n	800227c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	43da      	mvns	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d093      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229a:	e071      	b.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022aa:	d123      	bne.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e067      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d041      	beq.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7ff f97e 	bl	80015fc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d136      	bne.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10c      	bne.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e00b      	b.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	43da      	mvns	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4013      	ands	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e021      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10c      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	43da      	mvns	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e00b      	b.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af6d 	bne.w	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d8:	e034      	b.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f886 	bl	80024ec <I2C_IsAcknowledgeFailed>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e034      	b.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d028      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7ff f903 	bl	80015fc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11d      	bne.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d016      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d1c3      	bne.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002468:	e034      	b.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f83e 	bl	80024ec <I2C_IsAcknowledgeFailed>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e034      	b.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d028      	beq.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002482:	f7ff f8bb 	bl	80015fc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11d      	bne.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d016      	beq.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e007      	b.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d1c3      	bne.n	800246a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d11b      	bne.n	800253c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800250c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f043 0204 	orr.w	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_PWR_EnableBkUpAccess+0x14>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	420e0020 	.word	0x420e0020

08002560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e272      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8087 	beq.w	800268e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002580:	4b92      	ldr	r3, [pc, #584]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258c:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d112      	bne.n	80025be <HAL_RCC_OscConfig+0x5e>
 8002598:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d10b      	bne.n	80025be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d06c      	beq.n	800268c <HAL_RCC_OscConfig+0x12c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d168      	bne.n	800268c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e24c      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x76>
 80025c8:	4b80      	ldr	r3, [pc, #512]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7f      	ldr	r2, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e02e      	b.n	8002634 <HAL_RCC_OscConfig+0xd4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x98>
 80025de:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0xd4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0xbc>
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0xd4>
 800261c:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a67      	ldr	r2, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe ffde 	bl	80015fc <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe ffda 	bl	80015fc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e200      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0xe4>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe ffca 	bl	80015fc <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe ffc6 	bl	80015fc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1ec      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x10c>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d063      	beq.n	8002762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800269a:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x18c>
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x176>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1c0      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4939      	ldr	r1, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e03a      	b.n	8002762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x270>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe ff7f 	bl	80015fc <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7fe ff7b 	bl	80015fc <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1a1      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4927      	ldr	r1, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_RCC_OscConfig+0x270>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe ff5e 	bl	80015fc <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002744:	f7fe ff5a 	bl	80015fc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e180      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d03a      	beq.n	80027e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d019      	beq.n	80027aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_RCC_OscConfig+0x274>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe ff3e 	bl	80015fc <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe ff3a 	bl	80015fc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e160      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f000 face 	bl	8002d44 <RCC_Delay>
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_RCC_OscConfig+0x274>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7fe ff24 	bl	80015fc <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b6:	e00f      	b.n	80027d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe ff20 	bl	80015fc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d908      	bls.n	80027d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e146      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	42420000 	.word	0x42420000
 80027d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e9      	bne.n	80027b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a6 	beq.w	800293e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a87      	ldr	r2, [pc, #540]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b82      	ldr	r3, [pc, #520]	; (8002a28 <HAL_RCC_OscConfig+0x4c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x4c8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7e      	ldr	r2, [pc, #504]	; (8002a28 <HAL_RCC_OscConfig+0x4c8>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7fe fee1 	bl	80015fc <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe fedd 	bl	80015fc <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e103      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b75      	ldr	r3, [pc, #468]	; (8002a28 <HAL_RCC_OscConfig+0x4c8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x312>
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	e02d      	b.n	80028ce <HAL_RCC_OscConfig+0x36e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x334>
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a69      	ldr	r2, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	6213      	str	r3, [r2, #32]
 8002892:	e01c      	b.n	80028ce <HAL_RCC_OscConfig+0x36e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x356>
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a60      	ldr	r2, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a5d      	ldr	r2, [pc, #372]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x36e>
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a57      	ldr	r2, [pc, #348]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d015      	beq.n	8002902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fe91 	bl	80015fc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fe8d 	bl	80015fc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0b1      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ee      	beq.n	80028de <HAL_RCC_OscConfig+0x37e>
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fe7b 	bl	80015fc <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fe77 	bl	80015fc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e09b      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	4b40      	ldr	r3, [pc, #256]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d061      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d146      	bne.n	80029ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <HAL_RCC_OscConfig+0x4cc>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fe4b 	bl	80015fc <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe fe47 	bl	80015fc <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e06d      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	4921      	ldr	r1, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a19      	ldr	r1, [r3, #32]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	430b      	orrs	r3, r1
 80029b6:	491b      	ldr	r1, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCC_OscConfig+0x4cc>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe fe1b 	bl	80015fc <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fe fe17 	bl	80015fc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e03d      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x46a>
 80029e8:	e035      	b.n	8002a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x4cc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fe04 	bl	80015fc <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fe00 	bl	80015fc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e026      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x498>
 8002a16:	e01e      	b.n	8002a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e019      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_OscConfig+0x500>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000

08002a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0d0      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	4965      	ldr	r1, [pc, #404]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0b8      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac0:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a52      	ldr	r2, [pc, #328]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	494d      	ldr	r1, [pc, #308]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d040      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d115      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e07f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e073      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4936      	ldr	r1, [pc, #216]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b54:	f7fe fd52 	bl	80015fc <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe fd4e 	bl	80015fc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e053      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1eb      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b84:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d210      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 0207 	bic.w	r2, r3, #7
 8002b9a:	4922      	ldr	r1, [pc, #136]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e032      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4916      	ldr	r1, [pc, #88]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	490e      	ldr	r1, [pc, #56]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf2:	f000 f821 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	490a      	ldr	r1, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	5ccb      	ldrb	r3, [r1, r3]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1cc>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x1d0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fcb0 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	0800660c 	.word	0x0800660c
 8002c30:	20000004 	.word	0x20000004
 8002c34:	20000008 	.word	0x20000008

08002c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x30>
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x36>
 8002c66:	e027      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c6a:	613b      	str	r3, [r7, #16]
      break;
 8002c6c:	e027      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c78:	5cd3      	ldrb	r3, [r2, r3]
 8002c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	0c5b      	lsrs	r3, r3, #17
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9a:	fb03 f202 	mul.w	r2, r3, r2
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e004      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	613b      	str	r3, [r7, #16]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cba:	613b      	str	r3, [r7, #16]
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	693b      	ldr	r3, [r7, #16]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	08006624 	.word	0x08006624
 8002cd8:	08006634 	.word	0x08006634
 8002cdc:	003d0900 	.word	0x003d0900

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b02      	ldr	r3, [pc, #8]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	20000004 	.word	0x20000004

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff2 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	0800661c 	.word	0x0800661c

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffde 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	0adb      	lsrs	r3, r3, #11
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	0800661c 	.word	0x0800661c

08002d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <RCC_Delay+0x34>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <RCC_Delay+0x38>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0a5b      	lsrs	r3, r3, #9
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d60:	bf00      	nop
  }
  while (Delay --);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	60fa      	str	r2, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <RCC_Delay+0x1c>
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	10624dd3 	.word	0x10624dd3

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d07d      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	61d3      	str	r3, [r2, #28]
 8002db8:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d118      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd4:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a42      	ldr	r2, [pc, #264]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de0:	f7fe fc0c 	bl	80015fc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	e008      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de8:	f7fe fc08 	bl	80015fc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e06d      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02e      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d027      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e24:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e3a:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d014      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fbd7 	bl	80015fc <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fbd3 	bl	80015fc <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e036      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ee      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4917      	ldr	r1, [pc, #92]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	490b      	ldr	r1, [pc, #44]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42420440 	.word	0x42420440

08002eec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	f200 808a 	bhi.w	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d045      	beq.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d075      	beq.n	800300e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f22:	e082      	b.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f24:	4b46      	ldr	r3, [pc, #280]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f2a:	4b45      	ldr	r3, [pc, #276]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07b      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0c9b      	lsrs	r3, r3, #18
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a41      	ldr	r2, [pc, #260]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0c5b      	lsrs	r3, r3, #17
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	4a3b      	ldr	r2, [pc, #236]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f68:	4a38      	ldr	r2, [pc, #224]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	e004      	b.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4a34      	ldr	r2, [pc, #208]	; (8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f90:	d102      	bne.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	61bb      	str	r3, [r7, #24]
      break;
 8002f96:	e04a      	b.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
      break;
 8002fa6:	e042      	b.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e01f      	b.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd6:	d109      	bne.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002fe4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	e00f      	b.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff6:	d11c      	bne.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d016      	beq.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003004:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003008:	61bb      	str	r3, [r7, #24]
      break;
 800300a:	e012      	b.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800300c:	e011      	b.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800300e:	f7ff fe85 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0b9b      	lsrs	r3, r3, #14
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
      break;
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003032:	bf00      	nop
    }
  }
  return (frequency);
 8003034:	69bb      	ldr	r3, [r7, #24]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	08006638 	.word	0x08006638
 8003048:	08006648 	.word	0x08006648
 800304c:	007a1200 	.word	0x007a1200
 8003050:	003d0900 	.word	0x003d0900
 8003054:	aaaaaaab 	.word	0xaaaaaaab

08003058 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e07a      	b.n	8003164 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7c5b      	ldrb	r3, [r3, #17]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe f86c 	bl	800115c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 faea 	bl	8003664 <HAL_RTC_WaitForSynchro>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e061      	b.n	8003164 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fba3 	bl	80037ec <RTC_EnterInitMode>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2204      	movs	r2, #4
 80030b0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e056      	b.n	8003164 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0207 	bic.w	r2, r2, #7
 80030c4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RTC_Init+0x114>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a26      	ldr	r2, [pc, #152]	; (800316c <HAL_RTC_Init+0x114>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RTC_Init+0x114>)
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4921      	ldr	r1, [pc, #132]	; (800316c <HAL_RTC_Init+0x114>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d003      	beq.n	80030fe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e00e      	b.n	800311c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80030fe:	2001      	movs	r0, #1
 8003100:	f7ff fef4 	bl	8002eec <HAL_RCCEx_GetPeriphCLKFreq>
 8003104:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e026      	b.n	8003164 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b01      	subs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	0c1a      	lsrs	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f002 020f 	and.w	r2, r2, #15
 8003128:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	b292      	uxth	r2, r2
 8003132:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fb81 	bl	800383c <RTC_ExitInitMode>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2204      	movs	r2, #4
 8003144:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00c      	b.n	8003164 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003162:	2300      	movs	r3, #0
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40006c00 	.word	0x40006c00

08003170 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_RTC_SetTime+0x20>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e080      	b.n	8003296 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	7c1b      	ldrb	r3, [r3, #16]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_RTC_SetTime+0x30>
 800319c:	2302      	movs	r3, #2
 800319e:	e07a      	b.n	8003296 <HAL_RTC_SetTime+0x126>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2202      	movs	r2, #2
 80031aa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80031bc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	4619      	mov	r1, r3
 80031c6:	460b      	mov	r3, r1
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a5b      	subs	r3, r3, r1
 80031cc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031ce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031d4:	4413      	add	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e01e      	b.n	8003218 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fb71 	bl	80038c6 <RTC_Bcd2ToByte>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80031ec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fb66 	bl	80038c6 <RTC_Bcd2ToByte>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003206:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	789b      	ldrb	r3, [r3, #2]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fb5a 	bl	80038c6 <RTC_Bcd2ToByte>
 8003212:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003214:	4423      	add	r3, r4
 8003216:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003218:	6979      	ldr	r1, [r7, #20]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fa7f 	bl	800371e <RTC_WriteTimeCounter>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2204      	movs	r2, #4
 800322a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e02f      	b.n	8003296 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0205 	bic.w	r2, r2, #5
 8003244:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fa90 	bl	800376c <RTC_ReadAlarmCounter>
 800324c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d018      	beq.n	8003288 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	429a      	cmp	r2, r3
 800325c:	d214      	bcs.n	8003288 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003264:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003268:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800326a:	6939      	ldr	r1, [r7, #16]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa96 	bl	800379e <RTC_WriteAlarmCounter>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2204      	movs	r2, #4
 800327c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e006      	b.n	8003296 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
	...

080032a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_RTC_GetTime+0x28>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b5      	b.n	8003438 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0ac      	b.n	8003438 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f9ed 	bl	80036be <RTC_ReadTimeCounter>
 80032e4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_RTC_GetTime+0x1a0>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0adb      	lsrs	r3, r3, #11
 80032f0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_RTC_GetTime+0x1a0>)
 80032f6:	fba3 1302 	umull	r1, r3, r3, r2
 80032fa:	0adb      	lsrs	r3, r3, #11
 80032fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	4a4f      	ldr	r2, [pc, #316]	; (8003444 <HAL_RTC_GetTime+0x1a4>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_RTC_GetTime+0x1a0>)
 8003318:	fba2 1203 	umull	r1, r2, r2, r3
 800331c:	0ad2      	lsrs	r2, r2, #11
 800331e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003322:	fb01 f202 	mul.w	r2, r1, r2
 8003326:	1a9a      	subs	r2, r3, r2
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_RTC_GetTime+0x1a4>)
 800332a:	fba3 1302 	umull	r1, r3, r3, r2
 800332e:	0959      	lsrs	r1, r3, #5
 8003330:	460b      	mov	r3, r1
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a5b      	subs	r3, r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	1ad1      	subs	r1, r2, r3
 800333a:	b2ca      	uxtb	r2, r1
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b17      	cmp	r3, #23
 8003344:	d955      	bls.n	80033f2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <HAL_RTC_GetTime+0x1a8>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003352:	6939      	ldr	r1, [r7, #16]
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <HAL_RTC_GetTime+0x1a8>)
 8003356:	fba3 2301 	umull	r2, r3, r3, r1
 800335a:	091a      	lsrs	r2, r3, #4
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	1aca      	subs	r2, r1, r3
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f9fd 	bl	800376c <RTC_ReadAlarmCounter>
 8003372:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d008      	beq.n	800338e <HAL_RTC_GetTime+0xee>
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	429a      	cmp	r2, r3
 8003382:	d904      	bls.n	800338e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e002      	b.n	8003394 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_RTC_GetTime+0x1ac>)
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f9ba 	bl	800371e <RTC_WriteTimeCounter>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e041      	b.n	8003438 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d00c      	beq.n	80033d6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4413      	add	r3, r2
 80033c2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80033c4:	69f9      	ldr	r1, [r7, #28]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f9e9 	bl	800379e <RTC_WriteAlarmCounter>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e030      	b.n	8003438 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80033d6:	69f9      	ldr	r1, [r7, #28]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f9e0 	bl	800379e <RTC_WriteAlarmCounter>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e027      	b.n	8003438 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80033e8:	6979      	ldr	r1, [r7, #20]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa88 	bl	8003900 <RTC_DateUpdate>
 80033f0:	e003      	b.n	80033fa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01a      	beq.n	8003436 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fa41 	bl	800388c <RTC_ByteToBcd2>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fa38 	bl	800388c <RTC_ByteToBcd2>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	789b      	ldrb	r3, [r3, #2]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fa2f 	bl	800388c <RTC_ByteToBcd2>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	91a2b3c5 	.word	0x91a2b3c5
 8003444:	88888889 	.word	0x88888889
 8003448:	aaaaaaab 	.word	0xaaaaaaab
 800344c:	00015180 	.word	0x00015180

08003450 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_RTC_SetDate+0x24>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e097      	b.n	80035a8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	7c1b      	ldrb	r3, [r3, #16]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_RTC_SetDate+0x34>
 8003480:	2302      	movs	r3, #2
 8003482:	e091      	b.n	80035a8 <HAL_RTC_SetDate+0x158>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2202      	movs	r2, #2
 800348e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	78da      	ldrb	r2, [r3, #3]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	785a      	ldrb	r2, [r3, #1]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	789a      	ldrb	r2, [r3, #2]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	739a      	strb	r2, [r3, #14]
 80034ae:	e01a      	b.n	80034e6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	78db      	ldrb	r3, [r3, #3]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa06 	bl	80038c6 <RTC_Bcd2ToByte>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f9fd 	bl	80038c6 <RTC_Bcd2ToByte>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f9f4 	bl	80038c6 <RTC_Bcd2ToByte>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	7bdb      	ldrb	r3, [r3, #15]
 80034ea:	4618      	mov	r0, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	7b59      	ldrb	r1, [r3, #13]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	7b9b      	ldrb	r3, [r3, #14]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 fadf 	bl	8003ab8 <RTC_WeekDayNum>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	7b1a      	ldrb	r2, [r3, #12]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f8d7 	bl	80036be <RTC_ReadTimeCounter>
 8003510:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <HAL_RTC_SetDate+0x160>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0adb      	lsrs	r3, r3, #11
 800351c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b18      	cmp	r3, #24
 8003522:	d93a      	bls.n	800359a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_RTC_SetDate+0x164>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_RTC_SetDate+0x168>)
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800353a:	69f9      	ldr	r1, [r7, #28]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f8ee 	bl	800371e <RTC_WriteTimeCounter>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2204      	movs	r2, #4
 800354c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e027      	b.n	80035a8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f907 	bl	800376c <RTC_ReadAlarmCounter>
 800355e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d018      	beq.n	800359a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	429a      	cmp	r2, r3
 800356e:	d214      	bcs.n	800359a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003576:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800357a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f90d 	bl	800379e <RTC_WriteAlarmCounter>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2204      	movs	r2, #4
 800358e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e006      	b.n	80035a8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	91a2b3c5 	.word	0x91a2b3c5
 80035b4:	aaaaaaab 	.word	0xaaaaaaab
 80035b8:	00015180 	.word	0x00015180

080035bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2100      	movs	r1, #0
 80035ce:	460a      	mov	r2, r1
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	460a      	mov	r2, r1
 80035d4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_RTC_GetDate+0x26>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e03a      	b.n	800365c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	2200      	movs	r2, #0
 80035ec:	4619      	mov	r1, r3
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fe56 	bl	80032a0 <HAL_RTC_GetTime>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e02e      	b.n	800365c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	7b1a      	ldrb	r2, [r3, #12]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	7bda      	ldrb	r2, [r3, #15]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	7b5a      	ldrb	r2, [r3, #13]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	7b9a      	ldrb	r2, [r3, #14]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01a      	beq.n	800365a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	78db      	ldrb	r3, [r3, #3]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f92f 	bl	800388c <RTC_ByteToBcd2>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f926 	bl	800388c <RTC_ByteToBcd2>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	789b      	ldrb	r3, [r3, #2]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f91d 	bl	800388c <RTC_ByteToBcd2>
 8003652:	4603      	mov	r3, r0
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e01d      	b.n	80036b6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0208 	bic.w	r2, r2, #8
 8003688:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800368a:	f7fd ffb7 	bl	80015fc <HAL_GetTick>
 800368e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003690:	e009      	b.n	80036a6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003692:	f7fd ffb3 	bl	80015fc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a0:	d901      	bls.n	80036a6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e007      	b.n	80036b6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ee      	beq.n	8003692 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80036be:	b480      	push	{r7}
 80036c0:	b087      	sub	sp, #28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	827b      	strh	r3, [r7, #18]
 80036ca:	2300      	movs	r3, #0
 80036cc:	823b      	strh	r3, [r7, #16]
 80036ce:	2300      	movs	r3, #0
 80036d0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80036ee:	8a7a      	ldrh	r2, [r7, #18]
 80036f0:	8a3b      	ldrh	r3, [r7, #16]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d008      	beq.n	8003708 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80036f6:	8a3b      	ldrh	r3, [r7, #16]
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	b29b      	uxth	r3, r3
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e004      	b.n	8003712 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003708:	8a7b      	ldrh	r3, [r7, #18]
 800370a:	041a      	lsls	r2, r3, #16
 800370c:	89fb      	ldrh	r3, [r7, #14]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003712:	697b      	ldr	r3, [r7, #20]
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f85d 	bl	80037ec <RTC_EnterInitMode>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e011      	b.n	8003762 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	0c12      	lsrs	r2, r2, #16
 8003746:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	b292      	uxth	r2, r2
 8003750:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f872 	bl	800383c <RTC_ExitInitMode>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	81fb      	strh	r3, [r7, #14]
 8003778:	2300      	movs	r3, #0
 800377a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	041a      	lsls	r2, r3, #16
 8003790:	89bb      	ldrh	r3, [r7, #12]
 8003792:	4313      	orrs	r3, r2
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f81d 	bl	80037ec <RTC_EnterInitMode>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	e011      	b.n	80037e2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	0c12      	lsrs	r2, r2, #16
 80037c6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b292      	uxth	r2, r2
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f832 	bl	800383c <RTC_ExitInitMode>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80037f8:	f7fd ff00 	bl	80015fc <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80037fe:	e009      	b.n	8003814 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003800:	f7fd fefc 	bl	80015fc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800380e:	d901      	bls.n	8003814 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e00f      	b.n	8003834 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ee      	beq.n	8003800 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0210 	orr.w	r2, r2, #16
 8003830:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0210 	bic.w	r2, r2, #16
 8003856:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003858:	f7fd fed0 	bl	80015fc <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800385e:	e009      	b.n	8003874 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003860:	f7fd fecc 	bl	80015fc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800386e:	d901      	bls.n	8003874 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e007      	b.n	8003884 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800389a:	e005      	b.n	80038a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	3b0a      	subs	r3, #10
 80038a6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	2b09      	cmp	r3, #9
 80038ac:	d8f6      	bhi.n	800389c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	b2db      	uxtb	r3, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7bdb      	ldrb	r3, [r3, #15]
 800391e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7b5b      	ldrb	r3, [r3, #13]
 8003924:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7b9b      	ldrb	r3, [r3, #14]
 800392a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	e06f      	b.n	8003a12 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d011      	beq.n	800395c <RTC_DateUpdate+0x5c>
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d00e      	beq.n	800395c <RTC_DateUpdate+0x5c>
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d00b      	beq.n	800395c <RTC_DateUpdate+0x5c>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b07      	cmp	r3, #7
 8003948:	d008      	beq.n	800395c <RTC_DateUpdate+0x5c>
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d005      	beq.n	800395c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0a      	cmp	r3, #10
 8003954:	d002      	beq.n	800395c <RTC_DateUpdate+0x5c>
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	d117      	bne.n	800398c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b1e      	cmp	r3, #30
 8003960:	d803      	bhi.n	800396a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003968:	e050      	b.n	8003a0c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	d005      	beq.n	800397c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3301      	adds	r3, #1
 8003974:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003976:	2301      	movs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800397a:	e047      	b.n	8003a0c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
          year++;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3301      	adds	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800398a:	e03f      	b.n	8003a0c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d008      	beq.n	80039a4 <RTC_DateUpdate+0xa4>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b06      	cmp	r3, #6
 8003996:	d005      	beq.n	80039a4 <RTC_DateUpdate+0xa4>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b09      	cmp	r3, #9
 800399c:	d002      	beq.n	80039a4 <RTC_DateUpdate+0xa4>
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b0b      	cmp	r3, #11
 80039a2:	d10c      	bne.n	80039be <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b1d      	cmp	r3, #29
 80039a8:	d803      	bhi.n	80039b2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80039b0:	e02c      	b.n	8003a0c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80039b8:	2301      	movs	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80039bc:	e026      	b.n	8003a0c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d123      	bne.n	8003a0c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b1b      	cmp	r3, #27
 80039c8:	d803      	bhi.n	80039d2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3301      	adds	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e01c      	b.n	8003a0c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b1c      	cmp	r3, #28
 80039d6:	d111      	bne.n	80039fc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f839 	bl	8003a54 <RTC_IsLeapYear>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e00d      	b.n	8003a0c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	3301      	adds	r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80039f6:	2301      	movs	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e007      	b.n	8003a0c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b1d      	cmp	r3, #29
 8003a00:	d104      	bne.n	8003a0c <RTC_DateUpdate+0x10c>
      {
        month++;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3301      	adds	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d38b      	bcc.n	8003932 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6978      	ldr	r0, [r7, #20]
 8003a3e:	f000 f83b 	bl	8003ab8 <RTC_WeekDayNum>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	731a      	strb	r2, [r3, #12]
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e01d      	b.n	8003aaa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <RTC_IsLeapYear+0x60>)
 8003a72:	fba2 1203 	umull	r1, r2, r2, r3
 8003a76:	0952      	lsrs	r2, r2, #5
 8003a78:	2164      	movs	r1, #100	; 0x64
 8003a7a:	fb01 f202 	mul.w	r2, r1, r2
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e00f      	b.n	8003aaa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <RTC_IsLeapYear+0x60>)
 8003a8e:	fba2 1203 	umull	r1, r2, r2, r3
 8003a92:	09d2      	lsrs	r2, r2, #7
 8003a94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003a98:	fb01 f202 	mul.w	r2, r1, r2
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003aa8:	2300      	movs	r3, #0
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	51eb851f 	.word	0x51eb851f

08003ab8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003ad6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d82d      	bhi.n	8003b3a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <RTC_WeekDayNum+0xe4>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	085a      	lsrs	r2, r3, #1
 8003af2:	78bb      	ldrb	r3, [r7, #2]
 8003af4:	441a      	add	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	441a      	add	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	4926      	ldr	r1, [pc, #152]	; (8003ba0 <RTC_WeekDayNum+0xe8>)
 8003b08:	fba1 1303 	umull	r1, r3, r1, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <RTC_WeekDayNum+0xe8>)
 8003b16:	fba1 1303 	umull	r1, r3, r1, r3
 8003b1a:	09db      	lsrs	r3, r3, #7
 8003b1c:	4413      	add	r3, r2
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <RTC_WeekDayNum+0xec>)
 8003b22:	fba3 1302 	umull	r1, r3, r3, r2
 8003b26:	1ad1      	subs	r1, r2, r3
 8003b28:	0849      	lsrs	r1, r1, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	0899      	lsrs	r1, r3, #2
 8003b2e:	460b      	mov	r3, r1
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e029      	b.n	8003b8e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <RTC_WeekDayNum+0xe4>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	085a      	lsrs	r2, r3, #1
 8003b4e:	78bb      	ldrb	r3, [r7, #2]
 8003b50:	441a      	add	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	441a      	add	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4910      	ldr	r1, [pc, #64]	; (8003ba0 <RTC_WeekDayNum+0xe8>)
 8003b60:	fba1 1303 	umull	r1, r3, r1, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	490d      	ldr	r1, [pc, #52]	; (8003ba0 <RTC_WeekDayNum+0xe8>)
 8003b6c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b70:	09db      	lsrs	r3, r3, #7
 8003b72:	4413      	add	r3, r2
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <RTC_WeekDayNum+0xec>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	1ad1      	subs	r1, r2, r3
 8003b7e:	0849      	lsrs	r1, r1, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	0899      	lsrs	r1, r3, #2
 8003b84:	460b      	mov	r3, r1
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	1a5b      	subs	r3, r3, r1
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	b2db      	uxtb	r3, r3
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	38e38e39 	.word	0x38e38e39
 8003ba0:	51eb851f 	.word	0x51eb851f
 8003ba4:	24924925 	.word	0x24924925

08003ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e076      	b.n	8003ca8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d108      	bne.n	8003bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bca:	d009      	beq.n	8003be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
 8003bd2:	e005      	b.n	8003be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fad2 	bl	80011a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	ea42 0103 	orr.w	r1, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	0c1a      	lsrs	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f002 0204 	and.w	r2, r2, #4
 8003c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_SPI_Transmit+0x22>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e12d      	b.n	8003f2e <HAL_SPI_Transmit+0x27e>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cda:	f7fd fc8f 	bl	80015fc <HAL_GetTick>
 8003cde:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d002      	beq.n	8003cf6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf4:	e116      	b.n	8003f24 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_Transmit+0x52>
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d06:	e10d      	b.n	8003f24 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4e:	d10f      	bne.n	8003d70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d007      	beq.n	8003d8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d96:	d14f      	bne.n	8003e38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_Transmit+0xf6>
 8003da0:	8afb      	ldrh	r3, [r7, #22]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d142      	bne.n	8003e2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	881a      	ldrh	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	1c9a      	adds	r2, r3, #2
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dca:	e02f      	b.n	8003e2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d112      	bne.n	8003e00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dfe:	e015      	b.n	8003e2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e00:	f7fd fbfc 	bl	80015fc <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d803      	bhi.n	8003e18 <HAL_SPI_Transmit+0x168>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d102      	bne.n	8003e1e <HAL_SPI_Transmit+0x16e>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e2a:	e07b      	b.n	8003f24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ca      	bne.n	8003dcc <HAL_SPI_Transmit+0x11c>
 8003e36:	e050      	b.n	8003eda <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_Transmit+0x196>
 8003e40:	8afb      	ldrh	r3, [r7, #22]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d144      	bne.n	8003ed0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e6c:	e030      	b.n	8003ed0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d113      	bne.n	8003ea4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ea2:	e015      	b.n	8003ed0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea4:	f7fd fbaa 	bl	80015fc <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d803      	bhi.n	8003ebc <HAL_SPI_Transmit+0x20c>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d102      	bne.n	8003ec2 <HAL_SPI_Transmit+0x212>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ece:	e029      	b.n	8003f24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1c9      	bne.n	8003e6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	6839      	ldr	r1, [r7, #0]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fbcc 	bl	800467c <SPI_EndRxTxTransaction>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e003      	b.n	8003f24 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b088      	sub	sp, #32
 8003f3a:	af02      	add	r7, sp, #8
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
 8003f58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f5a:	e0fb      	b.n	8004154 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f64:	d112      	bne.n	8003f8c <HAL_SPI_Receive+0x56>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10e      	bne.n	8003f8c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2204      	movs	r2, #4
 8003f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f8ef 	bl	8004166 <HAL_SPI_TransmitReceive>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	e0e8      	b.n	800415e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_SPI_Receive+0x64>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0e1      	b.n	800415e <HAL_SPI_Receive+0x228>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa2:	f7fd fb2b 	bl	80015fc <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Receive+0x7e>
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fb8:	e0cc      	b.n	8004154 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	d10f      	bne.n	8004022 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d007      	beq.n	8004040 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d16a      	bne.n	800411e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004048:	e032      	b.n	80040b0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d115      	bne.n	8004084 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f103 020c 	add.w	r2, r3, #12
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004082:	e015      	b.n	80040b0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004084:	f7fd faba 	bl	80015fc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d803      	bhi.n	800409c <HAL_SPI_Receive+0x166>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_Receive+0x16c>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040ae:	e051      	b.n	8004154 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1c7      	bne.n	800404a <HAL_SPI_Receive+0x114>
 80040ba:	e035      	b.n	8004128 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d113      	bne.n	80040f2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	b292      	uxth	r2, r2
 80040d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	1c9a      	adds	r2, r3, #2
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f0:	e015      	b.n	800411e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f2:	f7fd fa83 	bl	80015fc <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d803      	bhi.n	800410a <HAL_SPI_Receive+0x1d4>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d102      	bne.n	8004110 <HAL_SPI_Receive+0x1da>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800411c:	e01a      	b.n	8004154 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1c9      	bne.n	80040bc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa53 	bl	80045d8 <SPI_EndRxTransaction>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
 800414a:	e003      	b.n	8004154 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800415c:	7dfb      	ldrb	r3, [r7, #23]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b08c      	sub	sp, #48	; 0x30
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004174:	2301      	movs	r3, #1
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_SPI_TransmitReceive+0x26>
 8004188:	2302      	movs	r3, #2
 800418a:	e198      	b.n	80044be <HAL_SPI_TransmitReceive+0x358>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004194:	f7fd fa32 	bl	80015fc <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041aa:	887b      	ldrh	r3, [r7, #2]
 80041ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d00f      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x70>
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041bc:	d107      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x68>
 80041c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d003      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041d4:	e16d      	b.n	80044b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x82>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x82>
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041ee:	e160      	b.n	80044b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d003      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2205      	movs	r2, #5
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d007      	beq.n	8004258 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d17c      	bne.n	800435c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x10a>
 800426a:	8b7b      	ldrh	r3, [r7, #26]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d16a      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004294:	e057      	b.n	8004346 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d11b      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x176>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x176>
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d113      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	1c9a      	adds	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d119      	bne.n	800431e <HAL_SPI_TransmitReceive+0x1b8>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d014      	beq.n	800431e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	b292      	uxth	r2, r2
 8004300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	1c9a      	adds	r2, r3, #2
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800431a:	2301      	movs	r3, #1
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800431e:	f7fd f96d 	bl	80015fc <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800432a:	429a      	cmp	r2, r3
 800432c:	d80b      	bhi.n	8004346 <HAL_SPI_TransmitReceive+0x1e0>
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d007      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004344:	e0b5      	b.n	80044b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1a2      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x130>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d19d      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x130>
 800435a:	e080      	b.n	800445e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_TransmitReceive+0x204>
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d16f      	bne.n	800444a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004390:	e05b      	b.n	800444a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11c      	bne.n	80043da <HAL_SPI_TransmitReceive+0x274>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_SPI_TransmitReceive+0x274>
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d114      	bne.n	80043da <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d119      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2b6>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d014      	beq.n	800441c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800441c:	f7fd f8ee 	bl	80015fc <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004428:	429a      	cmp	r2, r3
 800442a:	d803      	bhi.n	8004434 <HAL_SPI_TransmitReceive+0x2ce>
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d102      	bne.n	800443a <HAL_SPI_TransmitReceive+0x2d4>
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004448:	e033      	b.n	80044b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d19e      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x22c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d199      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800445e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f90a 	bl	800467c <SPI_EndRxTxTransaction>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800447a:	e01a      	b.n	80044b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a8:	e003      	b.n	80044b2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3730      	adds	r7, #48	; 0x30
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044d8:	f7fd f890 	bl	80015fc <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044e8:	f7fd f888 	bl	80015fc <HAL_GetTick>
 80044ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	015b      	lsls	r3, r3, #5
 80044f4:	0d1b      	lsrs	r3, r3, #20
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044fe:	e054      	b.n	80045aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d050      	beq.n	80045aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004508:	f7fd f878 	bl	80015fc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	429a      	cmp	r2, r3
 8004516:	d902      	bls.n	800451e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d13d      	bne.n	800459a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800452c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004536:	d111      	bne.n	800455c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	d004      	beq.n	800454c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d107      	bne.n	800455c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004564:	d10f      	bne.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e017      	b.n	80045ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d19b      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000004 	.word	0x20000004

080045d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ec:	d111      	bne.n	8004612 <SPI_EndRxTransaction+0x3a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f6:	d004      	beq.n	8004602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d107      	bne.n	8004612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d117      	bne.n	800464c <SPI_EndRxTransaction+0x74>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d112      	bne.n	800464c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	2101      	movs	r1, #1
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff ff49 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01a      	beq.n	8004672 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e013      	b.n	8004674 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ff36 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e000      	b.n	8004674 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff18 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e000      	b.n	80046b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e041      	b.n	800474e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fdca 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f000 fb0c 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e041      	b.n	80047ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fc fd5d 	bl	800123c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fabd 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_TIM_PWM_Start+0x24>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e022      	b.n	800485e <HAL_TIM_PWM_Start+0x6a>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d109      	bne.n	8004832 <HAL_TIM_PWM_Start+0x3e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e015      	b.n	800485e <HAL_TIM_PWM_Start+0x6a>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start+0x58>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e008      	b.n	800485e <HAL_TIM_PWM_Start+0x6a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e05e      	b.n	8004924 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0x82>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	e013      	b.n	800489e <HAL_TIM_PWM_Start+0xaa>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0x92>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004884:	e00b      	b.n	800489e <HAL_TIM_PWM_Start+0xaa>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	e003      	b.n	800489e <HAL_TIM_PWM_Start+0xaa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fcb4 	bl	8005214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_TIM_PWM_Start+0x138>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_TIM_PWM_Start+0x138>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_TIM_PWM_Start+0xfa>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d8:	d009      	beq.n	80048ee <HAL_TIM_PWM_Start+0xfa>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_TIM_PWM_Start+0x13c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_TIM_PWM_Start+0xfa>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a12      	ldr	r2, [pc, #72]	; (8004934 <HAL_TIM_PWM_Start+0x140>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d111      	bne.n	8004912 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b06      	cmp	r3, #6
 80048fe:	d010      	beq.n	8004922 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004910:	e007      	b.n	8004922 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800

08004938 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fc62 	bl	8005214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_TIM_PWM_Stop+0xc4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d117      	bne.n	800498a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	f241 1311 	movw	r3, #4369	; 0x1111
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_TIM_PWM_Stop+0x52>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a1a      	ldr	r2, [r3, #32]
 8004970:	f240 4344 	movw	r3, #1092	; 0x444
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_TIM_PWM_Stop+0x52>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	f241 1311 	movw	r3, #4369	; 0x1111
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <HAL_TIM_PWM_Stop+0x82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	f240 4344 	movw	r3, #1092	; 0x444
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_PWM_Stop+0x82>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <HAL_TIM_PWM_Stop+0x92>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c8:	e013      	b.n	80049f2 <HAL_TIM_PWM_Stop+0xba>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d104      	bne.n	80049da <HAL_TIM_PWM_Stop+0xa2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d8:	e00b      	b.n	80049f2 <HAL_TIM_PWM_Stop+0xba>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d104      	bne.n	80049ea <HAL_TIM_PWM_Stop+0xb2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e8:	e003      	b.n	80049f2 <HAL_TIM_PWM_Stop+0xba>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40012c00 	.word	0x40012c00

08004a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e0ae      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	f200 809f 	bhi.w	8004b6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004b6d 	.word	0x08004b6d
 8004a3c:	08004b6d 	.word	0x08004b6d
 8004a40:	08004b6d 	.word	0x08004b6d
 8004a44:	08004aa9 	.word	0x08004aa9
 8004a48:	08004b6d 	.word	0x08004b6d
 8004a4c:	08004b6d 	.word	0x08004b6d
 8004a50:	08004b6d 	.word	0x08004b6d
 8004a54:	08004aeb 	.word	0x08004aeb
 8004a58:	08004b6d 	.word	0x08004b6d
 8004a5c:	08004b6d 	.word	0x08004b6d
 8004a60:	08004b6d 	.word	0x08004b6d
 8004a64:	08004b2b 	.word	0x08004b2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f9b2 	bl	8004dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0208 	orr.w	r2, r2, #8
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0204 	bic.w	r2, r2, #4
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	619a      	str	r2, [r3, #24]
      break;
 8004aa6:	e064      	b.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f9f8 	bl	8004ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	021a      	lsls	r2, r3, #8
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	619a      	str	r2, [r3, #24]
      break;
 8004ae8:	e043      	b.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fa41 	bl	8004f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0208 	orr.w	r2, r2, #8
 8004b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0204 	bic.w	r2, r2, #4
 8004b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	61da      	str	r2, [r3, #28]
      break;
 8004b28:	e023      	b.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa8b 	bl	800504c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	021a      	lsls	r2, r3, #8
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	61da      	str	r2, [r3, #28]
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e0b4      	b.n	8004d0a <HAL_TIM_ConfigClockSource+0x186>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd8:	d03e      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0xd4>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	f200 8087 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	f000 8086 	beq.w	8004cf6 <HAL_TIM_ConfigClockSource+0x172>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	d87f      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b70      	cmp	r3, #112	; 0x70
 8004bf2:	d01a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0xa6>
 8004bf4:	2b70      	cmp	r3, #112	; 0x70
 8004bf6:	d87b      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b60      	cmp	r3, #96	; 0x60
 8004bfa:	d050      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x11a>
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d877      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b50      	cmp	r3, #80	; 0x50
 8004c02:	d03c      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0xfa>
 8004c04:	2b50      	cmp	r3, #80	; 0x50
 8004c06:	d873      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d058      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x13a>
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d86f      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b30      	cmp	r3, #48	; 0x30
 8004c12:	d064      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x15a>
 8004c14:	2b30      	cmp	r3, #48	; 0x30
 8004c16:	d86b      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d060      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d867      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05c      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x15a>
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d05a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x15a>
 8004c28:	e062      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c3a:	f000 facc 	bl	80051d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	609a      	str	r2, [r3, #8]
      break;
 8004c56:	e04f      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c68:	f000 fab5 	bl	80051d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c7a:	609a      	str	r2, [r3, #8]
      break;
 8004c7c:	e03c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fa2c 	bl	80050e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2150      	movs	r1, #80	; 0x50
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa83 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e02c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fa4a 	bl	8005144 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2160      	movs	r1, #96	; 0x60
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fa73 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e01c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f000 fa0c 	bl	80050e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2140      	movs	r1, #64	; 0x40
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fa63 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e00c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f000 fa5a 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004cee:	e003      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <TIM_Base_SetConfig+0xb8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <TIM_Base_SetConfig+0x30>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0x30>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <TIM_Base_SetConfig+0xbc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0x30>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_Base_SetConfig+0xc0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <TIM_Base_SetConfig+0xb8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_Base_SetConfig+0x62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d007      	beq.n	8004d76 <TIM_Base_SetConfig+0x62>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a19      	ldr	r2, [pc, #100]	; (8004dd0 <TIM_Base_SetConfig+0xbc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_Base_SetConfig+0x62>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <TIM_Base_SetConfig+0xc0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <TIM_Base_SetConfig+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800

08004dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f023 0201 	bic.w	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 0302 	bic.w	r3, r3, #2
 8004e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <TIM_OC1_SetConfig+0xc8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d10c      	bne.n	8004e4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0308 	bic.w	r3, r3, #8
 8004e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 0304 	bic.w	r3, r3, #4
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <TIM_OC1_SetConfig+0xc8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d111      	bne.n	8004e7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	621a      	str	r2, [r3, #32]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f023 0210 	bic.w	r2, r3, #16
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0320 	bic.w	r3, r3, #32
 8004eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <TIM_OC2_SetConfig+0xd0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10d      	bne.n	8004f20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <TIM_OC2_SetConfig+0xd0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d113      	bne.n	8004f50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00

08004f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <TIM_OC3_SetConfig+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d10d      	bne.n	8004ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a14      	ldr	r2, [pc, #80]	; (8005048 <TIM_OC3_SetConfig+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d113      	bne.n	8005022 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00

0800504c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	031b      	lsls	r3, r3, #12
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <TIM_OC4_SetConfig+0x98>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d109      	bne.n	80050c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00

080050e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0201 	bic.w	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 030a 	bic.w	r3, r3, #10
 8005124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 0210 	bic.w	r2, r3, #16
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800516e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	031b      	lsls	r3, r3, #12
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005180:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f043 0307 	orr.w	r3, r3, #7
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	021a      	lsls	r2, r3, #8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	609a      	str	r2, [r3, #8]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2201      	movs	r2, #1
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e046      	b.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a16      	ldr	r2, [pc, #88]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c0:	d009      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a12      	ldr	r2, [pc, #72]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a10      	ldr	r2, [pc, #64]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10c      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800

08005318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005330:	2302      	movs	r3, #2
 8005332:	e03d      	b.n	80053b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e042      	b.n	8005452 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fb ffc9 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2224      	movs	r2, #36	; 0x24
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f82c 	bl	800545c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005412:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005422:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005432:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005496:	f023 030c 	bic.w	r3, r3, #12
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2c      	ldr	r2, [pc, #176]	; (8005570 <UART_SetConfig+0x114>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054c4:	f7fd fc2a 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	e002      	b.n	80054d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fd fc12 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80054d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009a      	lsls	r2, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	4a22      	ldr	r2, [pc, #136]	; (8005574 <UART_SetConfig+0x118>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	0119      	lsls	r1, r3, #4
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009a      	lsls	r2, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	fbb2 f2f3 	udiv	r2, r2, r3
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <UART_SetConfig+0x118>)
 800550a:	fba3 0302 	umull	r0, r3, r3, r2
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2064      	movs	r0, #100	; 0x64
 8005512:	fb00 f303 	mul.w	r3, r0, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	3332      	adds	r3, #50	; 0x32
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <UART_SetConfig+0x118>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005528:	4419      	add	r1, r3
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009a      	lsls	r2, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <UART_SetConfig+0x118>)
 8005542:	fba3 0302 	umull	r0, r3, r3, r2
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	2064      	movs	r0, #100	; 0x64
 800554a:	fb00 f303 	mul.w	r3, r0, r3
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	3332      	adds	r3, #50	; 0x32
 8005554:	4a07      	ldr	r2, [pc, #28]	; (8005574 <UART_SetConfig+0x118>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	f003 020f 	and.w	r2, r3, #15
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	440a      	add	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40013800 	.word	0x40013800
 8005574:	51eb851f 	.word	0x51eb851f

08005578 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	4618      	mov	r0, r3
 8005586:	f7fc f843 	bl	8001610 <HAL_Delay>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af02      	add	r7, sp, #8
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
 800559e:	4613      	mov	r3, r2
 80055a0:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	f023 030f 	bic.w	r3, r3, #15
 80055a8:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7adb      	ldrb	r3, [r3, #11]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	f043 0308 	orr.w	r3, r3, #8
 80055be:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80055c0:	7bbb      	ldrb	r3, [r7, #14]
 80055c2:	f043 0308 	orr.w	r3, r3, #8
 80055c6:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80055c8:	78bb      	ldrb	r3, [r7, #2]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d108      	bne.n	80055e0 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	73bb      	strb	r3, [r7, #14]
 80055de:	e00a      	b.n	80055f6 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80055e0:	78bb      	ldrb	r3, [r7, #2]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	f043 0304 	orr.w	r3, r3, #4
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8005600:	2001      	movs	r0, #1
 8005602:	f7ff ffb9 	bl	8005578 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	f043 0304 	orr.w	r3, r3, #4
 8005610:	b2db      	uxtb	r3, r3
 8005612:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8005614:	2001      	movs	r0, #1
 8005616:	f7ff ffaf 	bl	8005578 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	b299      	uxth	r1, r3
 8005628:	f107 0208 	add.w	r2, r7, #8
 800562c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	2304      	movs	r3, #4
 8005634:	f7fc fc30 	bl	8001e98 <HAL_I2C_Master_Transmit>
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	4611      	mov	r1, r2
 800564c:	461a      	mov	r2, r3
 800564e:	460b      	mov	r3, r1
 8005650:	71fb      	strb	r3, [r7, #7]
 8005652:	4613      	mov	r3, r2
 8005654:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	79fa      	ldrb	r2, [r7, #7]
 8005660:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	79ba      	ldrb	r2, [r7, #6]
 8005666:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	7e3a      	ldrb	r2, [r7, #24]
 800566c:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2228      	movs	r2, #40	; 0x28
 8005672:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2206      	movs	r2, #6
 8005678:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	220c      	movs	r2, #12
 800567e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2214      	movs	r2, #20
 8005684:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2208      	movs	r2, #8
 800568a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 800568c:	2032      	movs	r0, #50	; 0x32
 800568e:	f7ff ff73 	bl	8005578 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005692:	2200      	movs	r2, #0
 8005694:	2133      	movs	r1, #51	; 0x33
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff ff7b 	bl	8005592 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800569c:	2200      	movs	r2, #0
 800569e:	2133      	movs	r1, #51	; 0x33
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff76 	bl	8005592 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80056a6:	2005      	movs	r0, #5
 80056a8:	f7ff ff66 	bl	8005578 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80056ac:	2200      	movs	r2, #0
 80056ae:	2132      	movs	r1, #50	; 0x32
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff ff6e 	bl	8005592 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80056b6:	2005      	movs	r0, #5
 80056b8:	f7ff ff5e 	bl	8005578 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80056bc:	2200      	movs	r2, #0
 80056be:	2120      	movs	r1, #32
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff ff66 	bl	8005592 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80056c6:	2005      	movs	r0, #5
 80056c8:	f7ff ff56 	bl	8005578 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	79db      	ldrb	r3, [r3, #7]
 80056d0:	2200      	movs	r2, #0
 80056d2:	4619      	mov	r1, r3
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff ff5c 	bl	8005592 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	7a1b      	ldrb	r3, [r3, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	4619      	mov	r1, r3
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff ff55 	bl	8005592 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	7a5b      	ldrb	r3, [r3, #9]
 80056ec:	2200      	movs	r2, #0
 80056ee:	4619      	mov	r1, r3
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff ff4e 	bl	8005592 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	7a9b      	ldrb	r3, [r3, #10]
 80056fa:	2200      	movs	r2, #0
 80056fc:	4619      	mov	r1, r3
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff ff47 	bl	8005592 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8005704:	2200      	movs	r2, #0
 8005706:	2101      	movs	r1, #1
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff ff42 	bl	8005592 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 800570e:	2200      	movs	r2, #0
 8005710:	2102      	movs	r1, #2
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff ff3d 	bl	8005592 <CLCD_WriteI2C>
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
 800572c:	4613      	mov	r3, r2
 800572e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	795b      	ldrb	r3, [r3, #5]
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	429a      	cmp	r2, r3
 800573c:	d303      	bcc.n	8005746 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	795b      	ldrb	r3, [r3, #5]
 8005742:	3b01      	subs	r3, #1
 8005744:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	799b      	ldrb	r3, [r3, #6]
 800574a:	78ba      	ldrb	r2, [r7, #2]
 800574c:	429a      	cmp	r2, r3
 800574e:	d303      	bcc.n	8005758 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	799b      	ldrb	r3, [r3, #6]
 8005754:	3b01      	subs	r3, #1
 8005756:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8005758:	78bb      	ldrb	r3, [r7, #2]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	e013      	b.n	800578c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8005764:	78bb      	ldrb	r3, [r7, #2]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d103      	bne.n	8005772 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	3340      	adds	r3, #64	; 0x40
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e00c      	b.n	800578c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8005772:	78bb      	ldrb	r3, [r7, #2]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d103      	bne.n	8005780 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	3314      	adds	r3, #20
 800577c:	73fb      	strb	r3, [r7, #15]
 800577e:	e005      	b.n	800578c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8005780:	78bb      	ldrb	r3, [r7, #2]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d102      	bne.n	800578c <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	3354      	adds	r3, #84	; 0x54
 800578a:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2200      	movs	r2, #0
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fefa 	bl	8005592 <CLCD_WriteI2C>
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	2201      	movs	r2, #1
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff feea 	bl	8005592 <CLCD_WriteI2C>
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80057d0:	e007      	b.n	80057e2 <CLCD_I2C_WriteString+0x1c>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	603a      	str	r2, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff ffe2 	bl	80057a6 <CLCD_I2C_WriteChar>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f3      	bne.n	80057d2 <CLCD_I2C_WriteString+0xc>
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <initApp>:
extern CLCD_I2C_Name LCD1;
extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c1;

void initApp(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af02      	add	r7, sp, #8
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80057fa:	2104      	movs	r1, #4
 80057fc:	4809      	ldr	r0, [pc, #36]	; (8005824 <initApp+0x30>)
 80057fe:	f7fe fff9 	bl	80047f4 <HAL_TIM_PWM_Start>

    CLCD_I2C_Init(&LCD1, &hi2c1, 0x7E, 20, 4);
 8005802:	2304      	movs	r3, #4
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2314      	movs	r3, #20
 8005808:	227e      	movs	r2, #126	; 0x7e
 800580a:	4907      	ldr	r1, [pc, #28]	; (8005828 <initApp+0x34>)
 800580c:	4807      	ldr	r0, [pc, #28]	; (800582c <initApp+0x38>)
 800580e:	f7ff ff17 	bl	8005640 <CLCD_I2C_Init>

    HAL_GPIO_WritePin(LED_LCD_GPIO_Port, LED_LCD_Pin, GPIO_PIN_SET);
 8005812:	2201      	movs	r2, #1
 8005814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005818:	4805      	ldr	r0, [pc, #20]	; (8005830 <initApp+0x3c>)
 800581a:	f7fc f9af 	bl	8001b7c <HAL_GPIO_WritePin>
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000184 	.word	0x20000184
 8005828:	2000007c 	.word	0x2000007c
 800582c:	20000214 	.word	0x20000214
 8005830:	40010c00 	.word	0x40010c00

08005834 <mainMenu>:

void mainMenu(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8005838:	2200      	movs	r2, #0
 800583a:	2100      	movs	r1, #0
 800583c:	4811      	ldr	r0, [pc, #68]	; (8005884 <mainMenu+0x50>)
 800583e:	f7ff ff6f 	bl	8005720 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "SET POINT:");
 8005842:	4911      	ldr	r1, [pc, #68]	; (8005888 <mainMenu+0x54>)
 8005844:	480f      	ldr	r0, [pc, #60]	; (8005884 <mainMenu+0x50>)
 8005846:	f7ff ffbe 	bl	80057c6 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800584a:	2201      	movs	r2, #1
 800584c:	2100      	movs	r1, #0
 800584e:	480d      	ldr	r0, [pc, #52]	; (8005884 <mainMenu+0x50>)
 8005850:	f7ff ff66 	bl	8005720 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "REAL VALUE:");
 8005854:	490d      	ldr	r1, [pc, #52]	; (800588c <mainMenu+0x58>)
 8005856:	480b      	ldr	r0, [pc, #44]	; (8005884 <mainMenu+0x50>)
 8005858:	f7ff ffb5 	bl	80057c6 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 0, 2);
 800585c:	2202      	movs	r2, #2
 800585e:	2100      	movs	r1, #0
 8005860:	4808      	ldr	r0, [pc, #32]	; (8005884 <mainMenu+0x50>)
 8005862:	f7ff ff5d 	bl	8005720 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "TIME RUNNER:");
 8005866:	490a      	ldr	r1, [pc, #40]	; (8005890 <mainMenu+0x5c>)
 8005868:	4806      	ldr	r0, [pc, #24]	; (8005884 <mainMenu+0x50>)
 800586a:	f7ff ffac 	bl	80057c6 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 0, 3);
 800586e:	2203      	movs	r2, #3
 8005870:	2100      	movs	r1, #0
 8005872:	4804      	ldr	r0, [pc, #16]	; (8005884 <mainMenu+0x50>)
 8005874:	f7ff ff54 	bl	8005720 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "STATUS:");
 8005878:	4906      	ldr	r1, [pc, #24]	; (8005894 <mainMenu+0x60>)
 800587a:	4802      	ldr	r0, [pc, #8]	; (8005884 <mainMenu+0x50>)
 800587c:	f7ff ffa3 	bl	80057c6 <CLCD_I2C_WriteString>
}
 8005880:	bf00      	nop
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000214 	.word	0x20000214
 8005888:	080065b4 	.word	0x080065b4
 800588c:	080065c0 	.word	0x080065c0
 8005890:	080065cc 	.word	0x080065cc
 8005894:	080065dc 	.word	0x080065dc

08005898 <updateSetpoint>:

void updateSetpoint(uint16_t temp)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 13, 0);
 80058a2:	2200      	movs	r2, #0
 80058a4:	210d      	movs	r1, #13
 80058a6:	480a      	ldr	r0, [pc, #40]	; (80058d0 <updateSetpoint+0x38>)
 80058a8:	f7ff ff3a 	bl	8005720 <CLCD_I2C_SetCursor>
    char buffer[5];
    sprintf(buffer, "%06i", temp);
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	4908      	ldr	r1, [pc, #32]	; (80058d4 <updateSetpoint+0x3c>)
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 f9bf 	bl	8005c38 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4619      	mov	r1, r3
 80058c0:	4803      	ldr	r0, [pc, #12]	; (80058d0 <updateSetpoint+0x38>)
 80058c2:	f7ff ff80 	bl	80057c6 <CLCD_I2C_WriteString>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000214 	.word	0x20000214
 80058d4:	080065e4 	.word	0x080065e4

080058d8 <updateRealValue>:

void updateRealValue(uint16_t temp)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	80fb      	strh	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 13, 1);
 80058e2:	2201      	movs	r2, #1
 80058e4:	210d      	movs	r1, #13
 80058e6:	480a      	ldr	r0, [pc, #40]	; (8005910 <updateRealValue+0x38>)
 80058e8:	f7ff ff1a 	bl	8005720 <CLCD_I2C_SetCursor>
    char buffer[5];
    sprintf(buffer, "%06i", temp);
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	f107 0308 	add.w	r3, r7, #8
 80058f2:	4908      	ldr	r1, [pc, #32]	; (8005914 <updateRealValue+0x3c>)
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f99f 	bl	8005c38 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	4619      	mov	r1, r3
 8005900:	4803      	ldr	r0, [pc, #12]	; (8005910 <updateRealValue+0x38>)
 8005902:	f7ff ff60 	bl	80057c6 <CLCD_I2C_WriteString>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000214 	.word	0x20000214
 8005914:	080065e4 	.word	0x080065e4

08005918 <updateStatus>:

void updateStatus(uint8_t status)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_SetCursor(&LCD1, 13, 3);
 8005922:	2203      	movs	r2, #3
 8005924:	210d      	movs	r1, #13
 8005926:	480a      	ldr	r0, [pc, #40]	; (8005950 <updateStatus+0x38>)
 8005928:	f7ff fefa 	bl	8005720 <CLCD_I2C_SetCursor>
    if (status == 0)
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <updateStatus+0x22>
        CLCD_I2C_WriteString(&LCD1, "STOP");
 8005932:	4908      	ldr	r1, [pc, #32]	; (8005954 <updateStatus+0x3c>)
 8005934:	4806      	ldr	r0, [pc, #24]	; (8005950 <updateStatus+0x38>)
 8005936:	f7ff ff46 	bl	80057c6 <CLCD_I2C_WriteString>
    if (status == 1)
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d103      	bne.n	8005948 <updateStatus+0x30>
        CLCD_I2C_WriteString(&LCD1, "RUN ");
 8005940:	4905      	ldr	r1, [pc, #20]	; (8005958 <updateStatus+0x40>)
 8005942:	4803      	ldr	r0, [pc, #12]	; (8005950 <updateStatus+0x38>)
 8005944:	f7ff ff3f 	bl	80057c6 <CLCD_I2C_WriteString>
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000214 	.word	0x20000214
 8005954:	080065ec 	.word	0x080065ec
 8005958:	080065f4 	.word	0x080065f4

0800595c <initTime>:

void initTime(void){
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
    HAL_RTC_Init(&hrtc);
 8005960:	4809      	ldr	r0, [pc, #36]	; (8005988 <initTime+0x2c>)
 8005962:	f7fd fb79 	bl	8003058 <HAL_RTC_Init>
    HTime.Hours = 0;
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <initTime+0x30>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
    HTime.Minutes = 0;
 800596c:	4b07      	ldr	r3, [pc, #28]	; (800598c <initTime+0x30>)
 800596e:	2200      	movs	r2, #0
 8005970:	705a      	strb	r2, [r3, #1]
    HTime.Seconds = 0;
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <initTime+0x30>)
 8005974:	2200      	movs	r2, #0
 8005976:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 8005978:	2200      	movs	r2, #0
 800597a:	4904      	ldr	r1, [pc, #16]	; (800598c <initTime+0x30>)
 800597c:	4802      	ldr	r0, [pc, #8]	; (8005988 <initTime+0x2c>)
 800597e:	f7fd fbf7 	bl	8003170 <HAL_RTC_SetTime>
}
 8005982:	bf00      	nop
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	200000d0 	.word	0x200000d0
 800598c:	20000280 	.word	0x20000280

08005990 <updateTime>:

void updateTime(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
    char buffer[10];

    HAL_RTC_GetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 8005996:	2200      	movs	r2, #0
 8005998:	4921      	ldr	r1, [pc, #132]	; (8005a20 <updateTime+0x90>)
 800599a:	4822      	ldr	r0, [pc, #136]	; (8005a24 <updateTime+0x94>)
 800599c:	f7fd fc80 	bl	80032a0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &HDate, RTC_FORMAT_BIN);
 80059a0:	2200      	movs	r2, #0
 80059a2:	4921      	ldr	r1, [pc, #132]	; (8005a28 <updateTime+0x98>)
 80059a4:	481f      	ldr	r0, [pc, #124]	; (8005a24 <updateTime+0x94>)
 80059a6:	f7fd fe09 	bl	80035bc <HAL_RTC_GetDate>

    CLCD_I2C_SetCursor(&LCD1, 12, 2);
 80059aa:	2202      	movs	r2, #2
 80059ac:	210c      	movs	r1, #12
 80059ae:	481f      	ldr	r0, [pc, #124]	; (8005a2c <updateTime+0x9c>)
 80059b0:	f7ff feb6 	bl	8005720 <CLCD_I2C_SetCursor>
    sprintf(buffer, "%02d:", HTime.Hours);
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <updateTime+0x90>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	491c      	ldr	r1, [pc, #112]	; (8005a30 <updateTime+0xa0>)
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f93a 	bl	8005c38 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4818      	ldr	r0, [pc, #96]	; (8005a2c <updateTime+0x9c>)
 80059ca:	f7ff fefc 	bl	80057c6 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 15, 2);
 80059ce:	2202      	movs	r2, #2
 80059d0:	210f      	movs	r1, #15
 80059d2:	4816      	ldr	r0, [pc, #88]	; (8005a2c <updateTime+0x9c>)
 80059d4:	f7ff fea4 	bl	8005720 <CLCD_I2C_SetCursor>
    sprintf(buffer, "%02d:", HTime.Minutes);
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <updateTime+0x90>)
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	461a      	mov	r2, r3
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	4913      	ldr	r1, [pc, #76]	; (8005a30 <updateTime+0xa0>)
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f928 	bl	8005c38 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	480f      	ldr	r0, [pc, #60]	; (8005a2c <updateTime+0x9c>)
 80059ee:	f7ff feea 	bl	80057c6 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 18, 2);
 80059f2:	2202      	movs	r2, #2
 80059f4:	2112      	movs	r1, #18
 80059f6:	480d      	ldr	r0, [pc, #52]	; (8005a2c <updateTime+0x9c>)
 80059f8:	f7ff fe92 	bl	8005720 <CLCD_I2C_SetCursor>
    sprintf(buffer, "%02d", HTime.Seconds);
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <updateTime+0x90>)
 80059fe:	789b      	ldrb	r3, [r3, #2]
 8005a00:	461a      	mov	r2, r3
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	490b      	ldr	r1, [pc, #44]	; (8005a34 <updateTime+0xa4>)
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f916 	bl	8005c38 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4806      	ldr	r0, [pc, #24]	; (8005a2c <updateTime+0x9c>)
 8005a12:	f7ff fed8 	bl	80057c6 <CLCD_I2C_WriteString>
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000280 	.word	0x20000280
 8005a24:	200000d0 	.word	0x200000d0
 8005a28:	20000284 	.word	0x20000284
 8005a2c:	20000214 	.word	0x20000214
 8005a30:	080065fc 	.word	0x080065fc
 8005a34:	08006604 	.word	0x08006604

08005a38 <MAX6675_Init>:

#include "stm32f1xx.h" // Device header
#include "stdlib.h"
#include "stdio.h"

void MAX6675_Init() {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
    // Cài đặt SPI
    hspi2.Instance = SPI2;
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <MAX6675_Init+0x44>)
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <MAX6675_Init+0x48>)
 8005a40:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <MAX6675_Init+0x44>)
 8005a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a48:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <MAX6675_Init+0x44>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <MAX6675_Init+0x44>)
 8005a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a56:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <MAX6675_Init+0x44>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <MAX6675_Init+0x44>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <MAX6675_Init+0x44>)
 8005a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6a:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <MAX6675_Init+0x44>)
 8005a6e:	2238      	movs	r2, #56	; 0x38
 8005a70:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8005a72:	4802      	ldr	r0, [pc, #8]	; (8005a7c <MAX6675_Init+0x44>)
 8005a74:	f7fe f898 	bl	8003ba8 <HAL_SPI_Init>
}
 8005a78:	bf00      	nop
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200000e4 	.word	0x200000e4
 8005a80:	40003800 	.word	0x40003800

08005a84 <getTem>:

uint32_t getTem(void){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	uint32_t temperature=0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	607b      	str	r3, [r7, #4]
    uint16_t value;
    uint8_t txData = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	707b      	strb	r3, [r7, #1]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // Kích hoạt MAX6675
 8005a92:	2200      	movs	r2, #0
 8005a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a98:	481c      	ldr	r0, [pc, #112]	; (8005b0c <getTem+0x88>)
 8005a9a:	f7fc f86f 	bl	8001b7c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2, &txData, 1, HAL_MAX_DELAY);          // Gửi 1 byte để khởi đầu giao tiếp.
 8005a9e:	1c79      	adds	r1, r7, #1
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	481a      	ldr	r0, [pc, #104]	; (8005b10 <getTem+0x8c>)
 8005aa8:	f7fe f902 	bl	8003cb0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, (uint8_t *)&value, 2, HAL_MAX_DELAY); // Nhận 16 bit dữ liệu.
 8005aac:	1cb9      	adds	r1, r7, #2
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4816      	ldr	r0, [pc, #88]	; (8005b10 <getTem+0x8c>)
 8005ab6:	f7fe fa3e 	bl	8003f36 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // Vô hiệu hóa MAX6675
 8005aba:	2201      	movs	r2, #1
 8005abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ac0:	4812      	ldr	r0, [pc, #72]	; (8005b0c <getTem+0x88>)
 8005ac2:	f7fc f85b 	bl	8001b7c <HAL_GPIO_WritePin>

    // Xử lý giá trị đọc để tính nhiệt độ Celsius
    if (value & 0x8000) {
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	b21b      	sxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da02      	bge.n	8005ad4 <getTem+0x50>
      // Bit dấu là 1, nghĩa là lỗi (thermocouple open)
      // Trong trường hợp này, bạn có thể xử lý lỗi hoặc ghi nhận một giá trị nhiệt độ lỗi.
      // Ví dụ:
      temperature = -1.0; // Giá trị nhiệt độ lỗi (điều này phụ thuộc vào ứng dụng của bạn)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	e016      	b.n	8005b02 <getTem+0x7e>
    } else {
      // Xóa bit dấu và chia cho 4 để tính nhiệt độ Celsius
      temperature = (float)((value >> 3) * 0.25);
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	08db      	lsrs	r3, r3, #3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fa fdb4 	bl	8000648 <__aeabi_i2d>
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <getTem+0x90>)
 8005ae6:	f7fa fb33 	bl	8000150 <__aeabi_dmul>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	f7fa fe13 	bl	800071c <__aeabi_d2f>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa fe5f 	bl	80007bc <__aeabi_f2uiz>
 8005afe:	4603      	mov	r3, r0
 8005b00:	607b      	str	r3, [r7, #4]
    }

    return temperature;
 8005b02:	687b      	ldr	r3, [r7, #4]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40010c00 	.word	0x40010c00
 8005b10:	200000e4 	.word	0x200000e4
 8005b14:	3fd00000 	.word	0x3fd00000

08005b18 <PID_Init>:
 */
#include "pid.h"

// Khởi tạo bộ điều khiển PID
void    PID_Init(PIDController *pid, double kp, double ki, double kd, double setpoint)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	e9c7 2300 	strd	r2, r3, [r7]
    pid->Kp = kp;
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b2a:	e9c1 2300 	strd	r2, r3, [r1]
    pid->Ki = ki;
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b34:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->Kd = kd;
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->setpoint = setpoint;
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b48:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0.0;
 8005b4c:	68f9      	ldr	r1, [r7, #12]
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->prev_error = 0.0;
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <PID_Update>:

// Cập nhật bộ điều khiển PID
double PID_Update(PIDController *pid, double process_variable)
{
 8005b72:	b5b0      	push	{r4, r5, r7, lr}
 8005b74:	b08a      	sub	sp, #40	; 0x28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	e9c7 2300 	strd	r2, r3, [r7]
    // Tính sai số
    double error = pid->setpoint - process_variable;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b88:	f7fa fc10 	bl	80003ac <__aeabi_dsub>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Tính số tích phân
    pid->integral += error;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	f7fa fc07 	bl	80003b0 <__adddf3>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Tính đạo hàm của sai số
    double derivative = error - pid->prev_error;    
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005bb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005bb6:	f7fa fbf9 	bl	80003ac <__aeabi_dsub>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Tính tín hiệu điều khiển
    double control_signal = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bcc:	f7fa fac0 	bl	8000150 <__aeabi_dmul>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005be4:	f7fa fab4 	bl	8000150 <__aeabi_dmul>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4620      	mov	r0, r4
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fa fbde 	bl	80003b0 <__adddf3>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	461d      	mov	r5, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c06:	f7fa faa3 	bl	8000150 <__aeabi_dmul>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa fbcd 	bl	80003b0 <__adddf3>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lưu trữ sai số hiện tại để sử dụng cho lần cập nhật sau
    pid->prev_error = error;
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c24:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    return control_signal;
 8005c28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c38 <siprintf>:
 8005c38:	b40e      	push	{r1, r2, r3}
 8005c3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c3e:	b500      	push	{lr}
 8005c40:	b09c      	sub	sp, #112	; 0x70
 8005c42:	ab1d      	add	r3, sp, #116	; 0x74
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	9006      	str	r0, [sp, #24]
 8005c48:	9107      	str	r1, [sp, #28]
 8005c4a:	9104      	str	r1, [sp, #16]
 8005c4c:	4808      	ldr	r0, [pc, #32]	; (8005c70 <siprintf+0x38>)
 8005c4e:	4909      	ldr	r1, [pc, #36]	; (8005c74 <siprintf+0x3c>)
 8005c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c54:	9105      	str	r1, [sp, #20]
 8005c56:	6800      	ldr	r0, [r0, #0]
 8005c58:	a902      	add	r1, sp, #8
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	f000 f98e 	bl	8005f7c <_svfiprintf_r>
 8005c60:	2200      	movs	r2, #0
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	b01c      	add	sp, #112	; 0x70
 8005c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c6c:	b003      	add	sp, #12
 8005c6e:	4770      	bx	lr
 8005c70:	2000005c 	.word	0x2000005c
 8005c74:	ffff0208 	.word	0xffff0208

08005c78 <memset>:
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4402      	add	r2, r0
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d100      	bne.n	8005c82 <memset+0xa>
 8005c80:	4770      	bx	lr
 8005c82:	f803 1b01 	strb.w	r1, [r3], #1
 8005c86:	e7f9      	b.n	8005c7c <memset+0x4>

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	; (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	2000005c 	.word	0x2000005c

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	2600      	movs	r6, #0
 8005c98:	4d0c      	ldr	r5, [pc, #48]	; (8005ccc <__libc_init_array+0x38>)
 8005c9a:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9c:	1b64      	subs	r4, r4, r5
 8005c9e:	10a4      	asrs	r4, r4, #2
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	f000 fc7a 	bl	800659c <_init>
 8005ca8:	2600      	movs	r6, #0
 8005caa:	4d0a      	ldr	r5, [pc, #40]	; (8005cd4 <__libc_init_array+0x40>)
 8005cac:	4c0a      	ldr	r4, [pc, #40]	; (8005cd8 <__libc_init_array+0x44>)
 8005cae:	1b64      	subs	r4, r4, r5
 8005cb0:	10a4      	asrs	r4, r4, #2
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08006680 	.word	0x08006680
 8005cd0:	08006680 	.word	0x08006680
 8005cd4:	08006680 	.word	0x08006680
 8005cd8:	08006684 	.word	0x08006684

08005cdc <__retarget_lock_acquire_recursive>:
 8005cdc:	4770      	bx	lr

08005cde <__retarget_lock_release_recursive>:
 8005cde:	4770      	bx	lr

08005ce0 <_free_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	d040      	beq.n	8005d6a <_free_r+0x8a>
 8005ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cec:	1f0c      	subs	r4, r1, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bfb8      	it	lt
 8005cf2:	18e4      	addlt	r4, r4, r3
 8005cf4:	f000 f8dc 	bl	8005eb0 <__malloc_lock>
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <_free_r+0x8c>)
 8005cfa:	6813      	ldr	r3, [r2, #0]
 8005cfc:	b933      	cbnz	r3, 8005d0c <_free_r+0x2c>
 8005cfe:	6063      	str	r3, [r4, #4]
 8005d00:	6014      	str	r4, [r2, #0]
 8005d02:	4628      	mov	r0, r5
 8005d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d08:	f000 b8d8 	b.w	8005ebc <__malloc_unlock>
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	d908      	bls.n	8005d22 <_free_r+0x42>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	1821      	adds	r1, r4, r0
 8005d14:	428b      	cmp	r3, r1
 8005d16:	bf01      	itttt	eq
 8005d18:	6819      	ldreq	r1, [r3, #0]
 8005d1a:	685b      	ldreq	r3, [r3, #4]
 8005d1c:	1809      	addeq	r1, r1, r0
 8005d1e:	6021      	streq	r1, [r4, #0]
 8005d20:	e7ed      	b.n	8005cfe <_free_r+0x1e>
 8005d22:	461a      	mov	r2, r3
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	b10b      	cbz	r3, 8005d2c <_free_r+0x4c>
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	d9fa      	bls.n	8005d22 <_free_r+0x42>
 8005d2c:	6811      	ldr	r1, [r2, #0]
 8005d2e:	1850      	adds	r0, r2, r1
 8005d30:	42a0      	cmp	r0, r4
 8005d32:	d10b      	bne.n	8005d4c <_free_r+0x6c>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	4401      	add	r1, r0
 8005d38:	1850      	adds	r0, r2, r1
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	6011      	str	r1, [r2, #0]
 8005d3e:	d1e0      	bne.n	8005d02 <_free_r+0x22>
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	4408      	add	r0, r1
 8005d46:	6010      	str	r0, [r2, #0]
 8005d48:	6053      	str	r3, [r2, #4]
 8005d4a:	e7da      	b.n	8005d02 <_free_r+0x22>
 8005d4c:	d902      	bls.n	8005d54 <_free_r+0x74>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	e7d6      	b.n	8005d02 <_free_r+0x22>
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	1821      	adds	r1, r4, r0
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	bf01      	itttt	eq
 8005d5c:	6819      	ldreq	r1, [r3, #0]
 8005d5e:	685b      	ldreq	r3, [r3, #4]
 8005d60:	1809      	addeq	r1, r1, r0
 8005d62:	6021      	streq	r1, [r4, #0]
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	6054      	str	r4, [r2, #4]
 8005d68:	e7cb      	b.n	8005d02 <_free_r+0x22>
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	200003c8 	.word	0x200003c8

08005d70 <sbrk_aligned>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4e0e      	ldr	r6, [pc, #56]	; (8005dac <sbrk_aligned+0x3c>)
 8005d74:	460c      	mov	r4, r1
 8005d76:	6831      	ldr	r1, [r6, #0]
 8005d78:	4605      	mov	r5, r0
 8005d7a:	b911      	cbnz	r1, 8005d82 <sbrk_aligned+0x12>
 8005d7c:	f000 fbaa 	bl	80064d4 <_sbrk_r>
 8005d80:	6030      	str	r0, [r6, #0]
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 fba5 	bl	80064d4 <_sbrk_r>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	d00a      	beq.n	8005da4 <sbrk_aligned+0x34>
 8005d8e:	1cc4      	adds	r4, r0, #3
 8005d90:	f024 0403 	bic.w	r4, r4, #3
 8005d94:	42a0      	cmp	r0, r4
 8005d96:	d007      	beq.n	8005da8 <sbrk_aligned+0x38>
 8005d98:	1a21      	subs	r1, r4, r0
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 fb9a 	bl	80064d4 <_sbrk_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d101      	bne.n	8005da8 <sbrk_aligned+0x38>
 8005da4:	f04f 34ff 	mov.w	r4, #4294967295
 8005da8:	4620      	mov	r0, r4
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	200003cc 	.word	0x200003cc

08005db0 <_malloc_r>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	1ccd      	adds	r5, r1, #3
 8005db6:	f025 0503 	bic.w	r5, r5, #3
 8005dba:	3508      	adds	r5, #8
 8005dbc:	2d0c      	cmp	r5, #12
 8005dbe:	bf38      	it	cc
 8005dc0:	250c      	movcc	r5, #12
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	db01      	blt.n	8005dcc <_malloc_r+0x1c>
 8005dc8:	42a9      	cmp	r1, r5
 8005dca:	d905      	bls.n	8005dd8 <_malloc_r+0x28>
 8005dcc:	230c      	movs	r3, #12
 8005dce:	2600      	movs	r6, #0
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005eac <_malloc_r+0xfc>
 8005ddc:	f000 f868 	bl	8005eb0 <__malloc_lock>
 8005de0:	f8d8 3000 	ldr.w	r3, [r8]
 8005de4:	461c      	mov	r4, r3
 8005de6:	bb5c      	cbnz	r4, 8005e40 <_malloc_r+0x90>
 8005de8:	4629      	mov	r1, r5
 8005dea:	4638      	mov	r0, r7
 8005dec:	f7ff ffc0 	bl	8005d70 <sbrk_aligned>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	4604      	mov	r4, r0
 8005df4:	d155      	bne.n	8005ea2 <_malloc_r+0xf2>
 8005df6:	f8d8 4000 	ldr.w	r4, [r8]
 8005dfa:	4626      	mov	r6, r4
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	d145      	bne.n	8005e8c <_malloc_r+0xdc>
 8005e00:	2c00      	cmp	r4, #0
 8005e02:	d048      	beq.n	8005e96 <_malloc_r+0xe6>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	4631      	mov	r1, r6
 8005e08:	4638      	mov	r0, r7
 8005e0a:	eb04 0903 	add.w	r9, r4, r3
 8005e0e:	f000 fb61 	bl	80064d4 <_sbrk_r>
 8005e12:	4581      	cmp	r9, r0
 8005e14:	d13f      	bne.n	8005e96 <_malloc_r+0xe6>
 8005e16:	6821      	ldr	r1, [r4, #0]
 8005e18:	4638      	mov	r0, r7
 8005e1a:	1a6d      	subs	r5, r5, r1
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7ff ffa7 	bl	8005d70 <sbrk_aligned>
 8005e22:	3001      	adds	r0, #1
 8005e24:	d037      	beq.n	8005e96 <_malloc_r+0xe6>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	442b      	add	r3, r5
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d038      	beq.n	8005ea6 <_malloc_r+0xf6>
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	42a2      	cmp	r2, r4
 8005e38:	d12b      	bne.n	8005e92 <_malloc_r+0xe2>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	e00f      	b.n	8005e60 <_malloc_r+0xb0>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	1b52      	subs	r2, r2, r5
 8005e44:	d41f      	bmi.n	8005e86 <_malloc_r+0xd6>
 8005e46:	2a0b      	cmp	r2, #11
 8005e48:	d917      	bls.n	8005e7a <_malloc_r+0xca>
 8005e4a:	1961      	adds	r1, r4, r5
 8005e4c:	42a3      	cmp	r3, r4
 8005e4e:	6025      	str	r5, [r4, #0]
 8005e50:	bf18      	it	ne
 8005e52:	6059      	strne	r1, [r3, #4]
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	bf08      	it	eq
 8005e58:	f8c8 1000 	streq.w	r1, [r8]
 8005e5c:	5162      	str	r2, [r4, r5]
 8005e5e:	604b      	str	r3, [r1, #4]
 8005e60:	4638      	mov	r0, r7
 8005e62:	f104 060b 	add.w	r6, r4, #11
 8005e66:	f000 f829 	bl	8005ebc <__malloc_unlock>
 8005e6a:	f026 0607 	bic.w	r6, r6, #7
 8005e6e:	1d23      	adds	r3, r4, #4
 8005e70:	1af2      	subs	r2, r6, r3
 8005e72:	d0ae      	beq.n	8005dd2 <_malloc_r+0x22>
 8005e74:	1b9b      	subs	r3, r3, r6
 8005e76:	50a3      	str	r3, [r4, r2]
 8005e78:	e7ab      	b.n	8005dd2 <_malloc_r+0x22>
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	6862      	ldr	r2, [r4, #4]
 8005e7e:	d1dd      	bne.n	8005e3c <_malloc_r+0x8c>
 8005e80:	f8c8 2000 	str.w	r2, [r8]
 8005e84:	e7ec      	b.n	8005e60 <_malloc_r+0xb0>
 8005e86:	4623      	mov	r3, r4
 8005e88:	6864      	ldr	r4, [r4, #4]
 8005e8a:	e7ac      	b.n	8005de6 <_malloc_r+0x36>
 8005e8c:	4634      	mov	r4, r6
 8005e8e:	6876      	ldr	r6, [r6, #4]
 8005e90:	e7b4      	b.n	8005dfc <_malloc_r+0x4c>
 8005e92:	4613      	mov	r3, r2
 8005e94:	e7cc      	b.n	8005e30 <_malloc_r+0x80>
 8005e96:	230c      	movs	r3, #12
 8005e98:	4638      	mov	r0, r7
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	f000 f80e 	bl	8005ebc <__malloc_unlock>
 8005ea0:	e797      	b.n	8005dd2 <_malloc_r+0x22>
 8005ea2:	6025      	str	r5, [r4, #0]
 8005ea4:	e7dc      	b.n	8005e60 <_malloc_r+0xb0>
 8005ea6:	605b      	str	r3, [r3, #4]
 8005ea8:	deff      	udf	#255	; 0xff
 8005eaa:	bf00      	nop
 8005eac:	200003c8 	.word	0x200003c8

08005eb0 <__malloc_lock>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	; (8005eb8 <__malloc_lock+0x8>)
 8005eb2:	f7ff bf13 	b.w	8005cdc <__retarget_lock_acquire_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	200003c4 	.word	0x200003c4

08005ebc <__malloc_unlock>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	; (8005ec4 <__malloc_unlock+0x8>)
 8005ebe:	f7ff bf0e 	b.w	8005cde <__retarget_lock_release_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	200003c4 	.word	0x200003c4

08005ec8 <__ssputs_r>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	461f      	mov	r7, r3
 8005ece:	688e      	ldr	r6, [r1, #8]
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	42be      	cmp	r6, r7
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	d82c      	bhi.n	8005f36 <__ssputs_r+0x6e>
 8005edc:	898a      	ldrh	r2, [r1, #12]
 8005ede:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ee2:	d026      	beq.n	8005f32 <__ssputs_r+0x6a>
 8005ee4:	6965      	ldr	r5, [r4, #20]
 8005ee6:	6909      	ldr	r1, [r1, #16]
 8005ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eec:	eba3 0901 	sub.w	r9, r3, r1
 8005ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ef4:	1c7b      	adds	r3, r7, #1
 8005ef6:	444b      	add	r3, r9
 8005ef8:	106d      	asrs	r5, r5, #1
 8005efa:	429d      	cmp	r5, r3
 8005efc:	bf38      	it	cc
 8005efe:	461d      	movcc	r5, r3
 8005f00:	0553      	lsls	r3, r2, #21
 8005f02:	d527      	bpl.n	8005f54 <__ssputs_r+0x8c>
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7ff ff53 	bl	8005db0 <_malloc_r>
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	b360      	cbz	r0, 8005f68 <__ssputs_r+0xa0>
 8005f0e:	464a      	mov	r2, r9
 8005f10:	6921      	ldr	r1, [r4, #16]
 8005f12:	f000 fafd 	bl	8006510 <memcpy>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	81a3      	strh	r3, [r4, #12]
 8005f22:	6126      	str	r6, [r4, #16]
 8005f24:	444e      	add	r6, r9
 8005f26:	6026      	str	r6, [r4, #0]
 8005f28:	463e      	mov	r6, r7
 8005f2a:	6165      	str	r5, [r4, #20]
 8005f2c:	eba5 0509 	sub.w	r5, r5, r9
 8005f30:	60a5      	str	r5, [r4, #8]
 8005f32:	42be      	cmp	r6, r7
 8005f34:	d900      	bls.n	8005f38 <__ssputs_r+0x70>
 8005f36:	463e      	mov	r6, r7
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	f000 faaf 	bl	80064a0 <memmove>
 8005f42:	2000      	movs	r0, #0
 8005f44:	68a3      	ldr	r3, [r4, #8]
 8005f46:	1b9b      	subs	r3, r3, r6
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	4433      	add	r3, r6
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	462a      	mov	r2, r5
 8005f56:	f000 fae9 	bl	800652c <_realloc_r>
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d1e0      	bne.n	8005f22 <__ssputs_r+0x5a>
 8005f60:	4650      	mov	r0, sl
 8005f62:	6921      	ldr	r1, [r4, #16]
 8005f64:	f7ff febc 	bl	8005ce0 <_free_r>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	f8ca 3000 	str.w	r3, [sl]
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	e7e9      	b.n	8005f50 <__ssputs_r+0x88>

08005f7c <_svfiprintf_r>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	4698      	mov	r8, r3
 8005f82:	898b      	ldrh	r3, [r1, #12]
 8005f84:	4607      	mov	r7, r0
 8005f86:	061b      	lsls	r3, r3, #24
 8005f88:	460d      	mov	r5, r1
 8005f8a:	4614      	mov	r4, r2
 8005f8c:	b09d      	sub	sp, #116	; 0x74
 8005f8e:	d50e      	bpl.n	8005fae <_svfiprintf_r+0x32>
 8005f90:	690b      	ldr	r3, [r1, #16]
 8005f92:	b963      	cbnz	r3, 8005fae <_svfiprintf_r+0x32>
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	f7ff ff0b 	bl	8005db0 <_malloc_r>
 8005f9a:	6028      	str	r0, [r5, #0]
 8005f9c:	6128      	str	r0, [r5, #16]
 8005f9e:	b920      	cbnz	r0, 8005faa <_svfiprintf_r+0x2e>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	e0d0      	b.n	800614c <_svfiprintf_r+0x1d0>
 8005faa:	2340      	movs	r3, #64	; 0x40
 8005fac:	616b      	str	r3, [r5, #20]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb2:	2320      	movs	r3, #32
 8005fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb8:	2330      	movs	r3, #48	; 0x30
 8005fba:	f04f 0901 	mov.w	r9, #1
 8005fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fc2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006164 <_svfiprintf_r+0x1e8>
 8005fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fca:	4623      	mov	r3, r4
 8005fcc:	469a      	mov	sl, r3
 8005fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd2:	b10a      	cbz	r2, 8005fd8 <_svfiprintf_r+0x5c>
 8005fd4:	2a25      	cmp	r2, #37	; 0x25
 8005fd6:	d1f9      	bne.n	8005fcc <_svfiprintf_r+0x50>
 8005fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005fdc:	d00b      	beq.n	8005ff6 <_svfiprintf_r+0x7a>
 8005fde:	465b      	mov	r3, fp
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff ff6f 	bl	8005ec8 <__ssputs_r>
 8005fea:	3001      	adds	r0, #1
 8005fec:	f000 80a9 	beq.w	8006142 <_svfiprintf_r+0x1c6>
 8005ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff2:	445a      	add	r2, fp
 8005ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80a1 	beq.w	8006142 <_svfiprintf_r+0x1c6>
 8006000:	2300      	movs	r3, #0
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800600a:	f10a 0a01 	add.w	sl, sl, #1
 800600e:	9304      	str	r3, [sp, #16]
 8006010:	9307      	str	r3, [sp, #28]
 8006012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006016:	931a      	str	r3, [sp, #104]	; 0x68
 8006018:	4654      	mov	r4, sl
 800601a:	2205      	movs	r2, #5
 800601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006020:	4850      	ldr	r0, [pc, #320]	; (8006164 <_svfiprintf_r+0x1e8>)
 8006022:	f000 fa67 	bl	80064f4 <memchr>
 8006026:	9a04      	ldr	r2, [sp, #16]
 8006028:	b9d8      	cbnz	r0, 8006062 <_svfiprintf_r+0xe6>
 800602a:	06d0      	lsls	r0, r2, #27
 800602c:	bf44      	itt	mi
 800602e:	2320      	movmi	r3, #32
 8006030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006034:	0711      	lsls	r1, r2, #28
 8006036:	bf44      	itt	mi
 8006038:	232b      	movmi	r3, #43	; 0x2b
 800603a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800603e:	f89a 3000 	ldrb.w	r3, [sl]
 8006042:	2b2a      	cmp	r3, #42	; 0x2a
 8006044:	d015      	beq.n	8006072 <_svfiprintf_r+0xf6>
 8006046:	4654      	mov	r4, sl
 8006048:	2000      	movs	r0, #0
 800604a:	f04f 0c0a 	mov.w	ip, #10
 800604e:	9a07      	ldr	r2, [sp, #28]
 8006050:	4621      	mov	r1, r4
 8006052:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006056:	3b30      	subs	r3, #48	; 0x30
 8006058:	2b09      	cmp	r3, #9
 800605a:	d94d      	bls.n	80060f8 <_svfiprintf_r+0x17c>
 800605c:	b1b0      	cbz	r0, 800608c <_svfiprintf_r+0x110>
 800605e:	9207      	str	r2, [sp, #28]
 8006060:	e014      	b.n	800608c <_svfiprintf_r+0x110>
 8006062:	eba0 0308 	sub.w	r3, r0, r8
 8006066:	fa09 f303 	lsl.w	r3, r9, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	46a2      	mov	sl, r4
 800606e:	9304      	str	r3, [sp, #16]
 8006070:	e7d2      	b.n	8006018 <_svfiprintf_r+0x9c>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	1d19      	adds	r1, r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	9103      	str	r1, [sp, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfbb      	ittet	lt
 800607e:	425b      	neglt	r3, r3
 8006080:	f042 0202 	orrlt.w	r2, r2, #2
 8006084:	9307      	strge	r3, [sp, #28]
 8006086:	9307      	strlt	r3, [sp, #28]
 8006088:	bfb8      	it	lt
 800608a:	9204      	strlt	r2, [sp, #16]
 800608c:	7823      	ldrb	r3, [r4, #0]
 800608e:	2b2e      	cmp	r3, #46	; 0x2e
 8006090:	d10c      	bne.n	80060ac <_svfiprintf_r+0x130>
 8006092:	7863      	ldrb	r3, [r4, #1]
 8006094:	2b2a      	cmp	r3, #42	; 0x2a
 8006096:	d134      	bne.n	8006102 <_svfiprintf_r+0x186>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	3402      	adds	r4, #2
 800609c:	1d1a      	adds	r2, r3, #4
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	9203      	str	r2, [sp, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bfb8      	it	lt
 80060a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006168 <_svfiprintf_r+0x1ec>
 80060b0:	2203      	movs	r2, #3
 80060b2:	4650      	mov	r0, sl
 80060b4:	7821      	ldrb	r1, [r4, #0]
 80060b6:	f000 fa1d 	bl	80064f4 <memchr>
 80060ba:	b138      	cbz	r0, 80060cc <_svfiprintf_r+0x150>
 80060bc:	2240      	movs	r2, #64	; 0x40
 80060be:	9b04      	ldr	r3, [sp, #16]
 80060c0:	eba0 000a 	sub.w	r0, r0, sl
 80060c4:	4082      	lsls	r2, r0
 80060c6:	4313      	orrs	r3, r2
 80060c8:	3401      	adds	r4, #1
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	2206      	movs	r2, #6
 80060d2:	4826      	ldr	r0, [pc, #152]	; (800616c <_svfiprintf_r+0x1f0>)
 80060d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d8:	f000 fa0c 	bl	80064f4 <memchr>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d038      	beq.n	8006152 <_svfiprintf_r+0x1d6>
 80060e0:	4b23      	ldr	r3, [pc, #140]	; (8006170 <_svfiprintf_r+0x1f4>)
 80060e2:	bb1b      	cbnz	r3, 800612c <_svfiprintf_r+0x1b0>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	3308      	adds	r3, #8
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f2:	4433      	add	r3, r6
 80060f4:	9309      	str	r3, [sp, #36]	; 0x24
 80060f6:	e768      	b.n	8005fca <_svfiprintf_r+0x4e>
 80060f8:	460c      	mov	r4, r1
 80060fa:	2001      	movs	r0, #1
 80060fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006100:	e7a6      	b.n	8006050 <_svfiprintf_r+0xd4>
 8006102:	2300      	movs	r3, #0
 8006104:	f04f 0c0a 	mov.w	ip, #10
 8006108:	4619      	mov	r1, r3
 800610a:	3401      	adds	r4, #1
 800610c:	9305      	str	r3, [sp, #20]
 800610e:	4620      	mov	r0, r4
 8006110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006114:	3a30      	subs	r2, #48	; 0x30
 8006116:	2a09      	cmp	r2, #9
 8006118:	d903      	bls.n	8006122 <_svfiprintf_r+0x1a6>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0c6      	beq.n	80060ac <_svfiprintf_r+0x130>
 800611e:	9105      	str	r1, [sp, #20]
 8006120:	e7c4      	b.n	80060ac <_svfiprintf_r+0x130>
 8006122:	4604      	mov	r4, r0
 8006124:	2301      	movs	r3, #1
 8006126:	fb0c 2101 	mla	r1, ip, r1, r2
 800612a:	e7f0      	b.n	800610e <_svfiprintf_r+0x192>
 800612c:	ab03      	add	r3, sp, #12
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	462a      	mov	r2, r5
 8006132:	4638      	mov	r0, r7
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <_svfiprintf_r+0x1f8>)
 8006136:	a904      	add	r1, sp, #16
 8006138:	f3af 8000 	nop.w
 800613c:	1c42      	adds	r2, r0, #1
 800613e:	4606      	mov	r6, r0
 8006140:	d1d6      	bne.n	80060f0 <_svfiprintf_r+0x174>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	065b      	lsls	r3, r3, #25
 8006146:	f53f af2d 	bmi.w	8005fa4 <_svfiprintf_r+0x28>
 800614a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800614c:	b01d      	add	sp, #116	; 0x74
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	ab03      	add	r3, sp, #12
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	462a      	mov	r2, r5
 8006158:	4638      	mov	r0, r7
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <_svfiprintf_r+0x1f8>)
 800615c:	a904      	add	r1, sp, #16
 800615e:	f000 f87d 	bl	800625c <_printf_i>
 8006162:	e7eb      	b.n	800613c <_svfiprintf_r+0x1c0>
 8006164:	0800664a 	.word	0x0800664a
 8006168:	08006650 	.word	0x08006650
 800616c:	08006654 	.word	0x08006654
 8006170:	00000000 	.word	0x00000000
 8006174:	08005ec9 	.word	0x08005ec9

08006178 <_printf_common>:
 8006178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800617c:	4616      	mov	r6, r2
 800617e:	4699      	mov	r9, r3
 8006180:	688a      	ldr	r2, [r1, #8]
 8006182:	690b      	ldr	r3, [r1, #16]
 8006184:	4607      	mov	r7, r0
 8006186:	4293      	cmp	r3, r2
 8006188:	bfb8      	it	lt
 800618a:	4613      	movlt	r3, r2
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006192:	460c      	mov	r4, r1
 8006194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006198:	b10a      	cbz	r2, 800619e <_printf_common+0x26>
 800619a:	3301      	adds	r3, #1
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	0699      	lsls	r1, r3, #26
 80061a2:	bf42      	ittt	mi
 80061a4:	6833      	ldrmi	r3, [r6, #0]
 80061a6:	3302      	addmi	r3, #2
 80061a8:	6033      	strmi	r3, [r6, #0]
 80061aa:	6825      	ldr	r5, [r4, #0]
 80061ac:	f015 0506 	ands.w	r5, r5, #6
 80061b0:	d106      	bne.n	80061c0 <_printf_common+0x48>
 80061b2:	f104 0a19 	add.w	sl, r4, #25
 80061b6:	68e3      	ldr	r3, [r4, #12]
 80061b8:	6832      	ldr	r2, [r6, #0]
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	42ab      	cmp	r3, r5
 80061be:	dc2b      	bgt.n	8006218 <_printf_common+0xa0>
 80061c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061c4:	1e13      	subs	r3, r2, #0
 80061c6:	6822      	ldr	r2, [r4, #0]
 80061c8:	bf18      	it	ne
 80061ca:	2301      	movne	r3, #1
 80061cc:	0692      	lsls	r2, r2, #26
 80061ce:	d430      	bmi.n	8006232 <_printf_common+0xba>
 80061d0:	4649      	mov	r1, r9
 80061d2:	4638      	mov	r0, r7
 80061d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d023      	beq.n	8006226 <_printf_common+0xae>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	f003 0306 	and.w	r3, r3, #6
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	bf14      	ite	ne
 80061ea:	2500      	movne	r5, #0
 80061ec:	6833      	ldreq	r3, [r6, #0]
 80061ee:	f04f 0600 	mov.w	r6, #0
 80061f2:	bf08      	it	eq
 80061f4:	68e5      	ldreq	r5, [r4, #12]
 80061f6:	f104 041a 	add.w	r4, r4, #26
 80061fa:	bf08      	it	eq
 80061fc:	1aed      	subeq	r5, r5, r3
 80061fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006202:	bf08      	it	eq
 8006204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006208:	4293      	cmp	r3, r2
 800620a:	bfc4      	itt	gt
 800620c:	1a9b      	subgt	r3, r3, r2
 800620e:	18ed      	addgt	r5, r5, r3
 8006210:	42b5      	cmp	r5, r6
 8006212:	d11a      	bne.n	800624a <_printf_common+0xd2>
 8006214:	2000      	movs	r0, #0
 8006216:	e008      	b.n	800622a <_printf_common+0xb2>
 8006218:	2301      	movs	r3, #1
 800621a:	4652      	mov	r2, sl
 800621c:	4649      	mov	r1, r9
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d103      	bne.n	800622e <_printf_common+0xb6>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	3501      	adds	r5, #1
 8006230:	e7c1      	b.n	80061b6 <_printf_common+0x3e>
 8006232:	2030      	movs	r0, #48	; 0x30
 8006234:	18e1      	adds	r1, r4, r3
 8006236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006240:	4422      	add	r2, r4
 8006242:	3302      	adds	r3, #2
 8006244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006248:	e7c2      	b.n	80061d0 <_printf_common+0x58>
 800624a:	2301      	movs	r3, #1
 800624c:	4622      	mov	r2, r4
 800624e:	4649      	mov	r1, r9
 8006250:	4638      	mov	r0, r7
 8006252:	47c0      	blx	r8
 8006254:	3001      	adds	r0, #1
 8006256:	d0e6      	beq.n	8006226 <_printf_common+0xae>
 8006258:	3601      	adds	r6, #1
 800625a:	e7d9      	b.n	8006210 <_printf_common+0x98>

0800625c <_printf_i>:
 800625c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	7e0f      	ldrb	r7, [r1, #24]
 8006262:	4691      	mov	r9, r2
 8006264:	2f78      	cmp	r7, #120	; 0x78
 8006266:	4680      	mov	r8, r0
 8006268:	460c      	mov	r4, r1
 800626a:	469a      	mov	sl, r3
 800626c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800626e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006272:	d807      	bhi.n	8006284 <_printf_i+0x28>
 8006274:	2f62      	cmp	r7, #98	; 0x62
 8006276:	d80a      	bhi.n	800628e <_printf_i+0x32>
 8006278:	2f00      	cmp	r7, #0
 800627a:	f000 80d5 	beq.w	8006428 <_printf_i+0x1cc>
 800627e:	2f58      	cmp	r7, #88	; 0x58
 8006280:	f000 80c1 	beq.w	8006406 <_printf_i+0x1aa>
 8006284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800628c:	e03a      	b.n	8006304 <_printf_i+0xa8>
 800628e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006292:	2b15      	cmp	r3, #21
 8006294:	d8f6      	bhi.n	8006284 <_printf_i+0x28>
 8006296:	a101      	add	r1, pc, #4	; (adr r1, 800629c <_printf_i+0x40>)
 8006298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006285 	.word	0x08006285
 80062a8:	08006285 	.word	0x08006285
 80062ac:	08006285 	.word	0x08006285
 80062b0:	08006285 	.word	0x08006285
 80062b4:	08006309 	.word	0x08006309
 80062b8:	08006285 	.word	0x08006285
 80062bc:	08006285 	.word	0x08006285
 80062c0:	08006285 	.word	0x08006285
 80062c4:	08006285 	.word	0x08006285
 80062c8:	0800640f 	.word	0x0800640f
 80062cc:	08006335 	.word	0x08006335
 80062d0:	080063c9 	.word	0x080063c9
 80062d4:	08006285 	.word	0x08006285
 80062d8:	08006285 	.word	0x08006285
 80062dc:	08006431 	.word	0x08006431
 80062e0:	08006285 	.word	0x08006285
 80062e4:	08006335 	.word	0x08006335
 80062e8:	08006285 	.word	0x08006285
 80062ec:	08006285 	.word	0x08006285
 80062f0:	080063d1 	.word	0x080063d1
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	602a      	str	r2, [r5, #0]
 80062fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006304:	2301      	movs	r3, #1
 8006306:	e0a0      	b.n	800644a <_printf_i+0x1ee>
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	682b      	ldr	r3, [r5, #0]
 800630c:	0607      	lsls	r7, r0, #24
 800630e:	f103 0104 	add.w	r1, r3, #4
 8006312:	6029      	str	r1, [r5, #0]
 8006314:	d501      	bpl.n	800631a <_printf_i+0xbe>
 8006316:	681e      	ldr	r6, [r3, #0]
 8006318:	e003      	b.n	8006322 <_printf_i+0xc6>
 800631a:	0646      	lsls	r6, r0, #25
 800631c:	d5fb      	bpl.n	8006316 <_printf_i+0xba>
 800631e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006322:	2e00      	cmp	r6, #0
 8006324:	da03      	bge.n	800632e <_printf_i+0xd2>
 8006326:	232d      	movs	r3, #45	; 0x2d
 8006328:	4276      	negs	r6, r6
 800632a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800632e:	230a      	movs	r3, #10
 8006330:	4859      	ldr	r0, [pc, #356]	; (8006498 <_printf_i+0x23c>)
 8006332:	e012      	b.n	800635a <_printf_i+0xfe>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	1d19      	adds	r1, r3, #4
 800633a:	6029      	str	r1, [r5, #0]
 800633c:	0605      	lsls	r5, r0, #24
 800633e:	d501      	bpl.n	8006344 <_printf_i+0xe8>
 8006340:	681e      	ldr	r6, [r3, #0]
 8006342:	e002      	b.n	800634a <_printf_i+0xee>
 8006344:	0641      	lsls	r1, r0, #25
 8006346:	d5fb      	bpl.n	8006340 <_printf_i+0xe4>
 8006348:	881e      	ldrh	r6, [r3, #0]
 800634a:	2f6f      	cmp	r7, #111	; 0x6f
 800634c:	bf0c      	ite	eq
 800634e:	2308      	moveq	r3, #8
 8006350:	230a      	movne	r3, #10
 8006352:	4851      	ldr	r0, [pc, #324]	; (8006498 <_printf_i+0x23c>)
 8006354:	2100      	movs	r1, #0
 8006356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800635a:	6865      	ldr	r5, [r4, #4]
 800635c:	2d00      	cmp	r5, #0
 800635e:	bfa8      	it	ge
 8006360:	6821      	ldrge	r1, [r4, #0]
 8006362:	60a5      	str	r5, [r4, #8]
 8006364:	bfa4      	itt	ge
 8006366:	f021 0104 	bicge.w	r1, r1, #4
 800636a:	6021      	strge	r1, [r4, #0]
 800636c:	b90e      	cbnz	r6, 8006372 <_printf_i+0x116>
 800636e:	2d00      	cmp	r5, #0
 8006370:	d04b      	beq.n	800640a <_printf_i+0x1ae>
 8006372:	4615      	mov	r5, r2
 8006374:	fbb6 f1f3 	udiv	r1, r6, r3
 8006378:	fb03 6711 	mls	r7, r3, r1, r6
 800637c:	5dc7      	ldrb	r7, [r0, r7]
 800637e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006382:	4637      	mov	r7, r6
 8006384:	42bb      	cmp	r3, r7
 8006386:	460e      	mov	r6, r1
 8006388:	d9f4      	bls.n	8006374 <_printf_i+0x118>
 800638a:	2b08      	cmp	r3, #8
 800638c:	d10b      	bne.n	80063a6 <_printf_i+0x14a>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	07de      	lsls	r6, r3, #31
 8006392:	d508      	bpl.n	80063a6 <_printf_i+0x14a>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6861      	ldr	r1, [r4, #4]
 8006398:	4299      	cmp	r1, r3
 800639a:	bfde      	ittt	le
 800639c:	2330      	movle	r3, #48	; 0x30
 800639e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063a6:	1b52      	subs	r2, r2, r5
 80063a8:	6122      	str	r2, [r4, #16]
 80063aa:	464b      	mov	r3, r9
 80063ac:	4621      	mov	r1, r4
 80063ae:	4640      	mov	r0, r8
 80063b0:	f8cd a000 	str.w	sl, [sp]
 80063b4:	aa03      	add	r2, sp, #12
 80063b6:	f7ff fedf 	bl	8006178 <_printf_common>
 80063ba:	3001      	adds	r0, #1
 80063bc:	d14a      	bne.n	8006454 <_printf_i+0x1f8>
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	b004      	add	sp, #16
 80063c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f043 0320 	orr.w	r3, r3, #32
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	2778      	movs	r7, #120	; 0x78
 80063d2:	4832      	ldr	r0, [pc, #200]	; (800649c <_printf_i+0x240>)
 80063d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	6829      	ldr	r1, [r5, #0]
 80063dc:	061f      	lsls	r7, r3, #24
 80063de:	f851 6b04 	ldr.w	r6, [r1], #4
 80063e2:	d402      	bmi.n	80063ea <_printf_i+0x18e>
 80063e4:	065f      	lsls	r7, r3, #25
 80063e6:	bf48      	it	mi
 80063e8:	b2b6      	uxthmi	r6, r6
 80063ea:	07df      	lsls	r7, r3, #31
 80063ec:	bf48      	it	mi
 80063ee:	f043 0320 	orrmi.w	r3, r3, #32
 80063f2:	6029      	str	r1, [r5, #0]
 80063f4:	bf48      	it	mi
 80063f6:	6023      	strmi	r3, [r4, #0]
 80063f8:	b91e      	cbnz	r6, 8006402 <_printf_i+0x1a6>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f023 0320 	bic.w	r3, r3, #32
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	2310      	movs	r3, #16
 8006404:	e7a6      	b.n	8006354 <_printf_i+0xf8>
 8006406:	4824      	ldr	r0, [pc, #144]	; (8006498 <_printf_i+0x23c>)
 8006408:	e7e4      	b.n	80063d4 <_printf_i+0x178>
 800640a:	4615      	mov	r5, r2
 800640c:	e7bd      	b.n	800638a <_printf_i+0x12e>
 800640e:	682b      	ldr	r3, [r5, #0]
 8006410:	6826      	ldr	r6, [r4, #0]
 8006412:	1d18      	adds	r0, r3, #4
 8006414:	6961      	ldr	r1, [r4, #20]
 8006416:	6028      	str	r0, [r5, #0]
 8006418:	0635      	lsls	r5, r6, #24
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	d501      	bpl.n	8006422 <_printf_i+0x1c6>
 800641e:	6019      	str	r1, [r3, #0]
 8006420:	e002      	b.n	8006428 <_printf_i+0x1cc>
 8006422:	0670      	lsls	r0, r6, #25
 8006424:	d5fb      	bpl.n	800641e <_printf_i+0x1c2>
 8006426:	8019      	strh	r1, [r3, #0]
 8006428:	2300      	movs	r3, #0
 800642a:	4615      	mov	r5, r2
 800642c:	6123      	str	r3, [r4, #16]
 800642e:	e7bc      	b.n	80063aa <_printf_i+0x14e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	2100      	movs	r1, #0
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	602a      	str	r2, [r5, #0]
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	6862      	ldr	r2, [r4, #4]
 800643c:	4628      	mov	r0, r5
 800643e:	f000 f859 	bl	80064f4 <memchr>
 8006442:	b108      	cbz	r0, 8006448 <_printf_i+0x1ec>
 8006444:	1b40      	subs	r0, r0, r5
 8006446:	6060      	str	r0, [r4, #4]
 8006448:	6863      	ldr	r3, [r4, #4]
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	2300      	movs	r3, #0
 800644e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006452:	e7aa      	b.n	80063aa <_printf_i+0x14e>
 8006454:	462a      	mov	r2, r5
 8006456:	4649      	mov	r1, r9
 8006458:	4640      	mov	r0, r8
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	47d0      	blx	sl
 800645e:	3001      	adds	r0, #1
 8006460:	d0ad      	beq.n	80063be <_printf_i+0x162>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	079b      	lsls	r3, r3, #30
 8006466:	d413      	bmi.n	8006490 <_printf_i+0x234>
 8006468:	68e0      	ldr	r0, [r4, #12]
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	4298      	cmp	r0, r3
 800646e:	bfb8      	it	lt
 8006470:	4618      	movlt	r0, r3
 8006472:	e7a6      	b.n	80063c2 <_printf_i+0x166>
 8006474:	2301      	movs	r3, #1
 8006476:	4632      	mov	r2, r6
 8006478:	4649      	mov	r1, r9
 800647a:	4640      	mov	r0, r8
 800647c:	47d0      	blx	sl
 800647e:	3001      	adds	r0, #1
 8006480:	d09d      	beq.n	80063be <_printf_i+0x162>
 8006482:	3501      	adds	r5, #1
 8006484:	68e3      	ldr	r3, [r4, #12]
 8006486:	9903      	ldr	r1, [sp, #12]
 8006488:	1a5b      	subs	r3, r3, r1
 800648a:	42ab      	cmp	r3, r5
 800648c:	dcf2      	bgt.n	8006474 <_printf_i+0x218>
 800648e:	e7eb      	b.n	8006468 <_printf_i+0x20c>
 8006490:	2500      	movs	r5, #0
 8006492:	f104 0619 	add.w	r6, r4, #25
 8006496:	e7f5      	b.n	8006484 <_printf_i+0x228>
 8006498:	0800665b 	.word	0x0800665b
 800649c:	0800666c 	.word	0x0800666c

080064a0 <memmove>:
 80064a0:	4288      	cmp	r0, r1
 80064a2:	b510      	push	{r4, lr}
 80064a4:	eb01 0402 	add.w	r4, r1, r2
 80064a8:	d902      	bls.n	80064b0 <memmove+0x10>
 80064aa:	4284      	cmp	r4, r0
 80064ac:	4623      	mov	r3, r4
 80064ae:	d807      	bhi.n	80064c0 <memmove+0x20>
 80064b0:	1e43      	subs	r3, r0, #1
 80064b2:	42a1      	cmp	r1, r4
 80064b4:	d008      	beq.n	80064c8 <memmove+0x28>
 80064b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064be:	e7f8      	b.n	80064b2 <memmove+0x12>
 80064c0:	4601      	mov	r1, r0
 80064c2:	4402      	add	r2, r0
 80064c4:	428a      	cmp	r2, r1
 80064c6:	d100      	bne.n	80064ca <memmove+0x2a>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064d2:	e7f7      	b.n	80064c4 <memmove+0x24>

080064d4 <_sbrk_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	2300      	movs	r3, #0
 80064d8:	4d05      	ldr	r5, [pc, #20]	; (80064f0 <_sbrk_r+0x1c>)
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	f7fa ffd2 	bl	8001488 <_sbrk>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_sbrk_r+0x1a>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_sbrk_r+0x1a>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	200003c0 	.word	0x200003c0

080064f4 <memchr>:
 80064f4:	4603      	mov	r3, r0
 80064f6:	b510      	push	{r4, lr}
 80064f8:	b2c9      	uxtb	r1, r1
 80064fa:	4402      	add	r2, r0
 80064fc:	4293      	cmp	r3, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	d101      	bne.n	8006506 <memchr+0x12>
 8006502:	2000      	movs	r0, #0
 8006504:	e003      	b.n	800650e <memchr+0x1a>
 8006506:	7804      	ldrb	r4, [r0, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	428c      	cmp	r4, r1
 800650c:	d1f6      	bne.n	80064fc <memchr+0x8>
 800650e:	bd10      	pop	{r4, pc}

08006510 <memcpy>:
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	f100 33ff 	add.w	r3, r0, #4294967295
 8006518:	d100      	bne.n	800651c <memcpy+0xc>
 800651a:	4770      	bx	lr
 800651c:	b510      	push	{r4, lr}
 800651e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006522:	4291      	cmp	r1, r2
 8006524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006528:	d1f9      	bne.n	800651e <memcpy+0xe>
 800652a:	bd10      	pop	{r4, pc}

0800652c <_realloc_r>:
 800652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	4680      	mov	r8, r0
 8006532:	4614      	mov	r4, r2
 8006534:	460e      	mov	r6, r1
 8006536:	b921      	cbnz	r1, 8006542 <_realloc_r+0x16>
 8006538:	4611      	mov	r1, r2
 800653a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	f7ff bc37 	b.w	8005db0 <_malloc_r>
 8006542:	b92a      	cbnz	r2, 8006550 <_realloc_r+0x24>
 8006544:	f7ff fbcc 	bl	8005ce0 <_free_r>
 8006548:	4625      	mov	r5, r4
 800654a:	4628      	mov	r0, r5
 800654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006550:	f000 f81b 	bl	800658a <_malloc_usable_size_r>
 8006554:	4284      	cmp	r4, r0
 8006556:	4607      	mov	r7, r0
 8006558:	d802      	bhi.n	8006560 <_realloc_r+0x34>
 800655a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800655e:	d812      	bhi.n	8006586 <_realloc_r+0x5a>
 8006560:	4621      	mov	r1, r4
 8006562:	4640      	mov	r0, r8
 8006564:	f7ff fc24 	bl	8005db0 <_malloc_r>
 8006568:	4605      	mov	r5, r0
 800656a:	2800      	cmp	r0, #0
 800656c:	d0ed      	beq.n	800654a <_realloc_r+0x1e>
 800656e:	42bc      	cmp	r4, r7
 8006570:	4622      	mov	r2, r4
 8006572:	4631      	mov	r1, r6
 8006574:	bf28      	it	cs
 8006576:	463a      	movcs	r2, r7
 8006578:	f7ff ffca 	bl	8006510 <memcpy>
 800657c:	4631      	mov	r1, r6
 800657e:	4640      	mov	r0, r8
 8006580:	f7ff fbae 	bl	8005ce0 <_free_r>
 8006584:	e7e1      	b.n	800654a <_realloc_r+0x1e>
 8006586:	4635      	mov	r5, r6
 8006588:	e7df      	b.n	800654a <_realloc_r+0x1e>

0800658a <_malloc_usable_size_r>:
 800658a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658e:	1f18      	subs	r0, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	bfbc      	itt	lt
 8006594:	580b      	ldrlt	r3, [r1, r0]
 8006596:	18c0      	addlt	r0, r0, r3
 8006598:	4770      	bx	lr
	...

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
