
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a774  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800a888  0800a888  0001a888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad78  0800ad78  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad78  0800ad78  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad78  0800ad78  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad7c  0800ad7c  0001ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ad80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001e0  0800af5c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800af5c  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013874  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc2  00000000  00000000  00033abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00036780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9b  00000000  00000000  00037b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5a8  00000000  00000000  00038b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a48  00000000  00000000  000530b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092c53  00000000  00000000  0006aafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a1c  00000000  00000000  000fd750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0010416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a86c 	.word	0x0800a86c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a86c 	.word	0x0800a86c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2iz>:
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30f      	bcc.n	8001002 <__aeabi_f2iz+0x2a>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d90d      	bls.n	8001008 <__aeabi_f2iz+0x30>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	bf18      	it	ne
 8000ffe:	4240      	negne	r0, r0
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2iz+0x3a>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d105      	bne.n	800101e <__aeabi_f2iz+0x46>
 8001012:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001016:	bf08      	it	eq
 8001018:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4605      	mov	r5, r0
 8001068:	460c      	mov	r4, r1
 800106a:	2200      	movs	r2, #0
 800106c:	2300      	movs	r3, #0
 800106e:	4628      	mov	r0, r5
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fd57 	bl	8000b24 <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff facd 	bl	8000640 <__aeabi_dmul>
 80010a6:	f7ff fda3 	bl	8000bf0 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff fa4e 	bl	800054c <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fac4 	bl	8000640 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f906 	bl	80002d0 <__aeabi_dsub>
 80010c4:	f7ff fd94 	bl	8000bf0 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000
 80010d4:	00000000 	.word	0x00000000

080010d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010dc:	b098      	sub	sp, #96	; 0x60
 80010de:	af06      	add	r7, sp, #24
 80010e0:	4603      	mov	r3, r0
 80010e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	if (GPIO_Pin == GPIO_PIN_2 && (HAL_GetTick() - sw_timestap) > 1000) {
 80010e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d16d      	bne.n	80011ca <HAL_GPIO_EXTI_Callback+0xf2>
 80010ee:	f000 ffd3 	bl	8002098 <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2200      	movs	r2, #0
 80010f6:	4698      	mov	r8, r3
 80010f8:	4691      	mov	r9, r2
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_GPIO_EXTI_Callback+0xb0>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	ebb8 0402 	subs.w	r4, r8, r2
 8001104:	eb69 0503 	sbc.w	r5, r9, r3
 8001108:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800110c:	429c      	cmp	r4, r3
 800110e:	f175 0300 	sbcs.w	r3, r5, #0
 8001112:	d35a      	bcc.n	80011ca <HAL_GPIO_EXTI_Callback+0xf2>
		if (status == 0) {
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d11e      	bne.n	800115a <HAL_GPIO_EXTI_Callback+0x82>
			status = 1;
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_GPIO_EXTI_Callback+0xb4>)
 800111e:	2301      	movs	r3, #1
 8001120:	7013      	strb	r3, [r2, #0]
			//clsmoniter = 1;
			initTime();
 8001122:	f004 fe7f 	bl	8005e24 <initTime>
			PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa0e 	bl	800054c <__aeabi_ui2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001138:	a30f      	add	r3, pc, #60	; (adr r3, 8001178 <HAL_GPIO_EXTI_Callback+0xa0>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001142:	a30f      	add	r3, pc, #60	; (adr r3, 8001180 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	e9cd 2300 	strd	r2, r3, [sp]
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001154:	f004 ff44 	bl	8005fe0 <PID_Init>
 8001158:	e02c      	b.n	80011b4 <HAL_GPIO_EXTI_Callback+0xdc>
		} else if (status == 1) {
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_GPIO_EXTI_Callback+0xb4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d11e      	bne.n	80011a0 <HAL_GPIO_EXTI_Callback+0xc8>
			initTime();
 8001162:	f004 fe5f 	bl	8005e24 <initTime>
			status = 2;
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001168:	2302      	movs	r3, #2
 800116a:	7013      	strb	r3, [r2, #0]
			clsmoniter = 1;
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_GPIO_EXTI_Callback+0xc4>)
 800116e:	2301      	movs	r3, #1
 8001170:	7013      	strb	r3, [r2, #0]
 8001172:	e01f      	b.n	80011b4 <HAL_GPIO_EXTI_Callback+0xdc>
 8001174:	f3af 8000 	nop.w
 8001178:	47ae147b 	.word	0x47ae147b
 800117c:	3f847ae1 	.word	0x3f847ae1
 8001180:	9999999a 	.word	0x9999999a
 8001184:	3fb99999 	.word	0x3fb99999
 8001188:	20000398 	.word	0x20000398
 800118c:	200003a0 	.word	0x200003a0
 8001190:	20000000 	.word	0x20000000
 8001194:	3ff00000 	.word	0x3ff00000
 8001198:	20000358 	.word	0x20000358
 800119c:	200003a1 	.word	0x200003a1
		} else if (status == 2) {
 80011a0:	4b9f      	ldr	r3, [pc, #636]	; (8001420 <HAL_GPIO_EXTI_Callback+0x348>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d105      	bne.n	80011b4 <HAL_GPIO_EXTI_Callback+0xdc>
			status = 0;
 80011a8:	4a9d      	ldr	r2, [pc, #628]	; (8001420 <HAL_GPIO_EXTI_Callback+0x348>)
 80011aa:	2300      	movs	r3, #0
 80011ac:	7013      	strb	r3, [r2, #0]
			clsmoniter = 1;
 80011ae:	4a9d      	ldr	r2, [pc, #628]	; (8001424 <HAL_GPIO_EXTI_Callback+0x34c>)
 80011b0:	2301      	movs	r3, #1
 80011b2:	7013      	strb	r3, [r2, #0]
		}
		sw_timestap = HAL_GetTick();
 80011b4:	f000 ff70 	bl	8002098 <HAL_GetTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2200      	movs	r2, #0
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80011c0:	4b99      	ldr	r3, [pc, #612]	; (8001428 <HAL_GPIO_EXTI_Callback+0x350>)
 80011c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80011c6:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (status == 0 || status == 1) {
 80011ca:	4b95      	ldr	r3, [pc, #596]	; (8001420 <HAL_GPIO_EXTI_Callback+0x348>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <HAL_GPIO_EXTI_Callback+0x104>
 80011d2:	4b93      	ldr	r3, [pc, #588]	; (8001420 <HAL_GPIO_EXTI_Callback+0x348>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	f040 809c 	bne.w	8001314 <HAL_GPIO_EXTI_Callback+0x23c>

		if ((HAL_GetTick() - timestap) > 100)
 80011dc:	f000 ff5c 	bl	8002098 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2200      	movs	r2, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
 80011e6:	637a      	str	r2, [r7, #52]	; 0x34
 80011e8:	4b90      	ldr	r3, [pc, #576]	; (800142c <HAL_GPIO_EXTI_Callback+0x354>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011f2:	4604      	mov	r4, r0
 80011f4:	ebb4 0a02 	subs.w	sl, r4, r2
 80011f8:	eb61 0b03 	sbc.w	fp, r1, r3
 80011fc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001200:	f17b 0300 	sbcs.w	r3, fp, #0
 8001204:	d302      	bcc.n	800120c <HAL_GPIO_EXTI_Callback+0x134>
			dir = 0;
 8001206:	4a8a      	ldr	r2, [pc, #552]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001208:	2300      	movs	r3, #0
 800120a:	7013      	strb	r3, [r2, #0]
		if (GPIO_Pin == GPIO_PIN_1 && dir == 0
 800120c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001210:	2b02      	cmp	r3, #2
 8001212:	d103      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x144>
 8001214:	4b86      	ldr	r3, [pc, #536]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <HAL_GPIO_EXTI_Callback+0x154>
				|| GPIO_Pin == GPIO_PIN_1 && dir == 1) {
 800121c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001220:	2b02      	cmp	r3, #2
 8001222:	d133      	bne.n	800128c <HAL_GPIO_EXTI_Callback+0x1b4>
 8001224:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d12f      	bne.n	800128c <HAL_GPIO_EXTI_Callback+0x1b4>
			encoderCount++;
 800122c:	4b81      	ldr	r3, [pc, #516]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a80      	ldr	r2, [pc, #512]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 8001234:	6013      	str	r3, [r2, #0]
			PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 8001236:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f986 	bl	800054c <__aeabi_ui2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001248:	a371      	add	r3, pc, #452	; (adr r3, 8001410 <HAL_GPIO_EXTI_Callback+0x338>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001252:	a371      	add	r3, pc, #452	; (adr r3, 8001418 <HAL_GPIO_EXTI_Callback+0x340>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	e9cd 2300 	strd	r2, r3, [sp]
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b75      	ldr	r3, [pc, #468]	; (8001438 <HAL_GPIO_EXTI_Callback+0x360>)
 8001262:	4876      	ldr	r0, [pc, #472]	; (800143c <HAL_GPIO_EXTI_Callback+0x364>)
 8001264:	f004 febc 	bl	8005fe0 <PID_Init>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001268:	2140      	movs	r1, #64	; 0x40
 800126a:	4875      	ldr	r0, [pc, #468]	; (8001440 <HAL_GPIO_EXTI_Callback+0x368>)
 800126c:	f001 f9ec 	bl	8002648 <HAL_GPIO_TogglePin>
			dir = 1;
 8001270:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001272:	2301      	movs	r3, #1
 8001274:	7013      	strb	r3, [r2, #0]
			timestap = HAL_GetTick();
 8001276:	f000 ff0f 	bl	8002098 <HAL_GetTick>
 800127a:	4603      	mov	r3, r0
 800127c:	2200      	movs	r2, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001282:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_GPIO_EXTI_Callback+0x354>)
 8001284:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001288:	e9c3 1200 	strd	r1, r2, [r3]
		}
		if (GPIO_Pin == GPIO_PIN_0 && dir == 0
 800128c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001290:	2b01      	cmp	r3, #1
 8001292:	d103      	bne.n	800129c <HAL_GPIO_EXTI_Callback+0x1c4>
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_EXTI_Callback+0x1d4>
				|| GPIO_Pin == GPIO_PIN_0 && dir == 2) {
 800129c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d137      	bne.n	8001314 <HAL_GPIO_EXTI_Callback+0x23c>
 80012a4:	4b62      	ldr	r3, [pc, #392]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d133      	bne.n	8001314 <HAL_GPIO_EXTI_Callback+0x23c>
			if (encoderCount > 0) {
 80012ac:	4b61      	ldr	r3, [pc, #388]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01d      	beq.n	80012f0 <HAL_GPIO_EXTI_Callback+0x218>
				encoderCount--;
 80012b4:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4a5e      	ldr	r2, [pc, #376]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 80012bc:	6013      	str	r3, [r2, #0]
				PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_GPIO_EXTI_Callback+0x35c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f942 	bl	800054c <__aeabi_ui2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012d0:	a34f      	add	r3, pc, #316	; (adr r3, 8001410 <HAL_GPIO_EXTI_Callback+0x338>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012da:	a34f      	add	r3, pc, #316	; (adr r3, 8001418 <HAL_GPIO_EXTI_Callback+0x340>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	e9cd 2300 	strd	r2, r3, [sp]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_GPIO_EXTI_Callback+0x360>)
 80012ea:	4854      	ldr	r0, [pc, #336]	; (800143c <HAL_GPIO_EXTI_Callback+0x364>)
 80012ec:	f004 fe78 	bl	8005fe0 <PID_Init>
			}
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012f0:	2120      	movs	r1, #32
 80012f2:	4853      	ldr	r0, [pc, #332]	; (8001440 <HAL_GPIO_EXTI_Callback+0x368>)
 80012f4:	f001 f9a8 	bl	8002648 <HAL_GPIO_TogglePin>
			dir = 2;
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	701a      	strb	r2, [r3, #0]
			timestap = HAL_GetTick();
 80012fe:	f000 fecb 	bl	8002098 <HAL_GetTick>
 8001302:	4603      	mov	r3, r0
 8001304:	2200      	movs	r2, #0
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	627a      	str	r2, [r7, #36]	; 0x24
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <HAL_GPIO_EXTI_Callback+0x354>)
 800130c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001310:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	if (status == 2) {
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <HAL_GPIO_EXTI_Callback+0x348>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	f040 809e 	bne.w	800145a <HAL_GPIO_EXTI_Callback+0x382>

		if ((HAL_GetTick() - timestap) > 100)
 800131e:	f000 febb 	bl	8002098 <HAL_GetTick>
 8001322:	4603      	mov	r3, r0
 8001324:	2200      	movs	r2, #0
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	61fa      	str	r2, [r7, #28]
 800132a:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_GPIO_EXTI_Callback+0x354>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001334:	4604      	mov	r4, r0
 8001336:	1aa4      	subs	r4, r4, r2
 8001338:	613c      	str	r4, [r7, #16]
 800133a:	eb61 0303 	sbc.w	r3, r1, r3
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001344:	460b      	mov	r3, r1
 8001346:	2b65      	cmp	r3, #101	; 0x65
 8001348:	4613      	mov	r3, r2
 800134a:	f173 0300 	sbcs.w	r3, r3, #0
 800134e:	d302      	bcc.n	8001356 <HAL_GPIO_EXTI_Callback+0x27e>
			dir = 0;
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == GPIO_PIN_1 && dir == 0
 8001356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800135a:	2b02      	cmp	r3, #2
 800135c:	d103      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x28e>
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_EXTI_Callback+0x29e>
				|| GPIO_Pin == GPIO_PIN_1 && dir == 1) {
 8001366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800136a:	2b02      	cmp	r3, #2
 800136c:	d11f      	bne.n	80013ae <HAL_GPIO_EXTI_Callback+0x2d6>
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d11b      	bne.n	80013ae <HAL_GPIO_EXTI_Callback+0x2d6>
			powerpoint = powerpoint + 0.05f;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_GPIO_EXTI_Callback+0x36c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4933      	ldr	r1, [pc, #204]	; (8001448 <HAL_GPIO_EXTI_Callback+0x370>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fcad 	bl	8000cdc <__addsf3>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_GPIO_EXTI_Callback+0x36c>)
 8001388:	601a      	str	r2, [r3, #0]
			//PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800138a:	2140      	movs	r1, #64	; 0x40
 800138c:	482c      	ldr	r0, [pc, #176]	; (8001440 <HAL_GPIO_EXTI_Callback+0x368>)
 800138e:	f001 f95b 	bl	8002648 <HAL_GPIO_TogglePin>
			dir = 1;
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
			timestap = HAL_GetTick();
 8001398:	f000 fe7e 	bl	8002098 <HAL_GetTick>
 800139c:	4603      	mov	r3, r0
 800139e:	2200      	movs	r2, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	60fa      	str	r2, [r7, #12]
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_GPIO_EXTI_Callback+0x354>)
 80013a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80013aa:	e9c3 1200 	strd	r1, r2, [r3]
		}
		if (GPIO_Pin == GPIO_PIN_0 && dir == 0
 80013ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d103      	bne.n	80013be <HAL_GPIO_EXTI_Callback+0x2e6>
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_EXTI_Callback+0x2f6>
				|| GPIO_Pin == GPIO_PIN_0 && dir == 2) {
 80013be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d149      	bne.n	800145a <HAL_GPIO_EXTI_Callback+0x382>
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d145      	bne.n	800145a <HAL_GPIO_EXTI_Callback+0x382>
			if (powerpoint > 0.9f) {
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_GPIO_EXTI_Callback+0x36c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	491e      	ldr	r1, [pc, #120]	; (800144c <HAL_GPIO_EXTI_Callback+0x374>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fdf5 	bl	8000fc4 <__aeabi_fcmpgt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <HAL_GPIO_EXTI_Callback+0x31c>
				powerpoint = powerpoint - 0.05f;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_GPIO_EXTI_Callback+0x36c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4918      	ldr	r1, [pc, #96]	; (8001448 <HAL_GPIO_EXTI_Callback+0x370>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc76 	bl	8000cd8 <__aeabi_fsub>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_GPIO_EXTI_Callback+0x36c>)
 80013f2:	601a      	str	r2, [r3, #0]
				//PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
			}
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013f4:	2120      	movs	r1, #32
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <HAL_GPIO_EXTI_Callback+0x368>)
 80013f8:	f001 f926 	bl	8002648 <HAL_GPIO_TogglePin>
			dir = 2;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_GPIO_EXTI_Callback+0x358>)
 80013fe:	2202      	movs	r2, #2
 8001400:	701a      	strb	r2, [r3, #0]
			timestap = HAL_GetTick();
 8001402:	f000 fe49 	bl	8002098 <HAL_GetTick>
 8001406:	4603      	mov	r3, r0
 8001408:	2200      	movs	r2, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	e01f      	b.n	8001450 <HAL_GPIO_EXTI_Callback+0x378>
 8001410:	47ae147b 	.word	0x47ae147b
 8001414:	3f847ae1 	.word	0x3f847ae1
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3fb99999 	.word	0x3fb99999
 8001420:	200003a0 	.word	0x200003a0
 8001424:	200003a1 	.word	0x200003a1
 8001428:	20000398 	.word	0x20000398
 800142c:	20000390 	.word	0x20000390
 8001430:	2000038c 	.word	0x2000038c
 8001434:	20000000 	.word	0x20000000
 8001438:	3ff00000 	.word	0x3ff00000
 800143c:	20000358 	.word	0x20000358
 8001440:	40010800 	.word	0x40010800
 8001444:	20000004 	.word	0x20000004
 8001448:	3d4ccccd 	.word	0x3d4ccccd
 800144c:	3f666666 	.word	0x3f666666
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_GPIO_EXTI_Callback+0x38c>)
 8001452:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001456:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
}
 800145a:	bf00      	nop
 800145c:	3748      	adds	r7, #72	; 0x48
 800145e:	46bd      	mov	sp, r7
 8001460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001464:	20000390 	.word	0x20000390

08001468 <pwm_output>:

int pwmtime;
void pwm_output(int pwm) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	if (pwm <= 0) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	dc0d      	bgt.n	8001492 <pwm_output+0x2a>
		HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 1);
 8001476:	2201      	movs	r2, #1
 8001478:	2102      	movs	r1, #2
 800147a:	4829      	ldr	r0, [pc, #164]	; (8001520 <pwm_output+0xb8>)
 800147c:	f001 f8cc 	bl	8002618 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	4826      	ldr	r0, [pc, #152]	; (8001520 <pwm_output+0xb8>)
 8001486:	f001 f8c7 	bl	8002618 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800148a:	20fa      	movs	r0, #250	; 0xfa
 800148c:	f000 fe0e 	bl	80020ac <HAL_Delay>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
			HAL_Delay(pwmtime);
		}
	}

}
 8001490:	e042      	b.n	8001518 <pwm_output+0xb0>
	} else if (pwm >= 100) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b63      	cmp	r3, #99	; 0x63
 8001496:	dd0d      	ble.n	80014b4 <pwm_output+0x4c>
		HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2102      	movs	r1, #2
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <pwm_output+0xb8>)
 800149e:	f001 f8bb 	bl	8002618 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	481e      	ldr	r0, [pc, #120]	; (8001520 <pwm_output+0xb8>)
 80014a8:	f001 f8b6 	bl	8002618 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80014ac:	20fa      	movs	r0, #250	; 0xfa
 80014ae:	f000 fdfd 	bl	80020ac <HAL_Delay>
}
 80014b2:	e031      	b.n	8001518 <pwm_output+0xb0>
		pwmtime = 100 - pwm;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80014ba:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <pwm_output+0xbc>)
 80014bc:	6013      	str	r3, [r2, #0]
		if (pwmtime == 0) {
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <pwm_output+0xbc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <pwm_output+0x64>
			pwmtime = 1;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <pwm_output+0xbc>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 3; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e01f      	b.n	8001512 <pwm_output+0xaa>
			HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	4812      	ldr	r0, [pc, #72]	; (8001520 <pwm_output+0xb8>)
 80014d8:	f001 f89e 	bl	8002618 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <pwm_output+0xb8>)
 80014e2:	f001 f899 	bl	8002618 <HAL_GPIO_WritePin>
			HAL_Delay(pwm);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fddf 	bl	80020ac <HAL_Delay>
			HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2102      	movs	r1, #2
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <pwm_output+0xb8>)
 80014f4:	f001 f890 	bl	8002618 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <pwm_output+0xb8>)
 80014fe:	f001 f88b 	bl	8002618 <HAL_GPIO_WritePin>
			HAL_Delay(pwmtime);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <pwm_output+0xbc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fdd0 	bl	80020ac <HAL_Delay>
		for (int i = 0; i < 3; i++) {
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b02      	cmp	r3, #2
 8001516:	dddc      	ble.n	80014d2 <pwm_output+0x6a>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40010800 	.word	0x40010800
 8001524:	200003b0 	.word	0x200003b0

08001528 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800152c:	f000 fd5c 	bl	8001fe8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001530:	f000 f8c8 	bl	80016c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001534:	f000 fa44 	bl	80019c0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001538:	f000 f91c 	bl	8001774 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800153c:	f000 fa16 	bl	800196c <MX_USART1_UART_Init>
	MX_SPI2_Init();
 8001540:	f000 f990 	bl	8001864 <MX_SPI2_Init>
	MX_RTC_Init();
 8001544:	f000 f944 	bl	80017d0 <MX_RTC_Init>
	MX_TIM2_Init();
 8001548:	f000 f9c4 	bl	80018d4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 1);
 800154c:	2201      	movs	r2, #1
 800154e:	2102      	movs	r1, #2
 8001550:	4852      	ldr	r0, [pc, #328]	; (800169c <main+0x174>)
 8001552:	f001 f861 	bl	8002618 <HAL_GPIO_WritePin>

	initApp();
 8001556:	f004 fb5d 	bl	8005c14 <initApp>
	MAX6675_Init();
 800155a:	f004 fcd1 	bl	8005f00 <MAX6675_Init>

	mainMenu();
 800155e:	f004 fb79 	bl	8005c54 <mainMenu>
	initTime();
 8001562:	f004 fc5f 	bl	8005e24 <initTime>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001566:	2110      	movs	r1, #16
 8001568:	484c      	ldr	r0, [pc, #304]	; (800169c <main+0x174>)
 800156a:	f001 f86d 	bl	8002648 <HAL_GPIO_TogglePin>
		if (clsmoniter == 1) {
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <main+0x178>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <main+0x5a>
			CLCD_I2C_Clear(&LCD1);
 8001576:	484b      	ldr	r0, [pc, #300]	; (80016a4 <main+0x17c>)
 8001578:	f004 fb3c 	bl	8005bf4 <CLCD_I2C_Clear>
			clsmoniter = 0;
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <main+0x178>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
		}

		if (status == 1) {
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <main+0x180>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d13d      	bne.n	8001606 <main+0xde>
			updateSetpoint(encoderCount);
 800158a:	4b48      	ldr	r3, [pc, #288]	; (80016ac <main+0x184>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f004 fbc3 	bl	8005d1c <updateSetpoint>
			updateStatus(status);
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <main+0x180>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fc20 	bl	8005de0 <updateStatus>

			/* Functions */
			realValue = getTem();
 80015a0:	f004 fcd4 	bl	8005f4c <getTem>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a42      	ldr	r2, [pc, #264]	; (80016b0 <main+0x188>)
 80015a8:	6013      	str	r3, [r2, #0]
			updateRealValue(realValue);
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <main+0x188>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fbd3 	bl	8005d5c <updateRealValue>
			control_signal = PID_Update(&pid, realValue);
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <main+0x188>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffc6 	bl	800054c <__aeabi_ui2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	483b      	ldr	r0, [pc, #236]	; (80016b4 <main+0x18c>)
 80015c6:	f004 fd38 	bl	800603a <PID_Update>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	493a      	ldr	r1, [pc, #232]	; (80016b8 <main+0x190>)
 80015d0:	e9c1 2300 	strd	r2, r3, [r1]
			if (realValue > encoderCount) {
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <main+0x188>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <main+0x184>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d904      	bls.n	80015ea <main+0xc2>
				pwm_output(-1);
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff40 	bl	8001468 <pwm_output>
 80015e8:	e00a      	b.n	8001600 <main+0xd8>
			} else {
				pwm_output(control_signal);
 80015ea:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <main+0x190>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fad4 	bl	8000ba0 <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff34 	bl	8001468 <pwm_output>
			}
			updateTime();
 8001600:	f004 fc2a 	bl	8005e58 <updateTime>
 8001604:	e7af      	b.n	8001566 <main+0x3e>
		} else if (status == 0) {
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <main+0x180>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11f      	bne.n	800164e <main+0x126>
			mainMenu();
 800160e:	f004 fb21 	bl	8005c54 <mainMenu>
			pwm_output(-1);
 8001612:	f04f 30ff 	mov.w	r0, #4294967295
 8001616:	f7ff ff27 	bl	8001468 <pwm_output>
			updateSetpoint(encoderCount);
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <main+0x184>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f004 fb7b 	bl	8005d1c <updateSetpoint>
			updateStatus(status);
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <main+0x180>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f004 fbd8 	bl	8005de0 <updateStatus>

			/* Functions */
			realValue = getTem();
 8001630:	f004 fc8c 	bl	8005f4c <getTem>
 8001634:	4603      	mov	r3, r0
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <main+0x188>)
 8001638:	6013      	str	r3, [r2, #0]
			updateRealValue(realValue);
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <main+0x188>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fb8b 	bl	8005d5c <updateRealValue>
			HAL_Delay(200);
 8001646:	20c8      	movs	r0, #200	; 0xc8
 8001648:	f000 fd30 	bl	80020ac <HAL_Delay>
 800164c:	e78b      	b.n	8001566 <main+0x3e>
		} else if (status == 2) {
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <main+0x180>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d187      	bne.n	8001566 <main+0x3e>
			mainPower();
 8001656:	f004 fb2f 	bl	8005cb8 <mainPower>
			updatePowerpoint(powerpoint);
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <main+0x194>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fb9c 	bl	8005d9c <updatePowerpoint>
			realValue = getTem();
 8001664:	f004 fc72 	bl	8005f4c <getTem>
 8001668:	4603      	mov	r3, r0
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <main+0x188>)
 800166c:	6013      	str	r3, [r2, #0]
			updateRealValue(realValue);
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <main+0x188>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fb71 	bl	8005d5c <updateRealValue>
			pwm_output((int) (powerpoint * 5.8f));
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <main+0x194>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4910      	ldr	r1, [pc, #64]	; (80016c0 <main+0x198>)
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fd6d 	bl	8000160 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fca5 	bl	8000fd8 <__aeabi_f2iz>
 800168e:	4603      	mov	r3, r0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fee9 	bl	8001468 <pwm_output>
			updateTime();
 8001696:	f004 fbdf 	bl	8005e58 <updateTime>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800169a:	e764      	b.n	8001566 <main+0x3e>
 800169c:	40010800 	.word	0x40010800
 80016a0:	200003a1 	.word	0x200003a1
 80016a4:	2000034c 	.word	0x2000034c
 80016a8:	200003a0 	.word	0x200003a0
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000388 	.word	0x20000388
 80016b4:	20000358 	.word	0x20000358
 80016b8:	200003a8 	.word	0x200003a8
 80016bc:	20000004 	.word	0x20000004
 80016c0:	40b9999a 	.word	0x40b9999a

080016c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ce:	2228      	movs	r2, #40	; 0x28
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 fca5 	bl	8007022 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80016f4:	230a      	movs	r3, #10
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fc:	2310      	movs	r3, #16
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001700:	2301      	movs	r3, #1
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001704:	2302      	movs	r3, #2
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fc71 	bl	8002ffc <HAL_RCC_OscConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x60>
		Error_Handler();
 8001720:	f000 f9ec 	bl	8001afc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001724:	230f      	movs	r3, #15
 8001726:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fede 	bl	8003500 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x8a>
		Error_Handler();
 800174a:	f000 f9d7 	bl	8001afc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800174e:	2301      	movs	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001756:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f002 f85e 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xa6>
		Error_Handler();
 8001766:	f000 f9c9 	bl	8001afc <Error_Handler>
	}
}
 800176a:	bf00      	nop
 800176c:	3750      	adds	r7, #80	; 0x50
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_I2C1_Init+0x50>)
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <MX_I2C1_Init+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_I2C1_Init+0x50>)
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <MX_I2C1_Init+0x58>)
 8001782:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_I2C1_Init+0x50>)
 8001792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001796:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_I2C1_Init+0x50>)
 80017b2:	f000 ff7b 	bl	80026ac <HAL_I2C_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80017bc:	f000 f99e 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200001fc 	.word	0x200001fc
 80017c8:	40005400 	.word	0x40005400
 80017cc:	000186a0 	.word	0x000186a0

080017d0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2100      	movs	r1, #0
 80017da:	460a      	mov	r2, r1
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	460a      	mov	r2, r1
 80017e0:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_RTC_Init+0x8c>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <MX_RTC_Init+0x90>)
 80017ea:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_RTC_Init+0x8c>)
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_RTC_Init+0x8c>)
 80017f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fa:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <MX_RTC_Init+0x8c>)
 80017fe:	f002 f979 	bl	8003af4 <HAL_RTC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_RTC_Init+0x3c>
		Error_Handler();
 8001808:	f000 f978 	bl	8001afc <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800180c:	2300      	movs	r3, #0
 800180e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001810:	2300      	movs	r3, #0
 8001812:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001814:	2300      	movs	r3, #0
 8001816:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2201      	movs	r2, #1
 800181c:	4619      	mov	r1, r3
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <MX_RTC_Init+0x8c>)
 8001820:	f002 f9f4 	bl	8003c0c <HAL_RTC_SetTime>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_RTC_Init+0x5e>
		Error_Handler();
 800182a:	f000 f967 	bl	8001afc <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800182e:	2301      	movs	r3, #1
 8001830:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001832:	2301      	movs	r3, #1
 8001834:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x1;
 8001836:	2301      	movs	r3, #1
 8001838:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x0;
 800183a:	2300      	movs	r3, #0
 800183c:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 800183e:	463b      	mov	r3, r7
 8001840:	2201      	movs	r2, #1
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_RTC_Init+0x8c>)
 8001846:	f002 fb51 	bl	8003eec <HAL_RTC_SetDate>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_RTC_Init+0x84>
		Error_Handler();
 8001850:	f000 f954 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000250 	.word	0x20000250
 8001860:	40002800 	.word	0x40002800

08001864 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_SPI2_Init+0x68>)
 800186a:	4a19      	ldr	r2, [pc, #100]	; (80018d0 <MX_SPI2_Init+0x6c>)
 800186c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_SPI2_Init+0x68>)
 8001870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001874:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_SPI2_Init+0x68>)
 8001878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_SPI2_Init+0x68>)
 8001880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001884:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_SPI2_Init+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_SPI2_Init+0x68>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_SPI2_Init+0x68>)
 8001894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001898:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_SPI2_Init+0x68>)
 800189c:	2230      	movs	r2, #48	; 0x30
 800189e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_SPI2_Init+0x68>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_SPI2_Init+0x68>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_SPI2_Init+0x68>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_SPI2_Init+0x68>)
 80018b4:	220a      	movs	r2, #10
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_SPI2_Init+0x68>)
 80018ba:	f002 fec3 	bl	8004644 <HAL_SPI_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_SPI2_Init+0x64>
		Error_Handler();
 80018c4:	f000 f91a 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000264 	.word	0x20000264
 80018d0:	40003800 	.word	0x40003800

080018d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM2_Init+0x94>)
 80018f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_TIM2_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM2_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_TIM2_Init+0x94>)
 8001906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800190a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_TIM2_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM2_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <MX_TIM2_Init+0x94>)
 800191a:	f003 fc1b 	bl	8005154 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001924:	f000 f8ea 	bl	8001afc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	4619      	mov	r1, r3
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_TIM2_Init+0x94>)
 8001936:	f003 fcff 	bl	8005338 <HAL_TIM_ConfigClockSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001940:	f000 f8dc 	bl	8001afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM2_Init+0x94>)
 8001952:	f003 fed5 	bl	8005700 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800195c:	f000 f8ce 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200002bc 	.word	0x200002bc

0800196c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_USART1_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART1_UART_Init+0x4c>)
 80019a4:	f003 ff0a 	bl	80057bc <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80019ae:	f000 f8a5 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000304 	.word	0x20000304
 80019bc:	40013800 	.word	0x40013800

080019c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019d4:	4b45      	ldr	r3, [pc, #276]	; (8001aec <MX_GPIO_Init+0x12c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a44      	ldr	r2, [pc, #272]	; (8001aec <MX_GPIO_Init+0x12c>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b42      	ldr	r3, [pc, #264]	; (8001aec <MX_GPIO_Init+0x12c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <MX_GPIO_Init+0x12c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a3e      	ldr	r2, [pc, #248]	; (8001aec <MX_GPIO_Init+0x12c>)
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <MX_GPIO_Init+0x12c>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <MX_GPIO_Init+0x12c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a38      	ldr	r2, [pc, #224]	; (8001aec <MX_GPIO_Init+0x12c>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <MX_GPIO_Init+0x12c>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <MX_GPIO_Init+0x12c>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a32      	ldr	r2, [pc, #200]	; (8001aec <MX_GPIO_Init+0x12c>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b30      	ldr	r3, [pc, #192]	; (8001aec <MX_GPIO_Init+0x12c>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, PWM_Pin | LD1_Pin | LD2_Pin | LD3_Pin | LD4_Pin,
 8001a34:	2200      	movs	r2, #0
 8001a36:	21f2      	movs	r1, #242	; 0xf2
 8001a38:	482d      	ldr	r0, [pc, #180]	; (8001af0 <MX_GPIO_Init+0x130>)
 8001a3a:	f000 fded 	bl	8002618 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_Pin | LED_LCD_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001a44:	482b      	ldr	r0, [pc, #172]	; (8001af4 <MX_GPIO_Init+0x134>)
 8001a46:	f000 fde7 	bl	8002618 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PWM_Pin LD1_Pin LD2_Pin LD3_Pin
	 LD4_Pin */
	GPIO_InitStruct.Pin = PWM_Pin | LD1_Pin | LD2_Pin | LD3_Pin | LD4_Pin;
 8001a4a:	23f2      	movs	r3, #242	; 0xf2
 8001a4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4823      	ldr	r0, [pc, #140]	; (8001af0 <MX_GPIO_Init+0x130>)
 8001a62:	f000 fc55 	bl	8002310 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001a66:	2307      	movs	r3, #7
 8001a68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <MX_GPIO_Init+0x138>)
 8001a6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	481e      	ldr	r0, [pc, #120]	; (8001af4 <MX_GPIO_Init+0x134>)
 8001a7a:	f000 fc49 	bl	8002310 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin LED_LCD_Pin */
	GPIO_InitStruct.Pin = CS_Pin | LED_LCD_Pin;
 8001a7e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001a82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4817      	ldr	r0, [pc, #92]	; (8001af4 <MX_GPIO_Init+0x134>)
 8001a98:	f000 fc3a 	bl	8002310 <HAL_GPIO_Init>

	/*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin */
	GPIO_InitStruct.Pin = BT1_Pin | BT2_Pin | BT3_Pin;
 8001a9c:	2338      	movs	r3, #56	; 0x38
 8001a9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	4811      	ldr	r0, [pc, #68]	; (8001af4 <MX_GPIO_Init+0x134>)
 8001ab0:	f000 fc2e 	bl	8002310 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2006      	movs	r0, #6
 8001aba:	f000 fbf2 	bl	80022a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001abe:	2006      	movs	r0, #6
 8001ac0:	f000 fc0b 	bl	80022da <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2007      	movs	r0, #7
 8001aca:	f000 fbea 	bl	80022a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ace:	2007      	movs	r0, #7
 8001ad0:	f000 fc03 	bl	80022da <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2008      	movs	r0, #8
 8001ada:	f000 fbe2 	bl	80022a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ade:	2008      	movs	r0, #8
 8001ae0:	f000 fbfb 	bl	80022da <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010800 	.word	0x40010800
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	10210000 	.word	0x10210000

08001afc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_MspInit+0x60>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_MspInit+0x60>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000

08001b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_I2C_MspInit+0x70>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_I2C_MspInit+0x74>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_I2C_MspInit+0x74>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_I2C_MspInit+0x74>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba4:	23c0      	movs	r3, #192	; 0xc0
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <HAL_I2C_MspInit+0x78>)
 8001bb8:	f000 fbaa 	bl	8002310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_I2C_MspInit+0x74>)
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_I2C_MspInit+0x74>)
 8001bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc6:	61d3      	str	r3, [r2, #28]
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_I2C_MspInit+0x74>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010c00 	.word	0x40010c00

08001be8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_RTC_MspInit+0x3c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d110      	bne.n	8001c1c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001bfa:	f001 f9f3 	bl	8002fe4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RTC_MspInit+0x40>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RTC_MspInit+0x40>)
 8001c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_RTC_MspInit+0x40>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RTC_MspInit+0x44>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40002800 	.word	0x40002800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	4242043c 	.word	0x4242043c

08001c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d131      	bne.n	8001cb4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5a:	61d3      	str	r3, [r2, #28]
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_SPI_MspInit+0x94>)
 8001c96:	f000 fb3b 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_SPI_MspInit+0x94>)
 8001cb0:	f000 fb2e 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40003800 	.word	0x40003800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010c00 	.word	0x40010c00

08001cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_TIM_Base_MspInit+0x34>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_TIM_Base_MspInit+0x34>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_TIM_Base_MspInit+0x34>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_UART_MspInit+0x8c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d131      	bne.n	8001d84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0x90>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_UART_MspInit+0x90>)
 8001d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_UART_MspInit+0x90>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x90>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_UART_MspInit+0x90>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x90>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <HAL_UART_MspInit+0x94>)
 8001d66:	f000 fad3 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_UART_MspInit+0x94>)
 8001d80:	f000 fac6 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010800 	.word	0x40010800

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <NMI_Handler+0x4>

08001d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler+0x4>

08001daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dde:	f000 f949 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fc46 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f000 fc3f 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e06:	2004      	movs	r0, #4
 8001e08:	f000 fc38 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <_kill>:

int _kill(int pid, int sig)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e28:	f005 f94e 	bl	80070c8 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2216      	movs	r2, #22
 8001e30:	601a      	str	r2, [r3, #0]
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_exit>:

void _exit (int status)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e46:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffe7 	bl	8001e1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e50:	e7fe      	b.n	8001e50 <_exit+0x12>

08001e52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e00a      	b.n	8001e7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e64:	f3af 8000 	nop.w
 8001e68:	4601      	mov	r1, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	60ba      	str	r2, [r7, #8]
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dbf0      	blt.n	8001e64 <_read+0x12>
  }

  return len;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e009      	b.n	8001eb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf1      	blt.n	8001e9e <_write+0x12>
  }
  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_close>:

int _close(int file)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eea:	605a      	str	r2, [r3, #4]
  return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <_isatty>:

int _isatty(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f005 f8b8 	bl	80070c8 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20005000 	.word	0x20005000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	200003b4 	.word	0x200003b4
 8001f8c:	20000510 	.word	0x20000510

08001f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <Reset_Handler>:
 8001f9c:	f7ff fff8 	bl	8001f90 <SystemInit>
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopFillZerobss+0xe>)
 8001fa2:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x12>)
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <LoopFillZerobss+0x16>)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:
 8001faa:	58d4      	ldr	r4, [r2, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:
 8001fb0:	18c4      	adds	r4, r0, r3
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <LoopFillZerobss+0x1a>)
 8001fb8:	4c09      	ldr	r4, [pc, #36]	; (8001fe0 <LoopFillZerobss+0x1e>)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:
 8001fc2:	42a2      	cmp	r2, r4
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>
 8001fc6:	f005 f885 	bl	80070d4 <__libc_init_array>
 8001fca:	f7ff faad 	bl	8001528 <main>
 8001fce:	4770      	bx	lr
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	200001dc 	.word	0x200001dc
 8001fd8:	0800ad80 	.word	0x0800ad80
 8001fdc:	200001e0 	.word	0x200001e0
 8001fe0:	20000510 	.word	0x20000510

08001fe4 <ADC1_2_IRQHandler>:
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x28>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f947 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	200f      	movs	r0, #15
 8002000:	f000 f808 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fd80 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f95f 	bl	80022f6 <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 f927 	bl	80022a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000008 	.word	0x20000008
 800206c:	20000010 	.word	0x20000010
 8002070:	2000000c 	.word	0x2000000c

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <HAL_IncTick+0x20>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	20000010 	.word	0x20000010
 8002094:	200003b8 	.word	0x200003b8

08002098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_GetTick+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	200003b8 	.word	0x200003b8

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fff0 	bl	8002098 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffe0 	bl	8002098 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000010 	.word	0x20000010

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <__NVIC_EnableIRQ+0x34>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff90 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff2d 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff42 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff90 	bl	80021e4 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5f 	bl	8002190 <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff35 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e169      	b.n	80025f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002324:	2201      	movs	r2, #1
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8158 	bne.w	80025f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a9a      	ldr	r2, [pc, #616]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800234c:	4a98      	ldr	r2, [pc, #608]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d875      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002352:	4a98      	ldr	r2, [pc, #608]	; (80025b4 <HAL_GPIO_Init+0x2a4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d058      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002358:	4a96      	ldr	r2, [pc, #600]	; (80025b4 <HAL_GPIO_Init+0x2a4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d86f      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800235e:	4a96      	ldr	r2, [pc, #600]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d052      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002364:	4a94      	ldr	r2, [pc, #592]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d869      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800236a:	4a94      	ldr	r2, [pc, #592]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04c      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002370:	4a92      	ldr	r2, [pc, #584]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d863      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002376:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d046      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800237c:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d85d      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002382:	2b12      	cmp	r3, #18
 8002384:	d82a      	bhi.n	80023dc <HAL_GPIO_Init+0xcc>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d859      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_GPIO_Init+0x80>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	0800240b 	.word	0x0800240b
 8002394:	080023e5 	.word	0x080023e5
 8002398:	080023f7 	.word	0x080023f7
 800239c:	08002439 	.word	0x08002439
 80023a0:	0800243f 	.word	0x0800243f
 80023a4:	0800243f 	.word	0x0800243f
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	0800243f 	.word	0x0800243f
 80023b0:	0800243f 	.word	0x0800243f
 80023b4:	0800243f 	.word	0x0800243f
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800243f 	.word	0x0800243f
 80023c0:	0800243f 	.word	0x0800243f
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	0800243f 	.word	0x0800243f
 80023cc:	0800243f 	.word	0x0800243f
 80023d0:	0800243f 	.word	0x0800243f
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	08002401 	.word	0x08002401
 80023dc:	4a79      	ldr	r2, [pc, #484]	; (80025c4 <HAL_GPIO_Init+0x2b4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e2:	e02c      	b.n	800243e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e029      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	3304      	adds	r3, #4
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e024      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	3308      	adds	r3, #8
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e01f      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	330c      	adds	r3, #12
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e01a      	b.n	8002440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002412:	2304      	movs	r3, #4
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e013      	b.n	8002440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002420:	2308      	movs	r3, #8
 8002422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	611a      	str	r2, [r3, #16]
          break;
 800242a:	e009      	b.n	8002440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	615a      	str	r2, [r3, #20]
          break;
 8002436:	e003      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x130>
          break;
 800243e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d801      	bhi.n	800244a <HAL_GPIO_Init+0x13a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e001      	b.n	800244e <HAL_GPIO_Init+0x13e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d802      	bhi.n	800245c <HAL_GPIO_Init+0x14c>
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x152>
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	3b08      	subs	r3, #8
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	210f      	movs	r1, #15
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80b1 	beq.w	80025f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002490:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a4c      	ldr	r2, [pc, #304]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a8:	4a48      	ldr	r2, [pc, #288]	; (80025cc <HAL_GPIO_Init+0x2bc>)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <HAL_GPIO_Init+0x2c0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_GPIO_Init+0x1ec>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3f      	ldr	r2, [pc, #252]	; (80025d4 <HAL_GPIO_Init+0x2c4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00d      	beq.n	80024f8 <HAL_GPIO_Init+0x1e8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3e      	ldr	r2, [pc, #248]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_Init+0x1e4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3d      	ldr	r2, [pc, #244]	; (80025dc <HAL_GPIO_Init+0x2cc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_GPIO_Init+0x1e0>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e006      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e004      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024fc:	2300      	movs	r3, #0
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	f002 0203 	and.w	r2, r2, #3
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	4093      	lsls	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800250e:	492f      	ldr	r1, [pc, #188]	; (80025cc <HAL_GPIO_Init+0x2bc>)
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	492c      	ldr	r1, [pc, #176]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4928      	ldr	r1, [pc, #160]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4922      	ldr	r1, [pc, #136]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	43db      	mvns	r3, r3
 8002566:	491e      	ldr	r1, [pc, #120]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002568:	4013      	ands	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4918      	ldr	r1, [pc, #96]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	43db      	mvns	r3, r3
 800258e:	4914      	ldr	r1, [pc, #80]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002590:	4013      	ands	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d021      	beq.n	80025e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e021      	b.n	80025f2 <HAL_GPIO_Init+0x2e2>
 80025ae:	bf00      	nop
 80025b0:	10320000 	.word	0x10320000
 80025b4:	10310000 	.word	0x10310000
 80025b8:	10220000 	.word	0x10220000
 80025bc:	10210000 	.word	0x10210000
 80025c0:	10120000 	.word	0x10120000
 80025c4:	10110000 	.word	0x10110000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40010800 	.word	0x40010800
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40011400 	.word	0x40011400
 80025e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	4909      	ldr	r1, [pc, #36]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f ae8e 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	372c      	adds	r7, #44	; 0x2c
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	041a      	lsls	r2, r3, #16
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43d9      	mvns	r1, r3
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	400b      	ands	r3, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fd1c 	bl	80010d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e12b      	b.n	8002916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fa4a 	bl	8001b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002710:	f001 f83e 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a81      	ldr	r2, [pc, #516]	; (8002920 <HAL_I2C_Init+0x274>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d807      	bhi.n	8002730 <HAL_I2C_Init+0x84>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a80      	ldr	r2, [pc, #512]	; (8002924 <HAL_I2C_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e006      	b.n	800273e <HAL_I2C_Init+0x92>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a7d      	ldr	r2, [pc, #500]	; (8002928 <HAL_I2C_Init+0x27c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0e7      	b.n	8002916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a78      	ldr	r2, [pc, #480]	; (800292c <HAL_I2C_Init+0x280>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_I2C_Init+0x274>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <HAL_I2C_Init+0xd4>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3301      	adds	r3, #1
 800277e:	e009      	b.n	8002794 <HAL_I2C_Init+0xe8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_I2C_Init+0x284>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	495c      	ldr	r1, [pc, #368]	; (8002920 <HAL_I2C_Init+0x274>)
 80027b0:	428b      	cmp	r3, r1
 80027b2:	d819      	bhi.n	80027e8 <HAL_I2C_Init+0x13c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_I2C_Init+0x138>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e59      	subs	r1, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	e051      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e04f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_I2C_Init+0x168>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e012      	b.n	800283a <HAL_I2C_Init+0x18e>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	0099      	lsls	r1, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x196>
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <HAL_I2C_Init+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e58      	subs	r0, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	fbb0 f3f3 	udiv	r3, r0, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6911      	ldr	r1, [r2, #16]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	000186a0 	.word	0x000186a0
 8002924:	001e847f 	.word	0x001e847f
 8002928:	003d08ff 	.word	0x003d08ff
 800292c:	431bde83 	.word	0x431bde83
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	461a      	mov	r2, r3
 8002940:	460b      	mov	r3, r1
 8002942:	817b      	strh	r3, [r7, #10]
 8002944:	4613      	mov	r3, r2
 8002946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff fba6 	bl	8002098 <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 80e0 	bne.w	8002b1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2319      	movs	r3, #25
 8002962:	2201      	movs	r2, #1
 8002964:	4970      	ldr	r1, [pc, #448]	; (8002b28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f964 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	e0d3      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x50>
 8002980:	2302      	movs	r3, #2
 8002982:	e0cc      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2221      	movs	r2, #33	; 0x21
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2210      	movs	r2, #16
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_I2C_Master_Transmit+0x1f8>)
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f89c 	bl	8002b30 <I2C_MasterRequestWrite>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e08d      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a18:	e066      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa22 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06b      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11b      	bne.n	8002abc <HAL_I2C_Master_Transmit+0x188>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d017      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fa19 	bl	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01a      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d194      	bne.n	8002a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00100002 	.word	0x00100002
 8002b2c:	ffff0000 	.word	0xffff0000

08002b30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d006      	beq.n	8002b5a <I2C_MasterRequestWrite+0x2a>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d003      	beq.n	8002b5a <I2C_MasterRequestWrite+0x2a>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d107      	bne.n	8002b84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f84f 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e035      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e01b      	b.n	8002c0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <I2C_MasterRequestWrite+0xfc>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f898 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e010      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <I2C_MasterRequestWrite+0x100>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f888 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010008 	.word	0x00010008
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e048      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d044      	beq.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7ff fa23 	bl	8002098 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d139      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10d      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	e00c      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d116      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e023      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d093      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d36:	e071      	b.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d123      	bne.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e067      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d041      	beq.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7ff f97e 	bl	8002098 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d136      	bne.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10c      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e00b      	b.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e021      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10c      	bne.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e00b      	b.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af6d 	bne.w	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e034      	b.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f886 	bl	8002f88 <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e034      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d028      	beq.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7ff f903 	bl	8002098 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11d      	bne.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d016      	beq.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d1c3      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f04:	e034      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f83e 	bl	8002f88 <I2C_IsAcknowledgeFailed>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d028      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7ff f8bb 	bl	8002098 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11d      	bne.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d016      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e007      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d1c3      	bne.n	8002f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d11b      	bne.n	8002fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0204 	orr.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	420e0020 	.word	0x420e0020

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e272      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8087 	beq.w	800312a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800301c:	4b92      	ldr	r3, [pc, #584]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00c      	beq.n	8003042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d112      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
 8003034:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d10b      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06c      	beq.n	8003128 <HAL_RCC_OscConfig+0x12c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d168      	bne.n	8003128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e24c      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x76>
 8003064:	4b80      	ldr	r3, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a7f      	ldr	r2, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e02e      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x98>
 800307a:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800308c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0xbc>
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe ffde 	bl	8002098 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe ffda 	bl	8002098 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e200      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe4>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe ffca 	bl	8002098 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe ffc6 	bl	8002098 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1ec      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x10c>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003136:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
 800314e:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c0      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4939      	ldr	r1, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe ff7f 	bl	8002098 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe ff7b 	bl	8002098 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a1      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4927      	ldr	r1, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe ff5e 	bl	8002098 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe ff5a 	bl	8002098 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e180      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03a      	beq.n	8003280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe ff3e 	bl	8002098 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe ff3a 	bl	8002098 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e160      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800323e:	2001      	movs	r0, #1
 8003240:	f000 face 	bl	80037e0 <RCC_Delay>
 8003244:	e01c      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fe ff24 	bl	8002098 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	e00f      	b.n	8003274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7fe ff20 	bl	8002098 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d908      	bls.n	8003274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e146      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	42420000 	.word	0x42420000
 8003270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e9      	bne.n	8003254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a6 	beq.w	80033da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b8b      	ldr	r3, [pc, #556]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a87      	ldr	r2, [pc, #540]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]
 80032aa:	4b85      	ldr	r3, [pc, #532]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b7f      	ldr	r3, [pc, #508]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7fe fee1 	bl	8002098 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7fe fedd 	bl	8002098 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e103      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x312>
 8003300:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e02d      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x334>
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a69      	ldr	r2, [pc, #420]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	4b67      	ldr	r3, [pc, #412]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a66      	ldr	r2, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6213      	str	r3, [r2, #32]
 800332e:	e01c      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x356>
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a60      	ldr	r2, [pc, #384]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4b5e      	ldr	r3, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d015      	beq.n	800339e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7fe fe91 	bl	8002098 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fe fe8d 	bl	8002098 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0b1      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCC_OscConfig+0x37e>
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fe fe7b 	bl	8002098 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe fe77 	bl	8002098 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e09b      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8087 	beq.w	80034f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d061      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d146      	bne.n	8003486 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fe4b 	bl	8002098 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fe47 	bl	8002098 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e06d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a19      	ldr	r1, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	430b      	orrs	r3, r1
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe fe1b 	bl	8002098 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fe17 	bl	8002098 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e03d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x46a>
 8003484:	e035      	b.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fe04 	bl	8002098 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fe00 	bl	8002098 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e026      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x498>
 80034b2:	e01e      	b.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e019      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x500>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003566:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fd52 	bl	8002098 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe fd4e 	bl	8002098 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1cc>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fcb0 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800a910 	.word	0x0800a910
 80036cc:	20000008 	.word	0x20000008
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_RCC_GetSysClockFreq+0x94>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d002      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x30>
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d003      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x36>
 8003702:	e027      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_GetSysClockFreq+0x98>)
 8003706:	613b      	str	r3, [r7, #16]
      break;
 8003708:	e027      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	0c9b      	lsrs	r3, r3, #18
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003714:	5cd3      	ldrb	r3, [r2, r3]
 8003716:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_GetSysClockFreq+0x94>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0c5b      	lsrs	r3, r3, #17
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_RCC_GetSysClockFreq+0xa0>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <HAL_RCC_GetSysClockFreq+0x98>)
 8003736:	fb03 f202 	mul.w	r2, r3, r2
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e004      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	613b      	str	r3, [r7, #16]
      break;
 8003752:	e002      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetSysClockFreq+0x98>)
 8003756:	613b      	str	r3, [r7, #16]
      break;
 8003758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375a:	693b      	ldr	r3, [r7, #16]
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	007a1200 	.word	0x007a1200
 8003770:	0800a928 	.word	0x0800a928
 8003774:	0800a938 	.word	0x0800a938
 8003778:	003d0900 	.word	0x003d0900

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_RCC_GetHCLKFreq+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000008 	.word	0x20000008

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003794:	f7ff fff2 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800a920 	.word	0x0800a920

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037bc:	f7ff ffde 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	0adb      	lsrs	r3, r3, #11
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	0800a920 	.word	0x0800a920

080037e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <RCC_Delay+0x34>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <RCC_Delay+0x38>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a5b      	lsrs	r3, r3, #9
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037fc:	bf00      	nop
  }
  while (Delay --);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	60fa      	str	r2, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f9      	bne.n	80037fc <RCC_Delay+0x1c>
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	20000008 	.word	0x20000008
 8003818:	10624dd3 	.word	0x10624dd3

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d07d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383c:	4b4f      	ldr	r3, [pc, #316]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003848:	4b4c      	ldr	r3, [pc, #304]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	4a4b      	ldr	r2, [pc, #300]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	61d3      	str	r3, [r2, #28]
 8003854:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d118      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a42      	ldr	r2, [pc, #264]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387c:	f7fe fc0c 	bl	8002098 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	e008      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7fe fc08 	bl	8002098 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e06d      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02e      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d027      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038c0:	4b2e      	ldr	r3, [pc, #184]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038d6:	4a29      	ldr	r2, [pc, #164]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d014      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fbd7 	bl	8002098 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe fbd3 	bl	8002098 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e036      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ee      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	4313      	orrs	r3, r2
 8003920:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003932:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	490b      	ldr	r1, [pc, #44]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800395e:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4904      	ldr	r1, [pc, #16]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
 8003984:	42420440 	.word	0x42420440

08003988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	f200 808a 	bhi.w	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d045      	beq.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d075      	beq.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80039be:	e082      	b.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80039c0:	4b46      	ldr	r3, [pc, #280]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80039c6:	4b45      	ldr	r3, [pc, #276]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07b      	beq.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	0c9b      	lsrs	r3, r3, #18
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
 80039de:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d015      	beq.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ea:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0c5b      	lsrs	r3, r3, #17
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	4a3b      	ldr	r2, [pc, #236]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a04:	4a38      	ldr	r2, [pc, #224]	; (8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e004      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2c:	d102      	bne.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	61bb      	str	r3, [r7, #24]
      break;
 8003a32:	e04a      	b.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4a2d      	ldr	r2, [pc, #180]	; (8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	61bb      	str	r3, [r7, #24]
      break;
 8003a42:	e042      	b.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d108      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e01f      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003a80:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a92:	d11c      	bne.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003aa0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003aa4:	61bb      	str	r3, [r7, #24]
      break;
 8003aa6:	e012      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003aa8:	e011      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003aaa:	f7ff fe85 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0b9b      	lsrs	r3, r3, #14
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	61bb      	str	r3, [r7, #24]
      break;
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ace:	bf00      	nop
    }
  }
  return (frequency);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	0800a93c 	.word	0x0800a93c
 8003ae4:	0800a94c 	.word	0x0800a94c
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	003d0900 	.word	0x003d0900
 8003af0:	aaaaaaab 	.word	0xaaaaaaab

08003af4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07a      	b.n	8003c00 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7c5b      	ldrb	r3, [r3, #17]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe f864 	bl	8001be8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 faea 	bl	8004100 <HAL_RTC_WaitForSynchro>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e061      	b.n	8003c00 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fba3 	bl	8004288 <RTC_EnterInitMode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e056      	b.n	8003c00 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0207 	bic.w	r2, r2, #7
 8003b60:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003b6a:	4b27      	ldr	r3, [pc, #156]	; (8003c08 <HAL_RTC_Init+0x114>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <HAL_RTC_Init+0x114>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RTC_Init+0x114>)
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4921      	ldr	r1, [pc, #132]	; (8003c08 <HAL_RTC_Init+0x114>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d003      	beq.n	8003b9a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e00e      	b.n	8003bb8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f7ff fef4 	bl	8003988 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ba0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d104      	bne.n	8003bb2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2204      	movs	r2, #4
 8003bac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e026      	b.n	8003c00 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	0c1a      	lsrs	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 020f 	and.w	r2, r2, #15
 8003bc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb81 	bl	80042d8 <RTC_ExitInitMode>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e00c      	b.n	8003c00 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40006c00 	.word	0x40006c00

08003c0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_RTC_SetTime+0x20>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e080      	b.n	8003d32 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	7c1b      	ldrb	r3, [r3, #16]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_RTC_SetTime+0x30>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e07a      	b.n	8003d32 <HAL_RTC_SetTime+0x126>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2202      	movs	r2, #2
 8003c46:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d113      	bne.n	8003c76 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003c58:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	4619      	mov	r1, r3
 8003c62:	460b      	mov	r3, r1
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a5b      	subs	r3, r3, r1
 8003c68:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003c6a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003c70:	4413      	add	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e01e      	b.n	8003cb4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fb71 	bl	8004362 <RTC_Bcd2ToByte>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003c88:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb66 	bl	8004362 <RTC_Bcd2ToByte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ca2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	789b      	ldrb	r3, [r3, #2]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fb5a 	bl	8004362 <RTC_Bcd2ToByte>
 8003cae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003cb0:	4423      	add	r3, r4
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa7f 	bl	80041ba <RTC_WriteTimeCounter>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02f      	b.n	8003d32 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0205 	bic.w	r2, r2, #5
 8003ce0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fa90 	bl	8004208 <RTC_ReadAlarmCounter>
 8003ce8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d018      	beq.n	8003d24 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d214      	bcs.n	8003d24 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003d00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d04:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fa96 	bl	800423a <RTC_WriteAlarmCounter>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2204      	movs	r2, #4
 8003d18:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e006      	b.n	8003d32 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
	...

08003d3c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_RTC_GetTime+0x28>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b5      	b.n	8003ed4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0ac      	b.n	8003ed4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f9ed 	bl	800415a <RTC_ReadTimeCounter>
 8003d80:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4a55      	ldr	r2, [pc, #340]	; (8003edc <HAL_RTC_GetTime+0x1a0>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0adb      	lsrs	r3, r3, #11
 8003d8c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4b52      	ldr	r3, [pc, #328]	; (8003edc <HAL_RTC_GetTime+0x1a0>)
 8003d92:	fba3 1302 	umull	r1, r3, r3, r2
 8003d96:	0adb      	lsrs	r3, r3, #11
 8003d98:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	4a4f      	ldr	r2, [pc, #316]	; (8003ee0 <HAL_RTC_GetTime+0x1a4>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <HAL_RTC_GetTime+0x1a0>)
 8003db4:	fba2 1203 	umull	r1, r2, r2, r3
 8003db8:	0ad2      	lsrs	r2, r2, #11
 8003dba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003dbe:	fb01 f202 	mul.w	r2, r1, r2
 8003dc2:	1a9a      	subs	r2, r3, r2
 8003dc4:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <HAL_RTC_GetTime+0x1a4>)
 8003dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dca:	0959      	lsrs	r1, r3, #5
 8003dcc:	460b      	mov	r3, r1
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a5b      	subs	r3, r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	1ad1      	subs	r1, r2, r3
 8003dd6:	b2ca      	uxtb	r2, r1
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b17      	cmp	r3, #23
 8003de0:	d955      	bls.n	8003e8e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <HAL_RTC_GetTime+0x1a8>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003dee:	6939      	ldr	r1, [r7, #16]
 8003df0:	4b3c      	ldr	r3, [pc, #240]	; (8003ee4 <HAL_RTC_GetTime+0x1a8>)
 8003df2:	fba3 2301 	umull	r2, r3, r3, r1
 8003df6:	091a      	lsrs	r2, r3, #4
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1aca      	subs	r2, r1, r3
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f9fd 	bl	8004208 <RTC_ReadAlarmCounter>
 8003e0e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d008      	beq.n	8003e2a <HAL_RTC_GetTime+0xee>
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d904      	bls.n	8003e2a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e002      	b.n	8003e30 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <HAL_RTC_GetTime+0x1ac>)
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f9ba 	bl	80041ba <RTC_WriteTimeCounter>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e041      	b.n	8003ed4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d00c      	beq.n	8003e72 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e60:	69f9      	ldr	r1, [r7, #28]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f9e9 	bl	800423a <RTC_WriteAlarmCounter>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e030      	b.n	8003ed4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e72:	69f9      	ldr	r1, [r7, #28]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f9e0 	bl	800423a <RTC_WriteAlarmCounter>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e027      	b.n	8003ed4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fa88 	bl	800439c <RTC_DateUpdate>
 8003e8c:	e003      	b.n	8003e96 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01a      	beq.n	8003ed2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fa41 	bl	8004328 <RTC_ByteToBcd2>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fa38 	bl	8004328 <RTC_ByteToBcd2>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	789b      	ldrb	r3, [r3, #2]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fa2f 	bl	8004328 <RTC_ByteToBcd2>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	91a2b3c5 	.word	0x91a2b3c5
 8003ee0:	88888889 	.word	0x88888889
 8003ee4:	aaaaaaab 	.word	0xaaaaaaab
 8003ee8:	00015180 	.word	0x00015180

08003eec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_RTC_SetDate+0x24>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e097      	b.n	8004044 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	7c1b      	ldrb	r3, [r3, #16]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_RTC_SetDate+0x34>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e091      	b.n	8004044 <HAL_RTC_SetDate+0x158>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	78da      	ldrb	r2, [r3, #3]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	785a      	ldrb	r2, [r3, #1]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	789a      	ldrb	r2, [r3, #2]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	739a      	strb	r2, [r3, #14]
 8003f4a:	e01a      	b.n	8003f82 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	78db      	ldrb	r3, [r3, #3]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fa06 	bl	8004362 <RTC_Bcd2ToByte>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f9fd 	bl	8004362 <RTC_Bcd2ToByte>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	789b      	ldrb	r3, [r3, #2]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f9f4 	bl	8004362 <RTC_Bcd2ToByte>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	7bdb      	ldrb	r3, [r3, #15]
 8003f86:	4618      	mov	r0, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	7b59      	ldrb	r1, [r3, #13]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	7b9b      	ldrb	r3, [r3, #14]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 fadf 	bl	8004554 <RTC_WeekDayNum>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	7b1a      	ldrb	r2, [r3, #12]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f8d7 	bl	800415a <RTC_ReadTimeCounter>
 8003fac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <HAL_RTC_SetDate+0x160>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0adb      	lsrs	r3, r3, #11
 8003fb8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b18      	cmp	r3, #24
 8003fbe:	d93a      	bls.n	8004036 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4a23      	ldr	r2, [pc, #140]	; (8004050 <HAL_RTC_SetDate+0x164>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_RTC_SetDate+0x168>)
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003fd6:	69f9      	ldr	r1, [r7, #28]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f8ee 	bl	80041ba <RTC_WriteTimeCounter>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e027      	b.n	8004044 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f907 	bl	8004208 <RTC_ReadAlarmCounter>
 8003ffa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d018      	beq.n	8004036 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d214      	bcs.n	8004036 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004012:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004016:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f90d 	bl	800423a <RTC_WriteAlarmCounter>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2204      	movs	r2, #4
 800402a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e006      	b.n	8004044 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	91a2b3c5 	.word	0x91a2b3c5
 8004050:	aaaaaaab 	.word	0xaaaaaaab
 8004054:	00015180 	.word	0x00015180

08004058 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	2100      	movs	r1, #0
 800406a:	460a      	mov	r2, r1
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	460a      	mov	r2, r1
 8004070:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_RTC_GetDate+0x26>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03a      	b.n	80040f8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004082:	f107 0314 	add.w	r3, r7, #20
 8004086:	2200      	movs	r2, #0
 8004088:	4619      	mov	r1, r3
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fe56 	bl	8003d3c <HAL_RTC_GetTime>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e02e      	b.n	80040f8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	7b1a      	ldrb	r2, [r3, #12]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	7bda      	ldrb	r2, [r3, #15]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	7b5a      	ldrb	r2, [r3, #13]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	7b9a      	ldrb	r2, [r3, #14]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	78db      	ldrb	r3, [r3, #3]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f92f 	bl	8004328 <RTC_ByteToBcd2>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f926 	bl	8004328 <RTC_ByteToBcd2>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	789b      	ldrb	r3, [r3, #2]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f91d 	bl	8004328 <RTC_ByteToBcd2>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e01d      	b.n	8004152 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004126:	f7fd ffb7 	bl	8002098 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800412c:	e009      	b.n	8004142 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800412e:	f7fd ffb3 	bl	8002098 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800413c:	d901      	bls.n	8004142 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e007      	b.n	8004152 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ee      	beq.n	800412e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	827b      	strh	r3, [r7, #18]
 8004166:	2300      	movs	r3, #0
 8004168:	823b      	strh	r3, [r7, #16]
 800416a:	2300      	movs	r3, #0
 800416c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800418a:	8a7a      	ldrh	r2, [r7, #18]
 800418c:	8a3b      	ldrh	r3, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d008      	beq.n	80041a4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004192:	8a3b      	ldrh	r3, [r7, #16]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	b29b      	uxth	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e004      	b.n	80041ae <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80041a4:	8a7b      	ldrh	r3, [r7, #18]
 80041a6:	041a      	lsls	r2, r3, #16
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80041ae:	697b      	ldr	r3, [r7, #20]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f85d 	bl	8004288 <RTC_EnterInitMode>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e011      	b.n	80041fe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	0c12      	lsrs	r2, r2, #16
 80041e2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b292      	uxth	r2, r2
 80041ec:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f872 	bl	80042d8 <RTC_ExitInitMode>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	81fb      	strh	r3, [r7, #14]
 8004214:	2300      	movs	r3, #0
 8004216:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004228:	89fb      	ldrh	r3, [r7, #14]
 800422a:	041a      	lsls	r2, r3, #16
 800422c:	89bb      	ldrh	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f81d 	bl	8004288 <RTC_EnterInitMode>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e011      	b.n	800427e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	0c12      	lsrs	r2, r2, #16
 8004262:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b292      	uxth	r2, r2
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f832 	bl	80042d8 <RTC_ExitInitMode>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004294:	f7fd ff00 	bl	8002098 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800429a:	e009      	b.n	80042b0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800429c:	f7fd fefc 	bl	8002098 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042aa:	d901      	bls.n	80042b0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e00f      	b.n	80042d0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0210 	orr.w	r2, r2, #16
 80042cc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0210 	bic.w	r2, r2, #16
 80042f2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042f4:	f7fd fed0 	bl	8002098 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042fa:	e009      	b.n	8004310 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042fc:	f7fd fecc 	bl	8002098 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430a:	d901      	bls.n	8004310 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e007      	b.n	8004320 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ee      	beq.n	80042fc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004336:	e005      	b.n	8004344 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	3b0a      	subs	r3, #10
 8004342:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b09      	cmp	r3, #9
 8004348:	d8f6      	bhi.n	8004338 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	b2da      	uxtb	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	4313      	orrs	r3, r2
 8004356:	b2db      	uxtb	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	4413      	add	r3, r2
 8004390:	b2db      	uxtb	r3, r3
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7bdb      	ldrb	r3, [r3, #15]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7b5b      	ldrb	r3, [r3, #13]
 80043c0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7b9b      	ldrb	r3, [r3, #14]
 80043c6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	e06f      	b.n	80044ae <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d011      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d00e      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d00b      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b07      	cmp	r3, #7
 80043e4:	d008      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d005      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b0a      	cmp	r3, #10
 80043f0:	d002      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d117      	bne.n	8004428 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b1e      	cmp	r3, #30
 80043fc:	d803      	bhi.n	8004406 <RTC_DateUpdate+0x6a>
      {
        day++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004404:	e050      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d005      	beq.n	8004418 <RTC_DateUpdate+0x7c>
        {
          month++;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3301      	adds	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004412:	2301      	movs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004416:	e047      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
          year++;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3301      	adds	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004426:	e03f      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d008      	beq.n	8004440 <RTC_DateUpdate+0xa4>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d005      	beq.n	8004440 <RTC_DateUpdate+0xa4>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b09      	cmp	r3, #9
 8004438:	d002      	beq.n	8004440 <RTC_DateUpdate+0xa4>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b0b      	cmp	r3, #11
 800443e:	d10c      	bne.n	800445a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b1d      	cmp	r3, #29
 8004444:	d803      	bhi.n	800444e <RTC_DateUpdate+0xb2>
      {
        day++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800444c:	e02c      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004458:	e026      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d123      	bne.n	80044a8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b1b      	cmp	r3, #27
 8004464:	d803      	bhi.n	800446e <RTC_DateUpdate+0xd2>
      {
        day++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e01c      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b1c      	cmp	r3, #28
 8004472:	d111      	bne.n	8004498 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b29b      	uxth	r3, r3
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f839 	bl	80044f0 <RTC_IsLeapYear>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <RTC_DateUpdate+0xf0>
        {
          day++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e00d      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3301      	adds	r3, #1
 8004490:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e007      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b1d      	cmp	r3, #29
 800449c:	d104      	bne.n	80044a8 <RTC_DateUpdate+0x10c>
      {
        month++;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3301      	adds	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80044a4:	2301      	movs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d38b      	bcc.n	80043ce <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	6978      	ldr	r0, [r7, #20]
 80044da:	f000 f83b 	bl	8004554 <RTC_WeekDayNum>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	731a      	strb	r2, [r3, #12]
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	e01d      	b.n	8004546 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	4a10      	ldr	r2, [pc, #64]	; (8004550 <RTC_IsLeapYear+0x60>)
 800450e:	fba2 1203 	umull	r1, r2, r2, r3
 8004512:	0952      	lsrs	r2, r2, #5
 8004514:	2164      	movs	r1, #100	; 0x64
 8004516:	fb01 f202 	mul.w	r2, r1, r2
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004522:	2301      	movs	r3, #1
 8004524:	e00f      	b.n	8004546 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <RTC_IsLeapYear+0x60>)
 800452a:	fba2 1203 	umull	r1, r2, r2, r3
 800452e:	09d2      	lsrs	r2, r2, #7
 8004530:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004534:	fb01 f202 	mul.w	r2, r1, r2
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004544:	2300      	movs	r3, #0
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	51eb851f 	.word	0x51eb851f

08004554 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
 8004560:	4613      	mov	r3, r2
 8004562:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004572:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d82d      	bhi.n	80045d6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <RTC_WeekDayNum+0xe4>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	085a      	lsrs	r2, r3, #1
 800458e:	78bb      	ldrb	r3, [r7, #2]
 8004590:	441a      	add	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	441a      	add	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3b01      	subs	r3, #1
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4926      	ldr	r1, [pc, #152]	; (800463c <RTC_WeekDayNum+0xe8>)
 80045a4:	fba1 1303 	umull	r1, r3, r1, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	4922      	ldr	r1, [pc, #136]	; (800463c <RTC_WeekDayNum+0xe8>)
 80045b2:	fba1 1303 	umull	r1, r3, r1, r3
 80045b6:	09db      	lsrs	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <RTC_WeekDayNum+0xec>)
 80045be:	fba3 1302 	umull	r1, r3, r3, r2
 80045c2:	1ad1      	subs	r1, r2, r3
 80045c4:	0849      	lsrs	r1, r1, #1
 80045c6:	440b      	add	r3, r1
 80045c8:	0899      	lsrs	r1, r3, #2
 80045ca:	460b      	mov	r3, r1
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e029      	b.n	800462a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	4a15      	ldr	r2, [pc, #84]	; (8004638 <RTC_WeekDayNum+0xe4>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	085a      	lsrs	r2, r3, #1
 80045ea:	78bb      	ldrb	r3, [r7, #2]
 80045ec:	441a      	add	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	441a      	add	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4910      	ldr	r1, [pc, #64]	; (800463c <RTC_WeekDayNum+0xe8>)
 80045fc:	fba1 1303 	umull	r1, r3, r1, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	490d      	ldr	r1, [pc, #52]	; (800463c <RTC_WeekDayNum+0xe8>)
 8004608:	fba1 1303 	umull	r1, r3, r1, r3
 800460c:	09db      	lsrs	r3, r3, #7
 800460e:	4413      	add	r3, r2
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <RTC_WeekDayNum+0xec>)
 8004614:	fba3 1302 	umull	r1, r3, r3, r2
 8004618:	1ad1      	subs	r1, r2, r3
 800461a:	0849      	lsrs	r1, r1, #1
 800461c:	440b      	add	r3, r1
 800461e:	0899      	lsrs	r1, r3, #2
 8004620:	460b      	mov	r3, r1
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a5b      	subs	r3, r3, r1
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b2db      	uxtb	r3, r3
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	38e38e39 	.word	0x38e38e39
 800463c:	51eb851f 	.word	0x51eb851f
 8004640:	24924925 	.word	0x24924925

08004644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e076      	b.n	8004744 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d009      	beq.n	800467c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
 800466e:	e005      	b.n	800467c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd faca 	bl	8001c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	0c1a      	lsrs	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f002 0204 	and.w	r2, r2, #4
 8004722:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004732:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_SPI_Transmit+0x22>
 800476a:	2302      	movs	r3, #2
 800476c:	e12d      	b.n	80049ca <HAL_SPI_Transmit+0x27e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004776:	f7fd fc8f 	bl	8002098 <HAL_GetTick>
 800477a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800478c:	2302      	movs	r3, #2
 800478e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004790:	e116      	b.n	80049c0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_SPI_Transmit+0x52>
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047a2:	e10d      	b.n	80049c0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2203      	movs	r2, #3
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ea:	d10f      	bne.n	800480c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d007      	beq.n	800482a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004832:	d14f      	bne.n	80048d4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_SPI_Transmit+0xf6>
 800483c:	8afb      	ldrh	r3, [r7, #22]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d142      	bne.n	80048c8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004866:	e02f      	b.n	80048c8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d112      	bne.n	800489c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	86da      	strh	r2, [r3, #54]	; 0x36
 800489a:	e015      	b.n	80048c8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489c:	f7fd fbfc 	bl	8002098 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d803      	bhi.n	80048b4 <HAL_SPI_Transmit+0x168>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_Transmit+0x16e>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048c6:	e07b      	b.n	80049c0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ca      	bne.n	8004868 <HAL_SPI_Transmit+0x11c>
 80048d2:	e050      	b.n	8004976 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_Transmit+0x196>
 80048dc:	8afb      	ldrh	r3, [r7, #22]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d144      	bne.n	800496c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004908:	e030      	b.n	800496c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d113      	bne.n	8004940 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	7812      	ldrb	r2, [r2, #0]
 8004924:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	86da      	strh	r2, [r3, #54]	; 0x36
 800493e:	e015      	b.n	800496c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004940:	f7fd fbaa 	bl	8002098 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d803      	bhi.n	8004958 <HAL_SPI_Transmit+0x20c>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d102      	bne.n	800495e <HAL_SPI_Transmit+0x212>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800496a:	e029      	b.n	80049c0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1c9      	bne.n	800490a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fbcc 	bl	8005118 <SPI_EndRxTxTransaction>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e003      	b.n	80049c0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b088      	sub	sp, #32
 80049d6:	af02      	add	r7, sp, #8
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
 80049f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049f6:	e0fb      	b.n	8004bf0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a00:	d112      	bne.n	8004a28 <HAL_SPI_Receive+0x56>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10e      	bne.n	8004a28 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f8ef 	bl	8004c02 <HAL_SPI_TransmitReceive>
 8004a24:	4603      	mov	r3, r0
 8004a26:	e0e8      	b.n	8004bfa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_SPI_Receive+0x64>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0e1      	b.n	8004bfa <HAL_SPI_Receive+0x228>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a3e:	f7fd fb2b 	bl	8002098 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Receive+0x7e>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a54:	e0cc      	b.n	8004bf0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	d10f      	bne.n	8004abe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004abc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d007      	beq.n	8004adc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d16a      	bne.n	8004bba <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ae4:	e032      	b.n	8004b4c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d115      	bne.n	8004b20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f103 020c 	add.w	r2, r3, #12
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b1e:	e015      	b.n	8004b4c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b20:	f7fd faba 	bl	8002098 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d803      	bhi.n	8004b38 <HAL_SPI_Receive+0x166>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Receive+0x16c>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b4a:	e051      	b.n	8004bf0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1c7      	bne.n	8004ae6 <HAL_SPI_Receive+0x114>
 8004b56:	e035      	b.n	8004bc4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d113      	bne.n	8004b8e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b8c:	e015      	b.n	8004bba <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8e:	f7fd fa83 	bl	8002098 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d803      	bhi.n	8004ba6 <HAL_SPI_Receive+0x1d4>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d102      	bne.n	8004bac <HAL_SPI_Receive+0x1da>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bb8:	e01a      	b.n	8004bf0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1c9      	bne.n	8004b58 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa53 	bl	8005074 <SPI_EndRxTransaction>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
 8004be6:	e003      	b.n	8004bf0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b08c      	sub	sp, #48	; 0x30
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c10:	2301      	movs	r3, #1
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x26>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e198      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x358>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c30:	f7fd fa32 	bl	8002098 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d00f      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x70>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c58:	d107      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x68>
 8004c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d003      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c70:	e16d      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x82>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x82>
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8a:	e160      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d003      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d007      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfc:	d17c      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x10a>
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d16a      	bne.n	8004de2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d30:	e057      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d11b      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d113      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d119      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x1b8>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d014      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db6:	2301      	movs	r3, #1
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dba:	f7fd f96d 	bl	8002098 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d80b      	bhi.n	8004de2 <HAL_SPI_TransmitReceive+0x1e0>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d007      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004de0:	e0b5      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1a2      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x130>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d19d      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x130>
 8004df6:	e080      	b.n	8004efa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x204>
 8004e00:	8b7b      	ldrh	r3, [r7, #26]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d16f      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e2c:	e05b      	b.n	8004ee6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d11c      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x274>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x274>
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d114      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	7812      	ldrb	r2, [r2, #0]
 8004e58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d119      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x2b6>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb8:	f7fd f8ee 	bl	8002098 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d803      	bhi.n	8004ed0 <HAL_SPI_TransmitReceive+0x2ce>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004ee4:	e033      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d19e      	bne.n	8004e2e <HAL_SPI_TransmitReceive+0x22c>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d199      	bne.n	8004e2e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f90a 	bl	8005118 <SPI_EndRxTxTransaction>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f16:	e01a      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f44:	e003      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3730      	adds	r7, #48	; 0x30
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f74:	f7fd f890 	bl	8002098 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f84:	f7fd f888 	bl	8002098 <HAL_GetTick>
 8004f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	e054      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d050      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa4:	f7fd f878 	bl	8002098 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13d      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd2:	d111      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d004      	beq.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d107      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005000:	d10f      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e017      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3b01      	subs	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d19b      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000008 	.word	0x20000008

08005074 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005088:	d111      	bne.n	80050ae <SPI_EndRxTransaction+0x3a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005092:	d004      	beq.n	800509e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509c:	d107      	bne.n	80050ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b6:	d117      	bne.n	80050e8 <SPI_EndRxTransaction+0x74>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d112      	bne.n	80050e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2101      	movs	r1, #1
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff ff49 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01a      	beq.n	800510e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e013      	b.n	8005110 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	2180      	movs	r1, #128	; 0x80
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ff36 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e000      	b.n	8005110 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	; 0x80
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff18 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e000      	b.n	800514c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e041      	b.n	80051ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fda4 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 f998 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x24>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e022      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d109      	bne.n	8005232 <HAL_TIM_PWM_Start+0x3e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e015      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x58>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e008      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e05e      	b.n	8005324 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0x82>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	e013      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0x92>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	e00b      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005294:	e003      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa06 	bl	80056b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_TIM_PWM_Start+0x138>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIM_PWM_Start+0x138>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIM_PWM_Start+0xfa>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d009      	beq.n	80052ee <HAL_TIM_PWM_Start+0xfa>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a14      	ldr	r2, [pc, #80]	; (8005330 <HAL_TIM_PWM_Start+0x13c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIM_PWM_Start+0xfa>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a12      	ldr	r2, [pc, #72]	; (8005334 <HAL_TIM_PWM_Start+0x140>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d111      	bne.n	8005312 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d010      	beq.n	8005322 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005310:	e007      	b.n	8005322 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800

08005338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIM_ConfigClockSource+0x1c>
 8005350:	2302      	movs	r3, #2
 8005352:	e0b4      	b.n	80054be <HAL_TIM_ConfigClockSource+0x186>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538c:	d03e      	beq.n	800540c <HAL_TIM_ConfigClockSource+0xd4>
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	f200 8087 	bhi.w	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	f000 8086 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x172>
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a2:	d87f      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b70      	cmp	r3, #112	; 0x70
 80053a6:	d01a      	beq.n	80053de <HAL_TIM_ConfigClockSource+0xa6>
 80053a8:	2b70      	cmp	r3, #112	; 0x70
 80053aa:	d87b      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b60      	cmp	r3, #96	; 0x60
 80053ae:	d050      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x11a>
 80053b0:	2b60      	cmp	r3, #96	; 0x60
 80053b2:	d877      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b50      	cmp	r3, #80	; 0x50
 80053b6:	d03c      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0xfa>
 80053b8:	2b50      	cmp	r3, #80	; 0x50
 80053ba:	d873      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d058      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x13a>
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d86f      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b30      	cmp	r3, #48	; 0x30
 80053c6:	d064      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	2b30      	cmp	r3, #48	; 0x30
 80053ca:	d86b      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d060      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d867      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d05c      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d05a      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053dc:	e062      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	f000 f944 	bl	800567a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]
      break;
 800540a:	e04f      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800541c:	f000 f92d 	bl	800567a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800542e:	609a      	str	r2, [r3, #8]
      break;
 8005430:	e03c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	461a      	mov	r2, r3
 8005440:	f000 f8a4 	bl	800558c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2150      	movs	r1, #80	; 0x50
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f8fb 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 8005450:	e02c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545e:	461a      	mov	r2, r3
 8005460:	f000 f8c2 	bl	80055e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2160      	movs	r1, #96	; 0x60
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f8eb 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 8005470:	e01c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	461a      	mov	r2, r3
 8005480:	f000 f884 	bl	800558c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2140      	movs	r1, #64	; 0x40
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f8db 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 8005490:	e00c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f000 f8d2 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 80054a2:	e003      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
      break;
 80054a8:	e000      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a29      	ldr	r2, [pc, #164]	; (8005580 <TIM_Base_SetConfig+0xb8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_Base_SetConfig+0x30>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d007      	beq.n	80054f8 <TIM_Base_SetConfig+0x30>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <TIM_Base_SetConfig+0xbc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_Base_SetConfig+0x30>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a25      	ldr	r2, [pc, #148]	; (8005588 <TIM_Base_SetConfig+0xc0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d108      	bne.n	800550a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <TIM_Base_SetConfig+0xb8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_Base_SetConfig+0x62>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d007      	beq.n	800552a <TIM_Base_SetConfig+0x62>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a19      	ldr	r2, [pc, #100]	; (8005584 <TIM_Base_SetConfig+0xbc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_Base_SetConfig+0x62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a18      	ldr	r2, [pc, #96]	; (8005588 <TIM_Base_SetConfig+0xc0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a07      	ldr	r2, [pc, #28]	; (8005580 <TIM_Base_SetConfig+0xb8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800

0800558c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 030a 	bic.w	r3, r3, #10
 80055c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0210 	bic.w	r2, r3, #16
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	031b      	lsls	r3, r3, #12
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005624:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	f043 0307 	orr.w	r3, r3, #7
 8005668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	021a      	lsls	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	431a      	orrs	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	609a      	str	r2, [r3, #8]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2201      	movs	r2, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005714:	2302      	movs	r3, #2
 8005716:	e046      	b.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d009      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10c      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4313      	orrs	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800

080057bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e042      	b.n	8005854 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc fa8c 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f82b 	bl	800585c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005896:	f023 030c 	bic.w	r3, r3, #12
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <UART_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d103      	bne.n	80058cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fd ff78 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	e002      	b.n	80058d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058cc:	f7fd ff60 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 80058d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009a      	lsls	r2, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	4a22      	ldr	r2, [pc, #136]	; (8005974 <UART_SetConfig+0x118>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	0119      	lsls	r1, r3, #4
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009a      	lsls	r2, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	fbb2 f2f3 	udiv	r2, r2, r3
 8005908:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <UART_SetConfig+0x118>)
 800590a:	fba3 0302 	umull	r0, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2064      	movs	r0, #100	; 0x64
 8005912:	fb00 f303 	mul.w	r3, r0, r3
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	3332      	adds	r3, #50	; 0x32
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <UART_SetConfig+0x118>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005928:	4419      	add	r1, r3
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009a      	lsls	r2, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <UART_SetConfig+0x118>)
 8005942:	fba3 0302 	umull	r0, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2064      	movs	r0, #100	; 0x64
 800594a:	fb00 f303 	mul.w	r3, r0, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a07      	ldr	r2, [pc, #28]	; (8005974 <UART_SetConfig+0x118>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	440a      	add	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40013800 	.word	0x40013800
 8005974:	51eb851f 	.word	0x51eb851f

08005978 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	4618      	mov	r0, r3
 8005986:	f7fc fb91 	bl	80020ac <HAL_Delay>
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af02      	add	r7, sp, #8
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	70fb      	strb	r3, [r7, #3]
 800599e:	4613      	mov	r3, r2
 80059a0:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f023 030f 	bic.w	r3, r3, #15
 80059a8:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7adb      	ldrb	r3, [r3, #11]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	f043 0308 	orr.w	r3, r3, #8
 80059be:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	f043 0308 	orr.w	r3, r3, #8
 80059c6:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80059c8:	78bb      	ldrb	r3, [r7, #2]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d108      	bne.n	80059e0 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	73bb      	strb	r3, [r7, #14]
 80059de:	e00a      	b.n	80059f6 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80059e0:	78bb      	ldrb	r3, [r7, #2]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d107      	bne.n	80059f6 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	f043 0304 	orr.w	r3, r3, #4
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7ff ffb9 	bl	8005978 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8005a0a:	7bbb      	ldrb	r3, [r7, #14]
 8005a0c:	f043 0304 	orr.w	r3, r3, #4
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8005a14:	2001      	movs	r0, #1
 8005a16:	f7ff ffaf 	bl	8005978 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	791b      	ldrb	r3, [r3, #4]
 8005a26:	b299      	uxth	r1, r3
 8005a28:	f107 0208 	add.w	r2, r7, #8
 8005a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	2304      	movs	r3, #4
 8005a34:	f7fc ff7e 	bl	8002934 <HAL_I2C_Master_Transmit>
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	460b      	mov	r3, r1
 8005a50:	71fb      	strb	r3, [r7, #7]
 8005a52:	4613      	mov	r3, r2
 8005a54:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	79fa      	ldrb	r2, [r7, #7]
 8005a60:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	79ba      	ldrb	r2, [r7, #6]
 8005a66:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	7e3a      	ldrb	r2, [r7, #24]
 8005a6c:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2228      	movs	r2, #40	; 0x28
 8005a72:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2206      	movs	r2, #6
 8005a78:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2214      	movs	r2, #20
 8005a84:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8005a8c:	2032      	movs	r0, #50	; 0x32
 8005a8e:	f7ff ff73 	bl	8005978 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2133      	movs	r1, #51	; 0x33
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff ff7b 	bl	8005992 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2133      	movs	r1, #51	; 0x33
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff ff76 	bl	8005992 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005aa6:	2005      	movs	r0, #5
 8005aa8:	f7ff ff66 	bl	8005978 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8005aac:	2200      	movs	r2, #0
 8005aae:	2132      	movs	r1, #50	; 0x32
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ff6e 	bl	8005992 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005ab6:	2005      	movs	r0, #5
 8005ab8:	f7ff ff5e 	bl	8005978 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8005abc:	2200      	movs	r2, #0
 8005abe:	2120      	movs	r1, #32
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff ff66 	bl	8005992 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005ac6:	2005      	movs	r0, #5
 8005ac8:	f7ff ff56 	bl	8005978 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	79db      	ldrb	r3, [r3, #7]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff5c 	bl	8005992 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	7a1b      	ldrb	r3, [r3, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ff55 	bl	8005992 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	7a5b      	ldrb	r3, [r3, #9]
 8005aec:	2200      	movs	r2, #0
 8005aee:	4619      	mov	r1, r3
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff ff4e 	bl	8005992 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	7a9b      	ldrb	r3, [r3, #10]
 8005afa:	2200      	movs	r2, #0
 8005afc:	4619      	mov	r1, r3
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ff47 	bl	8005992 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8005b04:	2200      	movs	r2, #0
 8005b06:	2101      	movs	r1, #1
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff ff42 	bl	8005992 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2102      	movs	r1, #2
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff ff3d 	bl	8005992 <CLCD_WriteI2C>
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	795b      	ldrb	r3, [r3, #5]
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d303      	bcc.n	8005b46 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	795b      	ldrb	r3, [r3, #5]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	799b      	ldrb	r3, [r3, #6]
 8005b4a:	78ba      	ldrb	r2, [r7, #2]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d303      	bcc.n	8005b58 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	799b      	ldrb	r3, [r3, #6]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8005b58:	78bb      	ldrb	r3, [r7, #2]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	73fb      	strb	r3, [r7, #15]
 8005b62:	e013      	b.n	8005b8c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8005b64:	78bb      	ldrb	r3, [r7, #2]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d103      	bne.n	8005b72 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	3340      	adds	r3, #64	; 0x40
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e00c      	b.n	8005b8c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8005b72:	78bb      	ldrb	r3, [r7, #2]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d103      	bne.n	8005b80 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	73fb      	strb	r3, [r7, #15]
 8005b7e:	e005      	b.n	8005b8c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8005b80:	78bb      	ldrb	r3, [r7, #2]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d102      	bne.n	8005b8c <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	3354      	adds	r3, #84	; 0x54
 8005b8a:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2200      	movs	r2, #0
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fefa 	bl	8005992 <CLCD_WriteI2C>
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff feea 	bl	8005992 <CLCD_WriteI2C>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8005bd0:	e007      	b.n	8005be2 <CLCD_I2C_WriteString+0x1c>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	603a      	str	r2, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ffe2 	bl	8005ba6 <CLCD_I2C_WriteChar>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f3      	bne.n	8005bd2 <CLCD_I2C_WriteString+0xc>
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2101      	movs	r1, #1
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fec6 	bl	8005992 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005c06:	2005      	movs	r0, #5
 8005c08:	f7ff feb6 	bl	8005978 <CLCD_Delay>
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <initApp>:

extern CLCD_I2C_Name LCD1;
extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c1;

void initApp(void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af02      	add	r7, sp, #8
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	4809      	ldr	r0, [pc, #36]	; (8005c44 <initApp+0x30>)
 8005c1e:	f7ff fae9 	bl	80051f4 <HAL_TIM_PWM_Start>

	CLCD_I2C_Init(&LCD1, &hi2c1, 0x7E, 20, 4);
 8005c22:	2304      	movs	r3, #4
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	2314      	movs	r3, #20
 8005c28:	227e      	movs	r2, #126	; 0x7e
 8005c2a:	4907      	ldr	r1, [pc, #28]	; (8005c48 <initApp+0x34>)
 8005c2c:	4807      	ldr	r0, [pc, #28]	; (8005c4c <initApp+0x38>)
 8005c2e:	f7ff ff07 	bl	8005a40 <CLCD_I2C_Init>

	HAL_GPIO_WritePin(LED_LCD_GPIO_Port, LED_LCD_Pin, GPIO_PIN_SET);
 8005c32:	2201      	movs	r2, #1
 8005c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c38:	4805      	ldr	r0, [pc, #20]	; (8005c50 <initApp+0x3c>)
 8005c3a:	f7fc fced 	bl	8002618 <HAL_GPIO_WritePin>
}
 8005c3e:	bf00      	nop
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200002bc 	.word	0x200002bc
 8005c48:	200001fc 	.word	0x200001fc
 8005c4c:	2000034c 	.word	0x2000034c
 8005c50:	40010c00 	.word	0x40010c00

08005c54 <mainMenu>:

void mainMenu(void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
	//CLCD_I2C_Clear(&LCD1);
	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4811      	ldr	r0, [pc, #68]	; (8005ca4 <mainMenu+0x50>)
 8005c5e:	f7ff ff5f 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "SET TEM POINT:");
 8005c62:	4911      	ldr	r1, [pc, #68]	; (8005ca8 <mainMenu+0x54>)
 8005c64:	480f      	ldr	r0, [pc, #60]	; (8005ca4 <mainMenu+0x50>)
 8005c66:	f7ff ffae 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	480d      	ldr	r0, [pc, #52]	; (8005ca4 <mainMenu+0x50>)
 8005c70:	f7ff ff56 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "REAL VALUE:");
 8005c74:	490d      	ldr	r1, [pc, #52]	; (8005cac <mainMenu+0x58>)
 8005c76:	480b      	ldr	r0, [pc, #44]	; (8005ca4 <mainMenu+0x50>)
 8005c78:	f7ff ffa5 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4808      	ldr	r0, [pc, #32]	; (8005ca4 <mainMenu+0x50>)
 8005c82:	f7ff ff4d 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "TIME RUNNER:");
 8005c86:	490a      	ldr	r1, [pc, #40]	; (8005cb0 <mainMenu+0x5c>)
 8005c88:	4806      	ldr	r0, [pc, #24]	; (8005ca4 <mainMenu+0x50>)
 8005c8a:	f7ff ff9c 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8005c8e:	2203      	movs	r2, #3
 8005c90:	2100      	movs	r1, #0
 8005c92:	4804      	ldr	r0, [pc, #16]	; (8005ca4 <mainMenu+0x50>)
 8005c94:	f7ff ff44 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "STATUS:");
 8005c98:	4906      	ldr	r1, [pc, #24]	; (8005cb4 <mainMenu+0x60>)
 8005c9a:	4802      	ldr	r0, [pc, #8]	; (8005ca4 <mainMenu+0x50>)
 8005c9c:	f7ff ff93 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005ca0:	bf00      	nop
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	2000034c 	.word	0x2000034c
 8005ca8:	0800a888 	.word	0x0800a888
 8005cac:	0800a898 	.word	0x0800a898
 8005cb0:	0800a8a4 	.word	0x0800a8a4
 8005cb4:	0800a8b4 	.word	0x0800a8b4

08005cb8 <mainPower>:

void mainPower(void) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	//CLCD_I2C_Clear(&LCD1);
	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4811      	ldr	r0, [pc, #68]	; (8005d08 <mainPower+0x50>)
 8005cc2:	f7ff ff2d 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "SET POWER POINT:");
 8005cc6:	4911      	ldr	r1, [pc, #68]	; (8005d0c <mainPower+0x54>)
 8005cc8:	480f      	ldr	r0, [pc, #60]	; (8005d08 <mainPower+0x50>)
 8005cca:	f7ff ff7c 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8005cce:	2201      	movs	r2, #1
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	480d      	ldr	r0, [pc, #52]	; (8005d08 <mainPower+0x50>)
 8005cd4:	f7ff ff24 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "REAL VALUE:");
 8005cd8:	490d      	ldr	r1, [pc, #52]	; (8005d10 <mainPower+0x58>)
 8005cda:	480b      	ldr	r0, [pc, #44]	; (8005d08 <mainPower+0x50>)
 8005cdc:	f7ff ff73 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4808      	ldr	r0, [pc, #32]	; (8005d08 <mainPower+0x50>)
 8005ce6:	f7ff ff1b 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "TIME RUNNER:");
 8005cea:	490a      	ldr	r1, [pc, #40]	; (8005d14 <mainPower+0x5c>)
 8005cec:	4806      	ldr	r0, [pc, #24]	; (8005d08 <mainPower+0x50>)
 8005cee:	f7ff ff6a 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4804      	ldr	r0, [pc, #16]	; (8005d08 <mainPower+0x50>)
 8005cf8:	f7ff ff12 	bl	8005b20 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, "STATUS:   RUN");
 8005cfc:	4906      	ldr	r1, [pc, #24]	; (8005d18 <mainPower+0x60>)
 8005cfe:	4802      	ldr	r0, [pc, #8]	; (8005d08 <mainPower+0x50>)
 8005d00:	f7ff ff61 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	2000034c 	.word	0x2000034c
 8005d0c:	0800a8bc 	.word	0x0800a8bc
 8005d10:	0800a898 	.word	0x0800a898
 8005d14:	0800a8a4 	.word	0x0800a8a4
 8005d18:	0800a8d0 	.word	0x0800a8d0

08005d1c <updateSetpoint>:

void updateSetpoint(uint16_t temp) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	80fb      	strh	r3, [r7, #6]
	CLCD_I2C_SetCursor(&LCD1, 15, 0);
 8005d26:	2200      	movs	r2, #0
 8005d28:	210f      	movs	r1, #15
 8005d2a:	480a      	ldr	r0, [pc, #40]	; (8005d54 <updateSetpoint+0x38>)
 8005d2c:	f7ff fef8 	bl	8005b20 <CLCD_I2C_SetCursor>
	char buffer[5];
	sprintf(buffer, "%04i", temp);
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4908      	ldr	r1, [pc, #32]	; (8005d58 <updateSetpoint+0x3c>)
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 f90f 	bl	8006f5c <siprintf>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8005d3e:	f107 0308 	add.w	r3, r7, #8
 8005d42:	4619      	mov	r1, r3
 8005d44:	4803      	ldr	r0, [pc, #12]	; (8005d54 <updateSetpoint+0x38>)
 8005d46:	f7ff ff3e 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2000034c 	.word	0x2000034c
 8005d58:	0800a8e0 	.word	0x0800a8e0

08005d5c <updateRealValue>:

void updateRealValue(uint16_t temp) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	80fb      	strh	r3, [r7, #6]
	CLCD_I2C_SetCursor(&LCD1, 15, 1);
 8005d66:	2201      	movs	r2, #1
 8005d68:	210f      	movs	r1, #15
 8005d6a:	480a      	ldr	r0, [pc, #40]	; (8005d94 <updateRealValue+0x38>)
 8005d6c:	f7ff fed8 	bl	8005b20 <CLCD_I2C_SetCursor>
	char buffer[5];
	sprintf(buffer, "%04i", temp);
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	f107 0308 	add.w	r3, r7, #8
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <updateRealValue+0x3c>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f8ef 	bl	8006f5c <siprintf>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8005d7e:	f107 0308 	add.w	r3, r7, #8
 8005d82:	4619      	mov	r1, r3
 8005d84:	4803      	ldr	r0, [pc, #12]	; (8005d94 <updateRealValue+0x38>)
 8005d86:	f7ff ff1e 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000034c 	.word	0x2000034c
 8005d98:	0800a8e0 	.word	0x0800a8e0

08005d9c <updatePowerpoint>:

void updatePowerpoint(float temp) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	CLCD_I2C_SetCursor(&LCD1, 16, 0);
 8005da4:	2200      	movs	r2, #0
 8005da6:	2110      	movs	r1, #16
 8005da8:	480b      	ldr	r0, [pc, #44]	; (8005dd8 <updatePowerpoint+0x3c>)
 8005daa:	f7ff feb9 	bl	8005b20 <CLCD_I2C_SetCursor>
	char buffer[5];
	sprintf(buffer, "%02.2f", temp);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fa fbee 	bl	8000590 <__aeabi_f2d>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	f107 0008 	add.w	r0, r7, #8
 8005dbc:	4907      	ldr	r1, [pc, #28]	; (8005ddc <updatePowerpoint+0x40>)
 8005dbe:	f001 f8cd 	bl	8006f5c <siprintf>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8005dc2:	f107 0308 	add.w	r3, r7, #8
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4803      	ldr	r0, [pc, #12]	; (8005dd8 <updatePowerpoint+0x3c>)
 8005dca:	f7ff fefc 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005dce:	bf00      	nop
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	2000034c 	.word	0x2000034c
 8005ddc:	0800a8e8 	.word	0x0800a8e8

08005de0 <updateStatus>:

void updateStatus(uint8_t status) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_SetCursor(&LCD1, 13, 3);
 8005dea:	2203      	movs	r2, #3
 8005dec:	210d      	movs	r1, #13
 8005dee:	480a      	ldr	r0, [pc, #40]	; (8005e18 <updateStatus+0x38>)
 8005df0:	f7ff fe96 	bl	8005b20 <CLCD_I2C_SetCursor>
	if (status == 0)
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <updateStatus+0x22>
		CLCD_I2C_WriteString(&LCD1, "STOP");
 8005dfa:	4908      	ldr	r1, [pc, #32]	; (8005e1c <updateStatus+0x3c>)
 8005dfc:	4806      	ldr	r0, [pc, #24]	; (8005e18 <updateStatus+0x38>)
 8005dfe:	f7ff fee2 	bl	8005bc6 <CLCD_I2C_WriteString>
	if (status == 1)
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d103      	bne.n	8005e10 <updateStatus+0x30>
		CLCD_I2C_WriteString(&LCD1, "RUN ");
 8005e08:	4905      	ldr	r1, [pc, #20]	; (8005e20 <updateStatus+0x40>)
 8005e0a:	4803      	ldr	r0, [pc, #12]	; (8005e18 <updateStatus+0x38>)
 8005e0c:	f7ff fedb 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	2000034c 	.word	0x2000034c
 8005e1c:	0800a8f0 	.word	0x0800a8f0
 8005e20:	0800a8f8 	.word	0x0800a8f8

08005e24 <initTime>:

void initTime(void) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
	HAL_RTC_Init(&hrtc);
 8005e28:	4809      	ldr	r0, [pc, #36]	; (8005e50 <initTime+0x2c>)
 8005e2a:	f7fd fe63 	bl	8003af4 <HAL_RTC_Init>
	HTime.Hours = 0;
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <initTime+0x30>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
	HTime.Minutes = 0;
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <initTime+0x30>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	705a      	strb	r2, [r3, #1]
	HTime.Seconds = 0;
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <initTime+0x30>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 8005e40:	2200      	movs	r2, #0
 8005e42:	4904      	ldr	r1, [pc, #16]	; (8005e54 <initTime+0x30>)
 8005e44:	4802      	ldr	r0, [pc, #8]	; (8005e50 <initTime+0x2c>)
 8005e46:	f7fd fee1 	bl	8003c0c <HAL_RTC_SetTime>
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000250 	.word	0x20000250
 8005e54:	200003bc 	.word	0x200003bc

08005e58 <updateTime>:

void updateTime(void) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
	char buffer[10];

	HAL_RTC_GetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4921      	ldr	r1, [pc, #132]	; (8005ee8 <updateTime+0x90>)
 8005e62:	4822      	ldr	r0, [pc, #136]	; (8005eec <updateTime+0x94>)
 8005e64:	f7fd ff6a 	bl	8003d3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &HDate, RTC_FORMAT_BIN);
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4921      	ldr	r1, [pc, #132]	; (8005ef0 <updateTime+0x98>)
 8005e6c:	481f      	ldr	r0, [pc, #124]	; (8005eec <updateTime+0x94>)
 8005e6e:	f7fe f8f3 	bl	8004058 <HAL_RTC_GetDate>

	CLCD_I2C_SetCursor(&LCD1, 12, 2);
 8005e72:	2202      	movs	r2, #2
 8005e74:	210c      	movs	r1, #12
 8005e76:	481f      	ldr	r0, [pc, #124]	; (8005ef4 <updateTime+0x9c>)
 8005e78:	f7ff fe52 	bl	8005b20 <CLCD_I2C_SetCursor>
	sprintf(buffer, "%02d:", HTime.Hours);
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <updateTime+0x90>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	491c      	ldr	r1, [pc, #112]	; (8005ef8 <updateTime+0xa0>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f868 	bl	8006f5c <siprintf>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4818      	ldr	r0, [pc, #96]	; (8005ef4 <updateTime+0x9c>)
 8005e92:	f7ff fe98 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 15, 2);
 8005e96:	2202      	movs	r2, #2
 8005e98:	210f      	movs	r1, #15
 8005e9a:	4816      	ldr	r0, [pc, #88]	; (8005ef4 <updateTime+0x9c>)
 8005e9c:	f7ff fe40 	bl	8005b20 <CLCD_I2C_SetCursor>
	sprintf(buffer, "%02d:", HTime.Minutes);
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <updateTime+0x90>)
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	4913      	ldr	r1, [pc, #76]	; (8005ef8 <updateTime+0xa0>)
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 f856 	bl	8006f5c <siprintf>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	480f      	ldr	r0, [pc, #60]	; (8005ef4 <updateTime+0x9c>)
 8005eb6:	f7ff fe86 	bl	8005bc6 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1, 18, 2);
 8005eba:	2202      	movs	r2, #2
 8005ebc:	2112      	movs	r1, #18
 8005ebe:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <updateTime+0x9c>)
 8005ec0:	f7ff fe2e 	bl	8005b20 <CLCD_I2C_SetCursor>
	sprintf(buffer, "%02d", HTime.Seconds);
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <updateTime+0x90>)
 8005ec6:	789b      	ldrb	r3, [r3, #2]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	490b      	ldr	r1, [pc, #44]	; (8005efc <updateTime+0xa4>)
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f844 	bl	8006f5c <siprintf>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4806      	ldr	r0, [pc, #24]	; (8005ef4 <updateTime+0x9c>)
 8005eda:	f7ff fe74 	bl	8005bc6 <CLCD_I2C_WriteString>
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200003bc 	.word	0x200003bc
 8005eec:	20000250 	.word	0x20000250
 8005ef0:	200003c0 	.word	0x200003c0
 8005ef4:	2000034c 	.word	0x2000034c
 8005ef8:	0800a900 	.word	0x0800a900
 8005efc:	0800a908 	.word	0x0800a908

08005f00 <MAX6675_Init>:

#include "stm32f1xx.h" // Device header
#include "stdlib.h"
#include "stdio.h"

void MAX6675_Init() {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
    // Cài đặt SPI
    hspi2.Instance = SPI2;
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <MAX6675_Init+0x44>)
 8005f06:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <MAX6675_Init+0x48>)
 8005f08:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <MAX6675_Init+0x44>)
 8005f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f10:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <MAX6675_Init+0x44>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <MAX6675_Init+0x44>)
 8005f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1e:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <MAX6675_Init+0x44>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <MAX6675_Init+0x44>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <MAX6675_Init+0x44>)
 8005f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f32:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005f34:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <MAX6675_Init+0x44>)
 8005f36:	2238      	movs	r2, #56	; 0x38
 8005f38:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8005f3a:	4802      	ldr	r0, [pc, #8]	; (8005f44 <MAX6675_Init+0x44>)
 8005f3c:	f7fe fb82 	bl	8004644 <HAL_SPI_Init>
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000264 	.word	0x20000264
 8005f48:	40003800 	.word	0x40003800

08005f4c <getTem>:

uint32_t getTem(void){
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
	uint32_t temperature=0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
    uint16_t value;
    uint8_t txData = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	707b      	strb	r3, [r7, #1]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // Kích hoạt MAX6675
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f60:	481c      	ldr	r0, [pc, #112]	; (8005fd4 <getTem+0x88>)
 8005f62:	f7fc fb59 	bl	8002618 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2, &txData, 1, HAL_MAX_DELAY);          // Gửi 1 byte để khởi đầu giao tiếp.
 8005f66:	1c79      	adds	r1, r7, #1
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	481a      	ldr	r0, [pc, #104]	; (8005fd8 <getTem+0x8c>)
 8005f70:	f7fe fbec 	bl	800474c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, (uint8_t *)&value, 2, HAL_MAX_DELAY); // Nhận 16 bit dữ liệu.
 8005f74:	1cb9      	adds	r1, r7, #2
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	4816      	ldr	r0, [pc, #88]	; (8005fd8 <getTem+0x8c>)
 8005f7e:	f7fe fd28 	bl	80049d2 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // Vô hiệu hóa MAX6675
 8005f82:	2201      	movs	r2, #1
 8005f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f88:	4812      	ldr	r0, [pc, #72]	; (8005fd4 <getTem+0x88>)
 8005f8a:	f7fc fb45 	bl	8002618 <HAL_GPIO_WritePin>

    // Xử lý giá trị đọc để tính nhiệt độ Celsius
    if (value & 0x8000) {
 8005f8e:	887b      	ldrh	r3, [r7, #2]
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	da02      	bge.n	8005f9c <getTem+0x50>
      // Bit dấu là 1, nghĩa là lỗi (thermocouple open)
      // Trong trường hợp này, bạn có thể xử lý lỗi hoặc ghi nhận một giá trị nhiệt độ lỗi.
      // Ví dụ:
      temperature = -1.0; // Giá trị nhiệt độ lỗi (điều này phụ thuộc vào ứng dụng của bạn)
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
 8005f9a:	e016      	b.n	8005fca <getTem+0x7e>
    } else {
      // Xóa bit dấu và chia cho 4 để tính nhiệt độ Celsius
      temperature = (float)((value >> 3) * 0.25);
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa fae2 	bl	800056c <__aeabi_i2d>
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <getTem+0x90>)
 8005fae:	f7fa fb47 	bl	8000640 <__aeabi_dmul>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f7fa fe39 	bl	8000c30 <__aeabi_d2f>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fb f82f 	bl	8001024 <__aeabi_f2uiz>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	607b      	str	r3, [r7, #4]
    }

    return temperature;
 8005fca:	687b      	ldr	r3, [r7, #4]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40010c00 	.word	0x40010c00
 8005fd8:	20000264 	.word	0x20000264
 8005fdc:	3fd00000 	.word	0x3fd00000

08005fe0 <PID_Init>:
 */
#include "pid.h"

// Khởi tạo bộ điều khiển PID
void    PID_Init(PIDController *pid, double kp, double ki, double kd, double setpoint)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	e9c7 2300 	strd	r2, r3, [r7]
    pid->Kp = kp;
 8005fec:	68f9      	ldr	r1, [r7, #12]
 8005fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff2:	e9c1 2300 	strd	r2, r3, [r1]
    pid->Ki = ki;
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ffc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->Kd = kd;
 8006000:	68f9      	ldr	r1, [r7, #12]
 8006002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006006:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->setpoint = setpoint;
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006010:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0.0;
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->prev_error = 0.0;
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <PID_Update>:

// Cập nhật bộ điều khiển PID
double PID_Update(PIDController *pid, double process_variable)
{
 800603a:	b5b0      	push	{r4, r5, r7, lr}
 800603c:	b08a      	sub	sp, #40	; 0x28
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	e9c7 2300 	strd	r2, r3, [r7]
    // Tính sai số
    double error = pid->setpoint - process_variable;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800604c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006050:	f7fa f93e 	bl	80002d0 <__aeabi_dsub>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Tính số tích phân
    pid->integral += error;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006066:	f7fa f935 	bl	80002d4 <__adddf3>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Tính đạo hàm của sai số
    double derivative = error - pid->prev_error;    
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800607a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800607e:	f7fa f927 	bl	80002d0 <__aeabi_dsub>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Tính tín hiệu điều khiển
    double control_signal = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006090:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006094:	f7fa fad4 	bl	8000640 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060ac:	f7fa fac8 	bl	8000640 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f90c 	bl	80002d4 <__adddf3>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	461d      	mov	r5, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80060ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ce:	f7fa fab7 	bl	8000640 <__aeabi_dmul>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa f8fb 	bl	80002d4 <__adddf3>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lưu trữ sai số hiện tại để sử dụng cho lần cập nhật sau
    pid->prev_error = error;
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    return control_signal;
 80060f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	3728      	adds	r7, #40	; 0x28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bdb0      	pop	{r4, r5, r7, pc}

080060fe <__cvt>:
 80060fe:	2b00      	cmp	r3, #0
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	461f      	mov	r7, r3
 8006106:	bfbb      	ittet	lt
 8006108:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800610c:	461f      	movlt	r7, r3
 800610e:	2300      	movge	r3, #0
 8006110:	232d      	movlt	r3, #45	; 0x2d
 8006112:	b088      	sub	sp, #32
 8006114:	4614      	mov	r4, r2
 8006116:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006118:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800611a:	7013      	strb	r3, [r2, #0]
 800611c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800611e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006122:	f023 0820 	bic.w	r8, r3, #32
 8006126:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800612a:	d005      	beq.n	8006138 <__cvt+0x3a>
 800612c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006130:	d100      	bne.n	8006134 <__cvt+0x36>
 8006132:	3501      	adds	r5, #1
 8006134:	2302      	movs	r3, #2
 8006136:	e000      	b.n	800613a <__cvt+0x3c>
 8006138:	2303      	movs	r3, #3
 800613a:	aa07      	add	r2, sp, #28
 800613c:	9204      	str	r2, [sp, #16]
 800613e:	aa06      	add	r2, sp, #24
 8006140:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006144:	e9cd 3500 	strd	r3, r5, [sp]
 8006148:	4622      	mov	r2, r4
 800614a:	463b      	mov	r3, r7
 800614c:	f001 f888 	bl	8007260 <_dtoa_r>
 8006150:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006154:	4606      	mov	r6, r0
 8006156:	d102      	bne.n	800615e <__cvt+0x60>
 8006158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800615a:	07db      	lsls	r3, r3, #31
 800615c:	d522      	bpl.n	80061a4 <__cvt+0xa6>
 800615e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006162:	eb06 0905 	add.w	r9, r6, r5
 8006166:	d110      	bne.n	800618a <__cvt+0x8c>
 8006168:	7833      	ldrb	r3, [r6, #0]
 800616a:	2b30      	cmp	r3, #48	; 0x30
 800616c:	d10a      	bne.n	8006184 <__cvt+0x86>
 800616e:	2200      	movs	r2, #0
 8006170:	2300      	movs	r3, #0
 8006172:	4620      	mov	r0, r4
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa fccb 	bl	8000b10 <__aeabi_dcmpeq>
 800617a:	b918      	cbnz	r0, 8006184 <__cvt+0x86>
 800617c:	f1c5 0501 	rsb	r5, r5, #1
 8006180:	f8ca 5000 	str.w	r5, [sl]
 8006184:	f8da 3000 	ldr.w	r3, [sl]
 8006188:	4499      	add	r9, r3
 800618a:	2200      	movs	r2, #0
 800618c:	2300      	movs	r3, #0
 800618e:	4620      	mov	r0, r4
 8006190:	4639      	mov	r1, r7
 8006192:	f7fa fcbd 	bl	8000b10 <__aeabi_dcmpeq>
 8006196:	b108      	cbz	r0, 800619c <__cvt+0x9e>
 8006198:	f8cd 901c 	str.w	r9, [sp, #28]
 800619c:	2230      	movs	r2, #48	; 0x30
 800619e:	9b07      	ldr	r3, [sp, #28]
 80061a0:	454b      	cmp	r3, r9
 80061a2:	d307      	bcc.n	80061b4 <__cvt+0xb6>
 80061a4:	4630      	mov	r0, r6
 80061a6:	9b07      	ldr	r3, [sp, #28]
 80061a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061aa:	1b9b      	subs	r3, r3, r6
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	b008      	add	sp, #32
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	9107      	str	r1, [sp, #28]
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e7f0      	b.n	800619e <__cvt+0xa0>

080061bc <__exponent>:
 80061bc:	4603      	mov	r3, r0
 80061be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c0:	2900      	cmp	r1, #0
 80061c2:	f803 2b02 	strb.w	r2, [r3], #2
 80061c6:	bfb6      	itet	lt
 80061c8:	222d      	movlt	r2, #45	; 0x2d
 80061ca:	222b      	movge	r2, #43	; 0x2b
 80061cc:	4249      	neglt	r1, r1
 80061ce:	2909      	cmp	r1, #9
 80061d0:	7042      	strb	r2, [r0, #1]
 80061d2:	dd2a      	ble.n	800622a <__exponent+0x6e>
 80061d4:	f10d 0207 	add.w	r2, sp, #7
 80061d8:	4617      	mov	r7, r2
 80061da:	260a      	movs	r6, #10
 80061dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80061e0:	4694      	mov	ip, r2
 80061e2:	fb06 1415 	mls	r4, r6, r5, r1
 80061e6:	3430      	adds	r4, #48	; 0x30
 80061e8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80061ec:	460c      	mov	r4, r1
 80061ee:	2c63      	cmp	r4, #99	; 0x63
 80061f0:	4629      	mov	r1, r5
 80061f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80061f6:	dcf1      	bgt.n	80061dc <__exponent+0x20>
 80061f8:	3130      	adds	r1, #48	; 0x30
 80061fa:	f1ac 0402 	sub.w	r4, ip, #2
 80061fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006202:	4622      	mov	r2, r4
 8006204:	1c41      	adds	r1, r0, #1
 8006206:	42ba      	cmp	r2, r7
 8006208:	d30a      	bcc.n	8006220 <__exponent+0x64>
 800620a:	f10d 0209 	add.w	r2, sp, #9
 800620e:	eba2 020c 	sub.w	r2, r2, ip
 8006212:	42bc      	cmp	r4, r7
 8006214:	bf88      	it	hi
 8006216:	2200      	movhi	r2, #0
 8006218:	4413      	add	r3, r2
 800621a:	1a18      	subs	r0, r3, r0
 800621c:	b003      	add	sp, #12
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006220:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006224:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006228:	e7ed      	b.n	8006206 <__exponent+0x4a>
 800622a:	2330      	movs	r3, #48	; 0x30
 800622c:	3130      	adds	r1, #48	; 0x30
 800622e:	7083      	strb	r3, [r0, #2]
 8006230:	70c1      	strb	r1, [r0, #3]
 8006232:	1d03      	adds	r3, r0, #4
 8006234:	e7f1      	b.n	800621a <__exponent+0x5e>
	...

08006238 <_printf_float>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	b091      	sub	sp, #68	; 0x44
 800623e:	460c      	mov	r4, r1
 8006240:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006244:	4616      	mov	r6, r2
 8006246:	461f      	mov	r7, r3
 8006248:	4605      	mov	r5, r0
 800624a:	f000 fef3 	bl	8007034 <_localeconv_r>
 800624e:	6803      	ldr	r3, [r0, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	9309      	str	r3, [sp, #36]	; 0x24
 8006254:	f7f9 ff7c 	bl	8000150 <strlen>
 8006258:	2300      	movs	r3, #0
 800625a:	930e      	str	r3, [sp, #56]	; 0x38
 800625c:	f8d8 3000 	ldr.w	r3, [r8]
 8006260:	900a      	str	r0, [sp, #40]	; 0x28
 8006262:	3307      	adds	r3, #7
 8006264:	f023 0307 	bic.w	r3, r3, #7
 8006268:	f103 0208 	add.w	r2, r3, #8
 800626c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006270:	f8d4 b000 	ldr.w	fp, [r4]
 8006274:	f8c8 2000 	str.w	r2, [r8]
 8006278:	e9d3 a800 	ldrd	sl, r8, [r3]
 800627c:	4652      	mov	r2, sl
 800627e:	4643      	mov	r3, r8
 8006280:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006284:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006288:	930b      	str	r3, [sp, #44]	; 0x2c
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	4650      	mov	r0, sl
 8006290:	4b9c      	ldr	r3, [pc, #624]	; (8006504 <_printf_float+0x2cc>)
 8006292:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006294:	f7fa fc6e 	bl	8000b74 <__aeabi_dcmpun>
 8006298:	bb70      	cbnz	r0, 80062f8 <_printf_float+0xc0>
 800629a:	f04f 32ff 	mov.w	r2, #4294967295
 800629e:	4650      	mov	r0, sl
 80062a0:	4b98      	ldr	r3, [pc, #608]	; (8006504 <_printf_float+0x2cc>)
 80062a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062a4:	f7fa fc48 	bl	8000b38 <__aeabi_dcmple>
 80062a8:	bb30      	cbnz	r0, 80062f8 <_printf_float+0xc0>
 80062aa:	2200      	movs	r2, #0
 80062ac:	2300      	movs	r3, #0
 80062ae:	4650      	mov	r0, sl
 80062b0:	4641      	mov	r1, r8
 80062b2:	f7fa fc37 	bl	8000b24 <__aeabi_dcmplt>
 80062b6:	b110      	cbz	r0, 80062be <_printf_float+0x86>
 80062b8:	232d      	movs	r3, #45	; 0x2d
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062be:	4a92      	ldr	r2, [pc, #584]	; (8006508 <_printf_float+0x2d0>)
 80062c0:	4b92      	ldr	r3, [pc, #584]	; (800650c <_printf_float+0x2d4>)
 80062c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062c6:	bf94      	ite	ls
 80062c8:	4690      	movls	r8, r2
 80062ca:	4698      	movhi	r8, r3
 80062cc:	2303      	movs	r3, #3
 80062ce:	f04f 0a00 	mov.w	sl, #0
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	f02b 0304 	bic.w	r3, fp, #4
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	4633      	mov	r3, r6
 80062dc:	4621      	mov	r1, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	9700      	str	r7, [sp, #0]
 80062e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80062e4:	f000 f9d6 	bl	8006694 <_printf_common>
 80062e8:	3001      	adds	r0, #1
 80062ea:	f040 8090 	bne.w	800640e <_printf_float+0x1d6>
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	b011      	add	sp, #68	; 0x44
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	4652      	mov	r2, sl
 80062fa:	4643      	mov	r3, r8
 80062fc:	4650      	mov	r0, sl
 80062fe:	4641      	mov	r1, r8
 8006300:	f7fa fc38 	bl	8000b74 <__aeabi_dcmpun>
 8006304:	b148      	cbz	r0, 800631a <_printf_float+0xe2>
 8006306:	f1b8 0f00 	cmp.w	r8, #0
 800630a:	bfb8      	it	lt
 800630c:	232d      	movlt	r3, #45	; 0x2d
 800630e:	4a80      	ldr	r2, [pc, #512]	; (8006510 <_printf_float+0x2d8>)
 8006310:	bfb8      	it	lt
 8006312:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006316:	4b7f      	ldr	r3, [pc, #508]	; (8006514 <_printf_float+0x2dc>)
 8006318:	e7d3      	b.n	80062c2 <_printf_float+0x8a>
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	d142      	bne.n	80063aa <_printf_float+0x172>
 8006324:	2306      	movs	r3, #6
 8006326:	6063      	str	r3, [r4, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	9206      	str	r2, [sp, #24]
 800632c:	aa0e      	add	r2, sp, #56	; 0x38
 800632e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006332:	aa0d      	add	r2, sp, #52	; 0x34
 8006334:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006338:	9203      	str	r2, [sp, #12]
 800633a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800633e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	4652      	mov	r2, sl
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	4628      	mov	r0, r5
 800634c:	4643      	mov	r3, r8
 800634e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006350:	f7ff fed5 	bl	80060fe <__cvt>
 8006354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006356:	4680      	mov	r8, r0
 8006358:	2947      	cmp	r1, #71	; 0x47
 800635a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800635c:	d108      	bne.n	8006370 <_printf_float+0x138>
 800635e:	1cc8      	adds	r0, r1, #3
 8006360:	db02      	blt.n	8006368 <_printf_float+0x130>
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	4299      	cmp	r1, r3
 8006366:	dd40      	ble.n	80063ea <_printf_float+0x1b2>
 8006368:	f1a9 0902 	sub.w	r9, r9, #2
 800636c:	fa5f f989 	uxtb.w	r9, r9
 8006370:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006374:	d81f      	bhi.n	80063b6 <_printf_float+0x17e>
 8006376:	464a      	mov	r2, r9
 8006378:	3901      	subs	r1, #1
 800637a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800637e:	910d      	str	r1, [sp, #52]	; 0x34
 8006380:	f7ff ff1c 	bl	80061bc <__exponent>
 8006384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006386:	4682      	mov	sl, r0
 8006388:	1813      	adds	r3, r2, r0
 800638a:	2a01      	cmp	r2, #1
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	dc02      	bgt.n	8006396 <_printf_float+0x15e>
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	07d2      	lsls	r2, r2, #31
 8006394:	d501      	bpl.n	800639a <_printf_float+0x162>
 8006396:	3301      	adds	r3, #1
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d09b      	beq.n	80062da <_printf_float+0xa2>
 80063a2:	232d      	movs	r3, #45	; 0x2d
 80063a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a8:	e797      	b.n	80062da <_printf_float+0xa2>
 80063aa:	2947      	cmp	r1, #71	; 0x47
 80063ac:	d1bc      	bne.n	8006328 <_printf_float+0xf0>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1ba      	bne.n	8006328 <_printf_float+0xf0>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e7b7      	b.n	8006326 <_printf_float+0xee>
 80063b6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063ba:	d118      	bne.n	80063ee <_printf_float+0x1b6>
 80063bc:	2900      	cmp	r1, #0
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	dd0b      	ble.n	80063da <_printf_float+0x1a2>
 80063c2:	6121      	str	r1, [r4, #16]
 80063c4:	b913      	cbnz	r3, 80063cc <_printf_float+0x194>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	07d0      	lsls	r0, r2, #31
 80063ca:	d502      	bpl.n	80063d2 <_printf_float+0x19a>
 80063cc:	3301      	adds	r3, #1
 80063ce:	440b      	add	r3, r1
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	f04f 0a00 	mov.w	sl, #0
 80063d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063d8:	e7df      	b.n	800639a <_printf_float+0x162>
 80063da:	b913      	cbnz	r3, 80063e2 <_printf_float+0x1aa>
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	07d2      	lsls	r2, r2, #31
 80063e0:	d501      	bpl.n	80063e6 <_printf_float+0x1ae>
 80063e2:	3302      	adds	r3, #2
 80063e4:	e7f4      	b.n	80063d0 <_printf_float+0x198>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7f2      	b.n	80063d0 <_printf_float+0x198>
 80063ea:	f04f 0967 	mov.w	r9, #103	; 0x67
 80063ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063f0:	4299      	cmp	r1, r3
 80063f2:	db05      	blt.n	8006400 <_printf_float+0x1c8>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	6121      	str	r1, [r4, #16]
 80063f8:	07d8      	lsls	r0, r3, #31
 80063fa:	d5ea      	bpl.n	80063d2 <_printf_float+0x19a>
 80063fc:	1c4b      	adds	r3, r1, #1
 80063fe:	e7e7      	b.n	80063d0 <_printf_float+0x198>
 8006400:	2900      	cmp	r1, #0
 8006402:	bfcc      	ite	gt
 8006404:	2201      	movgt	r2, #1
 8006406:	f1c1 0202 	rsble	r2, r1, #2
 800640a:	4413      	add	r3, r2
 800640c:	e7e0      	b.n	80063d0 <_printf_float+0x198>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	055a      	lsls	r2, r3, #21
 8006412:	d407      	bmi.n	8006424 <_printf_float+0x1ec>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	4642      	mov	r2, r8
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	d12b      	bne.n	800647a <_printf_float+0x242>
 8006422:	e764      	b.n	80062ee <_printf_float+0xb6>
 8006424:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006428:	f240 80dd 	bls.w	80065e6 <_printf_float+0x3ae>
 800642c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	f7fa fb6c 	bl	8000b10 <__aeabi_dcmpeq>
 8006438:	2800      	cmp	r0, #0
 800643a:	d033      	beq.n	80064a4 <_printf_float+0x26c>
 800643c:	2301      	movs	r3, #1
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	4a35      	ldr	r2, [pc, #212]	; (8006518 <_printf_float+0x2e0>)
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	f43f af51 	beq.w	80062ee <_printf_float+0xb6>
 800644c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006450:	429a      	cmp	r2, r3
 8006452:	db02      	blt.n	800645a <_printf_float+0x222>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	07d8      	lsls	r0, r3, #31
 8006458:	d50f      	bpl.n	800647a <_printf_float+0x242>
 800645a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	f43f af42 	beq.w	80062ee <_printf_float+0xb6>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	f104 091a 	add.w	r9, r4, #26
 8006472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006474:	3b01      	subs	r3, #1
 8006476:	4543      	cmp	r3, r8
 8006478:	dc09      	bgt.n	800648e <_printf_float+0x256>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	079b      	lsls	r3, r3, #30
 800647e:	f100 8104 	bmi.w	800668a <_printf_float+0x452>
 8006482:	68e0      	ldr	r0, [r4, #12]
 8006484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006486:	4298      	cmp	r0, r3
 8006488:	bfb8      	it	lt
 800648a:	4618      	movlt	r0, r3
 800648c:	e731      	b.n	80062f2 <_printf_float+0xba>
 800648e:	2301      	movs	r3, #1
 8006490:	464a      	mov	r2, r9
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f af28 	beq.w	80062ee <_printf_float+0xb6>
 800649e:	f108 0801 	add.w	r8, r8, #1
 80064a2:	e7e6      	b.n	8006472 <_printf_float+0x23a>
 80064a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dc38      	bgt.n	800651c <_printf_float+0x2e4>
 80064aa:	2301      	movs	r3, #1
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	4a19      	ldr	r2, [pc, #100]	; (8006518 <_printf_float+0x2e0>)
 80064b2:	47b8      	blx	r7
 80064b4:	3001      	adds	r0, #1
 80064b6:	f43f af1a 	beq.w	80062ee <_printf_float+0xb6>
 80064ba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80064be:	4313      	orrs	r3, r2
 80064c0:	d102      	bne.n	80064c8 <_printf_float+0x290>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	07d9      	lsls	r1, r3, #31
 80064c6:	d5d8      	bpl.n	800647a <_printf_float+0x242>
 80064c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	f43f af0b 	beq.w	80062ee <_printf_float+0xb6>
 80064d8:	f04f 0900 	mov.w	r9, #0
 80064dc:	f104 0a1a 	add.w	sl, r4, #26
 80064e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e2:	425b      	negs	r3, r3
 80064e4:	454b      	cmp	r3, r9
 80064e6:	dc01      	bgt.n	80064ec <_printf_float+0x2b4>
 80064e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ea:	e794      	b.n	8006416 <_printf_float+0x1de>
 80064ec:	2301      	movs	r3, #1
 80064ee:	4652      	mov	r2, sl
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f aef9 	beq.w	80062ee <_printf_float+0xb6>
 80064fc:	f109 0901 	add.w	r9, r9, #1
 8006500:	e7ee      	b.n	80064e0 <_printf_float+0x2a8>
 8006502:	bf00      	nop
 8006504:	7fefffff 	.word	0x7fefffff
 8006508:	0800a94e 	.word	0x0800a94e
 800650c:	0800a952 	.word	0x0800a952
 8006510:	0800a956 	.word	0x0800a956
 8006514:	0800a95a 	.word	0x0800a95a
 8006518:	0800a95e 	.word	0x0800a95e
 800651c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800651e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006520:	429a      	cmp	r2, r3
 8006522:	bfa8      	it	ge
 8006524:	461a      	movge	r2, r3
 8006526:	2a00      	cmp	r2, #0
 8006528:	4691      	mov	r9, r2
 800652a:	dc37      	bgt.n	800659c <_printf_float+0x364>
 800652c:	f04f 0b00 	mov.w	fp, #0
 8006530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006534:	f104 021a 	add.w	r2, r4, #26
 8006538:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800653c:	ebaa 0309 	sub.w	r3, sl, r9
 8006540:	455b      	cmp	r3, fp
 8006542:	dc33      	bgt.n	80065ac <_printf_float+0x374>
 8006544:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006548:	429a      	cmp	r2, r3
 800654a:	db3b      	blt.n	80065c4 <_printf_float+0x38c>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	07da      	lsls	r2, r3, #31
 8006550:	d438      	bmi.n	80065c4 <_printf_float+0x38c>
 8006552:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006556:	eba2 0903 	sub.w	r9, r2, r3
 800655a:	eba2 020a 	sub.w	r2, r2, sl
 800655e:	4591      	cmp	r9, r2
 8006560:	bfa8      	it	ge
 8006562:	4691      	movge	r9, r2
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	dc34      	bgt.n	80065d4 <_printf_float+0x39c>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006572:	f104 0a1a 	add.w	sl, r4, #26
 8006576:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	eba3 0309 	sub.w	r3, r3, r9
 8006580:	4543      	cmp	r3, r8
 8006582:	f77f af7a 	ble.w	800647a <_printf_float+0x242>
 8006586:	2301      	movs	r3, #1
 8006588:	4652      	mov	r2, sl
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f aeac 	beq.w	80062ee <_printf_float+0xb6>
 8006596:	f108 0801 	add.w	r8, r8, #1
 800659a:	e7ec      	b.n	8006576 <_printf_float+0x33e>
 800659c:	4613      	mov	r3, r2
 800659e:	4631      	mov	r1, r6
 80065a0:	4642      	mov	r2, r8
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	d1c0      	bne.n	800652c <_printf_float+0x2f4>
 80065aa:	e6a0      	b.n	80062ee <_printf_float+0xb6>
 80065ac:	2301      	movs	r3, #1
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	f43f ae99 	beq.w	80062ee <_printf_float+0xb6>
 80065bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065be:	f10b 0b01 	add.w	fp, fp, #1
 80065c2:	e7b9      	b.n	8006538 <_printf_float+0x300>
 80065c4:	4631      	mov	r1, r6
 80065c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	d1bf      	bne.n	8006552 <_printf_float+0x31a>
 80065d2:	e68c      	b.n	80062ee <_printf_float+0xb6>
 80065d4:	464b      	mov	r3, r9
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	eb08 020a 	add.w	r2, r8, sl
 80065de:	47b8      	blx	r7
 80065e0:	3001      	adds	r0, #1
 80065e2:	d1c2      	bne.n	800656a <_printf_float+0x332>
 80065e4:	e683      	b.n	80062ee <_printf_float+0xb6>
 80065e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e8:	2a01      	cmp	r2, #1
 80065ea:	dc01      	bgt.n	80065f0 <_printf_float+0x3b8>
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d539      	bpl.n	8006664 <_printf_float+0x42c>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4642      	mov	r2, r8
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f ae77 	beq.w	80062ee <_printf_float+0xb6>
 8006600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f ae6f 	beq.w	80062ee <_printf_float+0xb6>
 8006610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800661c:	f7fa fa78 	bl	8000b10 <__aeabi_dcmpeq>
 8006620:	b9d8      	cbnz	r0, 800665a <_printf_float+0x422>
 8006622:	f109 33ff 	add.w	r3, r9, #4294967295
 8006626:	f108 0201 	add.w	r2, r8, #1
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	d10e      	bne.n	8006652 <_printf_float+0x41a>
 8006634:	e65b      	b.n	80062ee <_printf_float+0xb6>
 8006636:	2301      	movs	r3, #1
 8006638:	464a      	mov	r2, r9
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae54 	beq.w	80062ee <_printf_float+0xb6>
 8006646:	f108 0801 	add.w	r8, r8, #1
 800664a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800664c:	3b01      	subs	r3, #1
 800664e:	4543      	cmp	r3, r8
 8006650:	dcf1      	bgt.n	8006636 <_printf_float+0x3fe>
 8006652:	4653      	mov	r3, sl
 8006654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006658:	e6de      	b.n	8006418 <_printf_float+0x1e0>
 800665a:	f04f 0800 	mov.w	r8, #0
 800665e:	f104 091a 	add.w	r9, r4, #26
 8006662:	e7f2      	b.n	800664a <_printf_float+0x412>
 8006664:	2301      	movs	r3, #1
 8006666:	4642      	mov	r2, r8
 8006668:	e7df      	b.n	800662a <_printf_float+0x3f2>
 800666a:	2301      	movs	r3, #1
 800666c:	464a      	mov	r2, r9
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	f43f ae3a 	beq.w	80062ee <_printf_float+0xb6>
 800667a:	f108 0801 	add.w	r8, r8, #1
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006682:	1a5b      	subs	r3, r3, r1
 8006684:	4543      	cmp	r3, r8
 8006686:	dcf0      	bgt.n	800666a <_printf_float+0x432>
 8006688:	e6fb      	b.n	8006482 <_printf_float+0x24a>
 800668a:	f04f 0800 	mov.w	r8, #0
 800668e:	f104 0919 	add.w	r9, r4, #25
 8006692:	e7f4      	b.n	800667e <_printf_float+0x446>

08006694 <_printf_common>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	4616      	mov	r6, r2
 800669a:	4699      	mov	r9, r3
 800669c:	688a      	ldr	r2, [r1, #8]
 800669e:	690b      	ldr	r3, [r1, #16]
 80066a0:	4607      	mov	r7, r0
 80066a2:	4293      	cmp	r3, r2
 80066a4:	bfb8      	it	lt
 80066a6:	4613      	movlt	r3, r2
 80066a8:	6033      	str	r3, [r6, #0]
 80066aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ae:	460c      	mov	r4, r1
 80066b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b4:	b10a      	cbz	r2, 80066ba <_printf_common+0x26>
 80066b6:	3301      	adds	r3, #1
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	0699      	lsls	r1, r3, #26
 80066be:	bf42      	ittt	mi
 80066c0:	6833      	ldrmi	r3, [r6, #0]
 80066c2:	3302      	addmi	r3, #2
 80066c4:	6033      	strmi	r3, [r6, #0]
 80066c6:	6825      	ldr	r5, [r4, #0]
 80066c8:	f015 0506 	ands.w	r5, r5, #6
 80066cc:	d106      	bne.n	80066dc <_printf_common+0x48>
 80066ce:	f104 0a19 	add.w	sl, r4, #25
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	6832      	ldr	r2, [r6, #0]
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dc2b      	bgt.n	8006734 <_printf_common+0xa0>
 80066dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066e0:	1e13      	subs	r3, r2, #0
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	bf18      	it	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	0692      	lsls	r2, r2, #26
 80066ea:	d430      	bmi.n	800674e <_printf_common+0xba>
 80066ec:	4649      	mov	r1, r9
 80066ee:	4638      	mov	r0, r7
 80066f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066f4:	47c0      	blx	r8
 80066f6:	3001      	adds	r0, #1
 80066f8:	d023      	beq.n	8006742 <_printf_common+0xae>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	6922      	ldr	r2, [r4, #16]
 80066fe:	f003 0306 	and.w	r3, r3, #6
 8006702:	2b04      	cmp	r3, #4
 8006704:	bf14      	ite	ne
 8006706:	2500      	movne	r5, #0
 8006708:	6833      	ldreq	r3, [r6, #0]
 800670a:	f04f 0600 	mov.w	r6, #0
 800670e:	bf08      	it	eq
 8006710:	68e5      	ldreq	r5, [r4, #12]
 8006712:	f104 041a 	add.w	r4, r4, #26
 8006716:	bf08      	it	eq
 8006718:	1aed      	subeq	r5, r5, r3
 800671a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800671e:	bf08      	it	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	4293      	cmp	r3, r2
 8006726:	bfc4      	itt	gt
 8006728:	1a9b      	subgt	r3, r3, r2
 800672a:	18ed      	addgt	r5, r5, r3
 800672c:	42b5      	cmp	r5, r6
 800672e:	d11a      	bne.n	8006766 <_printf_common+0xd2>
 8006730:	2000      	movs	r0, #0
 8006732:	e008      	b.n	8006746 <_printf_common+0xb2>
 8006734:	2301      	movs	r3, #1
 8006736:	4652      	mov	r2, sl
 8006738:	4649      	mov	r1, r9
 800673a:	4638      	mov	r0, r7
 800673c:	47c0      	blx	r8
 800673e:	3001      	adds	r0, #1
 8006740:	d103      	bne.n	800674a <_printf_common+0xb6>
 8006742:	f04f 30ff 	mov.w	r0, #4294967295
 8006746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674a:	3501      	adds	r5, #1
 800674c:	e7c1      	b.n	80066d2 <_printf_common+0x3e>
 800674e:	2030      	movs	r0, #48	; 0x30
 8006750:	18e1      	adds	r1, r4, r3
 8006752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800675c:	4422      	add	r2, r4
 800675e:	3302      	adds	r3, #2
 8006760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006764:	e7c2      	b.n	80066ec <_printf_common+0x58>
 8006766:	2301      	movs	r3, #1
 8006768:	4622      	mov	r2, r4
 800676a:	4649      	mov	r1, r9
 800676c:	4638      	mov	r0, r7
 800676e:	47c0      	blx	r8
 8006770:	3001      	adds	r0, #1
 8006772:	d0e6      	beq.n	8006742 <_printf_common+0xae>
 8006774:	3601      	adds	r6, #1
 8006776:	e7d9      	b.n	800672c <_printf_common+0x98>

08006778 <_printf_i>:
 8006778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	7e0f      	ldrb	r7, [r1, #24]
 800677e:	4691      	mov	r9, r2
 8006780:	2f78      	cmp	r7, #120	; 0x78
 8006782:	4680      	mov	r8, r0
 8006784:	460c      	mov	r4, r1
 8006786:	469a      	mov	sl, r3
 8006788:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800678a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800678e:	d807      	bhi.n	80067a0 <_printf_i+0x28>
 8006790:	2f62      	cmp	r7, #98	; 0x62
 8006792:	d80a      	bhi.n	80067aa <_printf_i+0x32>
 8006794:	2f00      	cmp	r7, #0
 8006796:	f000 80d5 	beq.w	8006944 <_printf_i+0x1cc>
 800679a:	2f58      	cmp	r7, #88	; 0x58
 800679c:	f000 80c1 	beq.w	8006922 <_printf_i+0x1aa>
 80067a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067a8:	e03a      	b.n	8006820 <_printf_i+0xa8>
 80067aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ae:	2b15      	cmp	r3, #21
 80067b0:	d8f6      	bhi.n	80067a0 <_printf_i+0x28>
 80067b2:	a101      	add	r1, pc, #4	; (adr r1, 80067b8 <_printf_i+0x40>)
 80067b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067b8:	08006811 	.word	0x08006811
 80067bc:	08006825 	.word	0x08006825
 80067c0:	080067a1 	.word	0x080067a1
 80067c4:	080067a1 	.word	0x080067a1
 80067c8:	080067a1 	.word	0x080067a1
 80067cc:	080067a1 	.word	0x080067a1
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080067a1 	.word	0x080067a1
 80067d8:	080067a1 	.word	0x080067a1
 80067dc:	080067a1 	.word	0x080067a1
 80067e0:	080067a1 	.word	0x080067a1
 80067e4:	0800692b 	.word	0x0800692b
 80067e8:	08006851 	.word	0x08006851
 80067ec:	080068e5 	.word	0x080068e5
 80067f0:	080067a1 	.word	0x080067a1
 80067f4:	080067a1 	.word	0x080067a1
 80067f8:	0800694d 	.word	0x0800694d
 80067fc:	080067a1 	.word	0x080067a1
 8006800:	08006851 	.word	0x08006851
 8006804:	080067a1 	.word	0x080067a1
 8006808:	080067a1 	.word	0x080067a1
 800680c:	080068ed 	.word	0x080068ed
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	602a      	str	r2, [r5, #0]
 8006818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800681c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006820:	2301      	movs	r3, #1
 8006822:	e0a0      	b.n	8006966 <_printf_i+0x1ee>
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	0607      	lsls	r7, r0, #24
 800682a:	f103 0104 	add.w	r1, r3, #4
 800682e:	6029      	str	r1, [r5, #0]
 8006830:	d501      	bpl.n	8006836 <_printf_i+0xbe>
 8006832:	681e      	ldr	r6, [r3, #0]
 8006834:	e003      	b.n	800683e <_printf_i+0xc6>
 8006836:	0646      	lsls	r6, r0, #25
 8006838:	d5fb      	bpl.n	8006832 <_printf_i+0xba>
 800683a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800683e:	2e00      	cmp	r6, #0
 8006840:	da03      	bge.n	800684a <_printf_i+0xd2>
 8006842:	232d      	movs	r3, #45	; 0x2d
 8006844:	4276      	negs	r6, r6
 8006846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800684a:	230a      	movs	r3, #10
 800684c:	4859      	ldr	r0, [pc, #356]	; (80069b4 <_printf_i+0x23c>)
 800684e:	e012      	b.n	8006876 <_printf_i+0xfe>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	6820      	ldr	r0, [r4, #0]
 8006854:	1d19      	adds	r1, r3, #4
 8006856:	6029      	str	r1, [r5, #0]
 8006858:	0605      	lsls	r5, r0, #24
 800685a:	d501      	bpl.n	8006860 <_printf_i+0xe8>
 800685c:	681e      	ldr	r6, [r3, #0]
 800685e:	e002      	b.n	8006866 <_printf_i+0xee>
 8006860:	0641      	lsls	r1, r0, #25
 8006862:	d5fb      	bpl.n	800685c <_printf_i+0xe4>
 8006864:	881e      	ldrh	r6, [r3, #0]
 8006866:	2f6f      	cmp	r7, #111	; 0x6f
 8006868:	bf0c      	ite	eq
 800686a:	2308      	moveq	r3, #8
 800686c:	230a      	movne	r3, #10
 800686e:	4851      	ldr	r0, [pc, #324]	; (80069b4 <_printf_i+0x23c>)
 8006870:	2100      	movs	r1, #0
 8006872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006876:	6865      	ldr	r5, [r4, #4]
 8006878:	2d00      	cmp	r5, #0
 800687a:	bfa8      	it	ge
 800687c:	6821      	ldrge	r1, [r4, #0]
 800687e:	60a5      	str	r5, [r4, #8]
 8006880:	bfa4      	itt	ge
 8006882:	f021 0104 	bicge.w	r1, r1, #4
 8006886:	6021      	strge	r1, [r4, #0]
 8006888:	b90e      	cbnz	r6, 800688e <_printf_i+0x116>
 800688a:	2d00      	cmp	r5, #0
 800688c:	d04b      	beq.n	8006926 <_printf_i+0x1ae>
 800688e:	4615      	mov	r5, r2
 8006890:	fbb6 f1f3 	udiv	r1, r6, r3
 8006894:	fb03 6711 	mls	r7, r3, r1, r6
 8006898:	5dc7      	ldrb	r7, [r0, r7]
 800689a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800689e:	4637      	mov	r7, r6
 80068a0:	42bb      	cmp	r3, r7
 80068a2:	460e      	mov	r6, r1
 80068a4:	d9f4      	bls.n	8006890 <_printf_i+0x118>
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d10b      	bne.n	80068c2 <_printf_i+0x14a>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	07de      	lsls	r6, r3, #31
 80068ae:	d508      	bpl.n	80068c2 <_printf_i+0x14a>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	6861      	ldr	r1, [r4, #4]
 80068b4:	4299      	cmp	r1, r3
 80068b6:	bfde      	ittt	le
 80068b8:	2330      	movle	r3, #48	; 0x30
 80068ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068c2:	1b52      	subs	r2, r2, r5
 80068c4:	6122      	str	r2, [r4, #16]
 80068c6:	464b      	mov	r3, r9
 80068c8:	4621      	mov	r1, r4
 80068ca:	4640      	mov	r0, r8
 80068cc:	f8cd a000 	str.w	sl, [sp]
 80068d0:	aa03      	add	r2, sp, #12
 80068d2:	f7ff fedf 	bl	8006694 <_printf_common>
 80068d6:	3001      	adds	r0, #1
 80068d8:	d14a      	bne.n	8006970 <_printf_i+0x1f8>
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	b004      	add	sp, #16
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	f043 0320 	orr.w	r3, r3, #32
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	2778      	movs	r7, #120	; 0x78
 80068ee:	4832      	ldr	r0, [pc, #200]	; (80069b8 <_printf_i+0x240>)
 80068f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	6829      	ldr	r1, [r5, #0]
 80068f8:	061f      	lsls	r7, r3, #24
 80068fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fe:	d402      	bmi.n	8006906 <_printf_i+0x18e>
 8006900:	065f      	lsls	r7, r3, #25
 8006902:	bf48      	it	mi
 8006904:	b2b6      	uxthmi	r6, r6
 8006906:	07df      	lsls	r7, r3, #31
 8006908:	bf48      	it	mi
 800690a:	f043 0320 	orrmi.w	r3, r3, #32
 800690e:	6029      	str	r1, [r5, #0]
 8006910:	bf48      	it	mi
 8006912:	6023      	strmi	r3, [r4, #0]
 8006914:	b91e      	cbnz	r6, 800691e <_printf_i+0x1a6>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	f023 0320 	bic.w	r3, r3, #32
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	2310      	movs	r3, #16
 8006920:	e7a6      	b.n	8006870 <_printf_i+0xf8>
 8006922:	4824      	ldr	r0, [pc, #144]	; (80069b4 <_printf_i+0x23c>)
 8006924:	e7e4      	b.n	80068f0 <_printf_i+0x178>
 8006926:	4615      	mov	r5, r2
 8006928:	e7bd      	b.n	80068a6 <_printf_i+0x12e>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	6826      	ldr	r6, [r4, #0]
 800692e:	1d18      	adds	r0, r3, #4
 8006930:	6961      	ldr	r1, [r4, #20]
 8006932:	6028      	str	r0, [r5, #0]
 8006934:	0635      	lsls	r5, r6, #24
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	d501      	bpl.n	800693e <_printf_i+0x1c6>
 800693a:	6019      	str	r1, [r3, #0]
 800693c:	e002      	b.n	8006944 <_printf_i+0x1cc>
 800693e:	0670      	lsls	r0, r6, #25
 8006940:	d5fb      	bpl.n	800693a <_printf_i+0x1c2>
 8006942:	8019      	strh	r1, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	4615      	mov	r5, r2
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	e7bc      	b.n	80068c6 <_printf_i+0x14e>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	2100      	movs	r1, #0
 8006950:	1d1a      	adds	r2, r3, #4
 8006952:	602a      	str	r2, [r5, #0]
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fbe2 	bl	8007122 <memchr>
 800695e:	b108      	cbz	r0, 8006964 <_printf_i+0x1ec>
 8006960:	1b40      	subs	r0, r0, r5
 8006962:	6060      	str	r0, [r4, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	2300      	movs	r3, #0
 800696a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800696e:	e7aa      	b.n	80068c6 <_printf_i+0x14e>
 8006970:	462a      	mov	r2, r5
 8006972:	4649      	mov	r1, r9
 8006974:	4640      	mov	r0, r8
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	47d0      	blx	sl
 800697a:	3001      	adds	r0, #1
 800697c:	d0ad      	beq.n	80068da <_printf_i+0x162>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	079b      	lsls	r3, r3, #30
 8006982:	d413      	bmi.n	80069ac <_printf_i+0x234>
 8006984:	68e0      	ldr	r0, [r4, #12]
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	4298      	cmp	r0, r3
 800698a:	bfb8      	it	lt
 800698c:	4618      	movlt	r0, r3
 800698e:	e7a6      	b.n	80068de <_printf_i+0x166>
 8006990:	2301      	movs	r3, #1
 8006992:	4632      	mov	r2, r6
 8006994:	4649      	mov	r1, r9
 8006996:	4640      	mov	r0, r8
 8006998:	47d0      	blx	sl
 800699a:	3001      	adds	r0, #1
 800699c:	d09d      	beq.n	80068da <_printf_i+0x162>
 800699e:	3501      	adds	r5, #1
 80069a0:	68e3      	ldr	r3, [r4, #12]
 80069a2:	9903      	ldr	r1, [sp, #12]
 80069a4:	1a5b      	subs	r3, r3, r1
 80069a6:	42ab      	cmp	r3, r5
 80069a8:	dcf2      	bgt.n	8006990 <_printf_i+0x218>
 80069aa:	e7eb      	b.n	8006984 <_printf_i+0x20c>
 80069ac:	2500      	movs	r5, #0
 80069ae:	f104 0619 	add.w	r6, r4, #25
 80069b2:	e7f5      	b.n	80069a0 <_printf_i+0x228>
 80069b4:	0800a960 	.word	0x0800a960
 80069b8:	0800a971 	.word	0x0800a971

080069bc <_scanf_float>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	b087      	sub	sp, #28
 80069c2:	9303      	str	r3, [sp, #12]
 80069c4:	688b      	ldr	r3, [r1, #8]
 80069c6:	4617      	mov	r7, r2
 80069c8:	1e5a      	subs	r2, r3, #1
 80069ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069ce:	bf85      	ittet	hi
 80069d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069d4:	195b      	addhi	r3, r3, r5
 80069d6:	2300      	movls	r3, #0
 80069d8:	9302      	strhi	r3, [sp, #8]
 80069da:	bf88      	it	hi
 80069dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069e0:	468b      	mov	fp, r1
 80069e2:	f04f 0500 	mov.w	r5, #0
 80069e6:	bf8c      	ite	hi
 80069e8:	608b      	strhi	r3, [r1, #8]
 80069ea:	9302      	strls	r3, [sp, #8]
 80069ec:	680b      	ldr	r3, [r1, #0]
 80069ee:	4680      	mov	r8, r0
 80069f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80069f4:	f84b 3b1c 	str.w	r3, [fp], #28
 80069f8:	460c      	mov	r4, r1
 80069fa:	465e      	mov	r6, fp
 80069fc:	46aa      	mov	sl, r5
 80069fe:	46a9      	mov	r9, r5
 8006a00:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a04:	9501      	str	r5, [sp, #4]
 8006a06:	68a2      	ldr	r2, [r4, #8]
 8006a08:	b152      	cbz	r2, 8006a20 <_scanf_float+0x64>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b4e      	cmp	r3, #78	; 0x4e
 8006a10:	d864      	bhi.n	8006adc <_scanf_float+0x120>
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d83c      	bhi.n	8006a90 <_scanf_float+0xd4>
 8006a16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a1a:	b2c8      	uxtb	r0, r1
 8006a1c:	280e      	cmp	r0, #14
 8006a1e:	d93a      	bls.n	8006a96 <_scanf_float+0xda>
 8006a20:	f1b9 0f00 	cmp.w	r9, #0
 8006a24:	d003      	beq.n	8006a2e <_scanf_float+0x72>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a32:	f1ba 0f01 	cmp.w	sl, #1
 8006a36:	f200 8113 	bhi.w	8006c60 <_scanf_float+0x2a4>
 8006a3a:	455e      	cmp	r6, fp
 8006a3c:	f200 8105 	bhi.w	8006c4a <_scanf_float+0x28e>
 8006a40:	2501      	movs	r5, #1
 8006a42:	4628      	mov	r0, r5
 8006a44:	b007      	add	sp, #28
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a4e:	2a0d      	cmp	r2, #13
 8006a50:	d8e6      	bhi.n	8006a20 <_scanf_float+0x64>
 8006a52:	a101      	add	r1, pc, #4	; (adr r1, 8006a58 <_scanf_float+0x9c>)
 8006a54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a58:	08006b97 	.word	0x08006b97
 8006a5c:	08006a21 	.word	0x08006a21
 8006a60:	08006a21 	.word	0x08006a21
 8006a64:	08006a21 	.word	0x08006a21
 8006a68:	08006bf7 	.word	0x08006bf7
 8006a6c:	08006bcf 	.word	0x08006bcf
 8006a70:	08006a21 	.word	0x08006a21
 8006a74:	08006a21 	.word	0x08006a21
 8006a78:	08006ba5 	.word	0x08006ba5
 8006a7c:	08006a21 	.word	0x08006a21
 8006a80:	08006a21 	.word	0x08006a21
 8006a84:	08006a21 	.word	0x08006a21
 8006a88:	08006a21 	.word	0x08006a21
 8006a8c:	08006b5d 	.word	0x08006b5d
 8006a90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a94:	e7db      	b.n	8006a4e <_scanf_float+0x92>
 8006a96:	290e      	cmp	r1, #14
 8006a98:	d8c2      	bhi.n	8006a20 <_scanf_float+0x64>
 8006a9a:	a001      	add	r0, pc, #4	; (adr r0, 8006aa0 <_scanf_float+0xe4>)
 8006a9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006aa0:	08006b4f 	.word	0x08006b4f
 8006aa4:	08006a21 	.word	0x08006a21
 8006aa8:	08006b4f 	.word	0x08006b4f
 8006aac:	08006be3 	.word	0x08006be3
 8006ab0:	08006a21 	.word	0x08006a21
 8006ab4:	08006afd 	.word	0x08006afd
 8006ab8:	08006b39 	.word	0x08006b39
 8006abc:	08006b39 	.word	0x08006b39
 8006ac0:	08006b39 	.word	0x08006b39
 8006ac4:	08006b39 	.word	0x08006b39
 8006ac8:	08006b39 	.word	0x08006b39
 8006acc:	08006b39 	.word	0x08006b39
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006b39 	.word	0x08006b39
 8006adc:	2b6e      	cmp	r3, #110	; 0x6e
 8006ade:	d809      	bhi.n	8006af4 <_scanf_float+0x138>
 8006ae0:	2b60      	cmp	r3, #96	; 0x60
 8006ae2:	d8b2      	bhi.n	8006a4a <_scanf_float+0x8e>
 8006ae4:	2b54      	cmp	r3, #84	; 0x54
 8006ae6:	d077      	beq.n	8006bd8 <_scanf_float+0x21c>
 8006ae8:	2b59      	cmp	r3, #89	; 0x59
 8006aea:	d199      	bne.n	8006a20 <_scanf_float+0x64>
 8006aec:	2d07      	cmp	r5, #7
 8006aee:	d197      	bne.n	8006a20 <_scanf_float+0x64>
 8006af0:	2508      	movs	r5, #8
 8006af2:	e029      	b.n	8006b48 <_scanf_float+0x18c>
 8006af4:	2b74      	cmp	r3, #116	; 0x74
 8006af6:	d06f      	beq.n	8006bd8 <_scanf_float+0x21c>
 8006af8:	2b79      	cmp	r3, #121	; 0x79
 8006afa:	e7f6      	b.n	8006aea <_scanf_float+0x12e>
 8006afc:	6821      	ldr	r1, [r4, #0]
 8006afe:	05c8      	lsls	r0, r1, #23
 8006b00:	d51a      	bpl.n	8006b38 <_scanf_float+0x17c>
 8006b02:	9b02      	ldr	r3, [sp, #8]
 8006b04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b08:	6021      	str	r1, [r4, #0]
 8006b0a:	f109 0901 	add.w	r9, r9, #1
 8006b0e:	b11b      	cbz	r3, 8006b18 <_scanf_float+0x15c>
 8006b10:	3b01      	subs	r3, #1
 8006b12:	3201      	adds	r2, #1
 8006b14:	9302      	str	r3, [sp, #8]
 8006b16:	60a2      	str	r2, [r4, #8]
 8006b18:	68a3      	ldr	r3, [r4, #8]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60a3      	str	r3, [r4, #8]
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	3301      	adds	r3, #1
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	f340 8084 	ble.w	8006c38 <_scanf_float+0x27c>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	e766      	b.n	8006a06 <_scanf_float+0x4a>
 8006b38:	eb1a 0f05 	cmn.w	sl, r5
 8006b3c:	f47f af70 	bne.w	8006a20 <_scanf_float+0x64>
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	f806 3b01 	strb.w	r3, [r6], #1
 8006b4c:	e7e4      	b.n	8006b18 <_scanf_float+0x15c>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	0610      	lsls	r0, r2, #24
 8006b52:	f57f af65 	bpl.w	8006a20 <_scanf_float+0x64>
 8006b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b5a:	e7f4      	b.n	8006b46 <_scanf_float+0x18a>
 8006b5c:	f1ba 0f00 	cmp.w	sl, #0
 8006b60:	d10e      	bne.n	8006b80 <_scanf_float+0x1c4>
 8006b62:	f1b9 0f00 	cmp.w	r9, #0
 8006b66:	d10e      	bne.n	8006b86 <_scanf_float+0x1ca>
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b72:	d108      	bne.n	8006b86 <_scanf_float+0x1ca>
 8006b74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b78:	f04f 0a01 	mov.w	sl, #1
 8006b7c:	6022      	str	r2, [r4, #0]
 8006b7e:	e7e3      	b.n	8006b48 <_scanf_float+0x18c>
 8006b80:	f1ba 0f02 	cmp.w	sl, #2
 8006b84:	d055      	beq.n	8006c32 <_scanf_float+0x276>
 8006b86:	2d01      	cmp	r5, #1
 8006b88:	d002      	beq.n	8006b90 <_scanf_float+0x1d4>
 8006b8a:	2d04      	cmp	r5, #4
 8006b8c:	f47f af48 	bne.w	8006a20 <_scanf_float+0x64>
 8006b90:	3501      	adds	r5, #1
 8006b92:	b2ed      	uxtb	r5, r5
 8006b94:	e7d8      	b.n	8006b48 <_scanf_float+0x18c>
 8006b96:	f1ba 0f01 	cmp.w	sl, #1
 8006b9a:	f47f af41 	bne.w	8006a20 <_scanf_float+0x64>
 8006b9e:	f04f 0a02 	mov.w	sl, #2
 8006ba2:	e7d1      	b.n	8006b48 <_scanf_float+0x18c>
 8006ba4:	b97d      	cbnz	r5, 8006bc6 <_scanf_float+0x20a>
 8006ba6:	f1b9 0f00 	cmp.w	r9, #0
 8006baa:	f47f af3c 	bne.w	8006a26 <_scanf_float+0x6a>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bb8:	f47f af39 	bne.w	8006a2e <_scanf_float+0x72>
 8006bbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bc0:	2501      	movs	r5, #1
 8006bc2:	6022      	str	r2, [r4, #0]
 8006bc4:	e7c0      	b.n	8006b48 <_scanf_float+0x18c>
 8006bc6:	2d03      	cmp	r5, #3
 8006bc8:	d0e2      	beq.n	8006b90 <_scanf_float+0x1d4>
 8006bca:	2d05      	cmp	r5, #5
 8006bcc:	e7de      	b.n	8006b8c <_scanf_float+0x1d0>
 8006bce:	2d02      	cmp	r5, #2
 8006bd0:	f47f af26 	bne.w	8006a20 <_scanf_float+0x64>
 8006bd4:	2503      	movs	r5, #3
 8006bd6:	e7b7      	b.n	8006b48 <_scanf_float+0x18c>
 8006bd8:	2d06      	cmp	r5, #6
 8006bda:	f47f af21 	bne.w	8006a20 <_scanf_float+0x64>
 8006bde:	2507      	movs	r5, #7
 8006be0:	e7b2      	b.n	8006b48 <_scanf_float+0x18c>
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	0591      	lsls	r1, r2, #22
 8006be6:	f57f af1b 	bpl.w	8006a20 <_scanf_float+0x64>
 8006bea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006bee:	6022      	str	r2, [r4, #0]
 8006bf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bf4:	e7a8      	b.n	8006b48 <_scanf_float+0x18c>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006bfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c00:	d006      	beq.n	8006c10 <_scanf_float+0x254>
 8006c02:	0550      	lsls	r0, r2, #21
 8006c04:	f57f af0c 	bpl.w	8006a20 <_scanf_float+0x64>
 8006c08:	f1b9 0f00 	cmp.w	r9, #0
 8006c0c:	f43f af0f 	beq.w	8006a2e <_scanf_float+0x72>
 8006c10:	0591      	lsls	r1, r2, #22
 8006c12:	bf58      	it	pl
 8006c14:	9901      	ldrpl	r1, [sp, #4]
 8006c16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c1a:	bf58      	it	pl
 8006c1c:	eba9 0101 	subpl.w	r1, r9, r1
 8006c20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c24:	f04f 0900 	mov.w	r9, #0
 8006c28:	bf58      	it	pl
 8006c2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	e78a      	b.n	8006b48 <_scanf_float+0x18c>
 8006c32:	f04f 0a03 	mov.w	sl, #3
 8006c36:	e787      	b.n	8006b48 <_scanf_float+0x18c>
 8006c38:	4639      	mov	r1, r7
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c40:	4798      	blx	r3
 8006c42:	2800      	cmp	r0, #0
 8006c44:	f43f aedf 	beq.w	8006a06 <_scanf_float+0x4a>
 8006c48:	e6ea      	b.n	8006a20 <_scanf_float+0x64>
 8006c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c4e:	463a      	mov	r2, r7
 8006c50:	4640      	mov	r0, r8
 8006c52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c56:	4798      	blx	r3
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	e6ec      	b.n	8006a3a <_scanf_float+0x7e>
 8006c60:	1e6b      	subs	r3, r5, #1
 8006c62:	2b06      	cmp	r3, #6
 8006c64:	d825      	bhi.n	8006cb2 <_scanf_float+0x2f6>
 8006c66:	2d02      	cmp	r5, #2
 8006c68:	d836      	bhi.n	8006cd8 <_scanf_float+0x31c>
 8006c6a:	455e      	cmp	r6, fp
 8006c6c:	f67f aee8 	bls.w	8006a40 <_scanf_float+0x84>
 8006c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c74:	463a      	mov	r2, r7
 8006c76:	4640      	mov	r0, r8
 8006c78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c7c:	4798      	blx	r3
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	6123      	str	r3, [r4, #16]
 8006c84:	e7f1      	b.n	8006c6a <_scanf_float+0x2ae>
 8006c86:	9802      	ldr	r0, [sp, #8]
 8006c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c90:	463a      	mov	r2, r7
 8006c92:	9002      	str	r0, [sp, #8]
 8006c94:	4640      	mov	r0, r8
 8006c96:	4798      	blx	r3
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ca2:	fa5f fa8a 	uxtb.w	sl, sl
 8006ca6:	f1ba 0f02 	cmp.w	sl, #2
 8006caa:	d1ec      	bne.n	8006c86 <_scanf_float+0x2ca>
 8006cac:	3d03      	subs	r5, #3
 8006cae:	b2ed      	uxtb	r5, r5
 8006cb0:	1b76      	subs	r6, r6, r5
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	05da      	lsls	r2, r3, #23
 8006cb6:	d52f      	bpl.n	8006d18 <_scanf_float+0x35c>
 8006cb8:	055b      	lsls	r3, r3, #21
 8006cba:	d510      	bpl.n	8006cde <_scanf_float+0x322>
 8006cbc:	455e      	cmp	r6, fp
 8006cbe:	f67f aebf 	bls.w	8006a40 <_scanf_float+0x84>
 8006cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cc6:	463a      	mov	r2, r7
 8006cc8:	4640      	mov	r0, r8
 8006cca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cce:	4798      	blx	r3
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	e7f1      	b.n	8006cbc <_scanf_float+0x300>
 8006cd8:	46aa      	mov	sl, r5
 8006cda:	9602      	str	r6, [sp, #8]
 8006cdc:	e7df      	b.n	8006c9e <_scanf_float+0x2e2>
 8006cde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	2965      	cmp	r1, #101	; 0x65
 8006ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cea:	f106 35ff 	add.w	r5, r6, #4294967295
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	d00c      	beq.n	8006d0c <_scanf_float+0x350>
 8006cf2:	2945      	cmp	r1, #69	; 0x45
 8006cf4:	d00a      	beq.n	8006d0c <_scanf_float+0x350>
 8006cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cfa:	463a      	mov	r2, r7
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4798      	blx	r3
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	1eb5      	subs	r5, r6, #2
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d14:	4798      	blx	r3
 8006d16:	462e      	mov	r6, r5
 8006d18:	6825      	ldr	r5, [r4, #0]
 8006d1a:	f015 0510 	ands.w	r5, r5, #16
 8006d1e:	d155      	bne.n	8006dcc <_scanf_float+0x410>
 8006d20:	7035      	strb	r5, [r6, #0]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d11d      	bne.n	8006d6a <_scanf_float+0x3ae>
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	454b      	cmp	r3, r9
 8006d32:	eba3 0209 	sub.w	r2, r3, r9
 8006d36:	d125      	bne.n	8006d84 <_scanf_float+0x3c8>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4659      	mov	r1, fp
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	f002 fc23 	bl	8009588 <_strtod_r>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	f8d4 c000 	ldr.w	ip, [r4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f01c 0f02 	tst.w	ip, #2
 8006d4e:	4606      	mov	r6, r0
 8006d50:	460f      	mov	r7, r1
 8006d52:	f103 0204 	add.w	r2, r3, #4
 8006d56:	d020      	beq.n	8006d9a <_scanf_float+0x3de>
 8006d58:	9903      	ldr	r1, [sp, #12]
 8006d5a:	600a      	str	r2, [r1, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	e9c3 6700 	strd	r6, r7, [r3]
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	3301      	adds	r3, #1
 8006d66:	60e3      	str	r3, [r4, #12]
 8006d68:	e66b      	b.n	8006a42 <_scanf_float+0x86>
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0e3      	beq.n	8006d38 <_scanf_float+0x37c>
 8006d70:	9905      	ldr	r1, [sp, #20]
 8006d72:	230a      	movs	r3, #10
 8006d74:	462a      	mov	r2, r5
 8006d76:	4640      	mov	r0, r8
 8006d78:	3101      	adds	r1, #1
 8006d7a:	f002 fc89 	bl	8009690 <_strtol_r>
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	9e05      	ldr	r6, [sp, #20]
 8006d82:	1ac2      	subs	r2, r0, r3
 8006d84:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d88:	429e      	cmp	r6, r3
 8006d8a:	bf28      	it	cs
 8006d8c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d90:	4630      	mov	r0, r6
 8006d92:	490f      	ldr	r1, [pc, #60]	; (8006dd0 <_scanf_float+0x414>)
 8006d94:	f000 f8e2 	bl	8006f5c <siprintf>
 8006d98:	e7ce      	b.n	8006d38 <_scanf_float+0x37c>
 8006d9a:	f01c 0f04 	tst.w	ip, #4
 8006d9e:	d1db      	bne.n	8006d58 <_scanf_float+0x39c>
 8006da0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006da4:	f8cc 2000 	str.w	r2, [ip]
 8006da8:	f8d3 8000 	ldr.w	r8, [r3]
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	f7f9 fee0 	bl	8000b74 <__aeabi_dcmpun>
 8006db4:	b128      	cbz	r0, 8006dc2 <_scanf_float+0x406>
 8006db6:	4807      	ldr	r0, [pc, #28]	; (8006dd4 <_scanf_float+0x418>)
 8006db8:	f000 f9c2 	bl	8007140 <nanf>
 8006dbc:	f8c8 0000 	str.w	r0, [r8]
 8006dc0:	e7cf      	b.n	8006d62 <_scanf_float+0x3a6>
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7f9 ff33 	bl	8000c30 <__aeabi_d2f>
 8006dca:	e7f7      	b.n	8006dbc <_scanf_float+0x400>
 8006dcc:	2500      	movs	r5, #0
 8006dce:	e638      	b.n	8006a42 <_scanf_float+0x86>
 8006dd0:	0800a982 	.word	0x0800a982
 8006dd4:	0800ad15 	.word	0x0800ad15

08006dd8 <std>:
 8006dd8:	2300      	movs	r3, #0
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
 8006dde:	e9c0 3300 	strd	r3, r3, [r0]
 8006de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de6:	6083      	str	r3, [r0, #8]
 8006de8:	8181      	strh	r1, [r0, #12]
 8006dea:	6643      	str	r3, [r0, #100]	; 0x64
 8006dec:	81c2      	strh	r2, [r0, #14]
 8006dee:	6183      	str	r3, [r0, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	2208      	movs	r2, #8
 8006df4:	305c      	adds	r0, #92	; 0x5c
 8006df6:	f000 f914 	bl	8007022 <memset>
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <std+0x58>)
 8006dfc:	6224      	str	r4, [r4, #32]
 8006dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8006e00:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <std+0x5c>)
 8006e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <std+0x60>)
 8006e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <std+0x64>)
 8006e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e0c:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <std+0x68>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d006      	beq.n	8006e20 <std+0x48>
 8006e12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e16:	4294      	cmp	r4, r2
 8006e18:	d002      	beq.n	8006e20 <std+0x48>
 8006e1a:	33d0      	adds	r3, #208	; 0xd0
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	d105      	bne.n	8006e2c <std+0x54>
 8006e20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e28:	f000 b978 	b.w	800711c <__retarget_lock_init_recursive>
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	08006f9d 	.word	0x08006f9d
 8006e34:	08006fbf 	.word	0x08006fbf
 8006e38:	08006ff7 	.word	0x08006ff7
 8006e3c:	0800701b 	.word	0x0800701b
 8006e40:	200003c4 	.word	0x200003c4

08006e44 <stdio_exit_handler>:
 8006e44:	4a02      	ldr	r2, [pc, #8]	; (8006e50 <stdio_exit_handler+0xc>)
 8006e46:	4903      	ldr	r1, [pc, #12]	; (8006e54 <stdio_exit_handler+0x10>)
 8006e48:	4803      	ldr	r0, [pc, #12]	; (8006e58 <stdio_exit_handler+0x14>)
 8006e4a:	f000 b869 	b.w	8006f20 <_fwalk_sglue>
 8006e4e:	bf00      	nop
 8006e50:	20000014 	.word	0x20000014
 8006e54:	08009a49 	.word	0x08009a49
 8006e58:	20000020 	.word	0x20000020

08006e5c <cleanup_stdio>:
 8006e5c:	6841      	ldr	r1, [r0, #4]
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <cleanup_stdio+0x34>)
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4299      	cmp	r1, r3
 8006e64:	4604      	mov	r4, r0
 8006e66:	d001      	beq.n	8006e6c <cleanup_stdio+0x10>
 8006e68:	f002 fdee 	bl	8009a48 <_fflush_r>
 8006e6c:	68a1      	ldr	r1, [r4, #8]
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <cleanup_stdio+0x38>)
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d002      	beq.n	8006e7a <cleanup_stdio+0x1e>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f002 fde7 	bl	8009a48 <_fflush_r>
 8006e7a:	68e1      	ldr	r1, [r4, #12]
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <cleanup_stdio+0x3c>)
 8006e7e:	4299      	cmp	r1, r3
 8006e80:	d004      	beq.n	8006e8c <cleanup_stdio+0x30>
 8006e82:	4620      	mov	r0, r4
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f002 bdde 	b.w	8009a48 <_fflush_r>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	200003c4 	.word	0x200003c4
 8006e94:	2000042c 	.word	0x2000042c
 8006e98:	20000494 	.word	0x20000494

08006e9c <global_stdio_init.part.0>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <global_stdio_init.part.0+0x30>)
 8006ea0:	4c0b      	ldr	r4, [pc, #44]	; (8006ed0 <global_stdio_init.part.0+0x34>)
 8006ea2:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <global_stdio_init.part.0+0x38>)
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f7ff ff94 	bl	8006dd8 <std>
 8006eb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2109      	movs	r1, #9
 8006eb8:	f7ff ff8e 	bl	8006dd8 <std>
 8006ebc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec6:	2112      	movs	r1, #18
 8006ec8:	f7ff bf86 	b.w	8006dd8 <std>
 8006ecc:	200004fc 	.word	0x200004fc
 8006ed0:	200003c4 	.word	0x200003c4
 8006ed4:	08006e45 	.word	0x08006e45

08006ed8 <__sfp_lock_acquire>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sfp_lock_acquire+0x8>)
 8006eda:	f000 b920 	b.w	800711e <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20000505 	.word	0x20000505

08006ee4 <__sfp_lock_release>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__sfp_lock_release+0x8>)
 8006ee6:	f000 b91b 	b.w	8007120 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	20000505 	.word	0x20000505

08006ef0 <__sinit>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	f7ff fff0 	bl	8006ed8 <__sfp_lock_acquire>
 8006ef8:	6a23      	ldr	r3, [r4, #32]
 8006efa:	b11b      	cbz	r3, 8006f04 <__sinit+0x14>
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f7ff bff0 	b.w	8006ee4 <__sfp_lock_release>
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <__sinit+0x28>)
 8006f06:	6223      	str	r3, [r4, #32]
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <__sinit+0x2c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f5      	bne.n	8006efc <__sinit+0xc>
 8006f10:	f7ff ffc4 	bl	8006e9c <global_stdio_init.part.0>
 8006f14:	e7f2      	b.n	8006efc <__sinit+0xc>
 8006f16:	bf00      	nop
 8006f18:	08006e5d 	.word	0x08006e5d
 8006f1c:	200004fc 	.word	0x200004fc

08006f20 <_fwalk_sglue>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	4607      	mov	r7, r0
 8006f26:	4688      	mov	r8, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f30:	f1b9 0901 	subs.w	r9, r9, #1
 8006f34:	d505      	bpl.n	8006f42 <_fwalk_sglue+0x22>
 8006f36:	6824      	ldr	r4, [r4, #0]
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	d1f7      	bne.n	8006f2c <_fwalk_sglue+0xc>
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d907      	bls.n	8006f58 <_fwalk_sglue+0x38>
 8006f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	d003      	beq.n	8006f58 <_fwalk_sglue+0x38>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4638      	mov	r0, r7
 8006f54:	47c0      	blx	r8
 8006f56:	4306      	orrs	r6, r0
 8006f58:	3568      	adds	r5, #104	; 0x68
 8006f5a:	e7e9      	b.n	8006f30 <_fwalk_sglue+0x10>

08006f5c <siprintf>:
 8006f5c:	b40e      	push	{r1, r2, r3}
 8006f5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f62:	b500      	push	{lr}
 8006f64:	b09c      	sub	sp, #112	; 0x70
 8006f66:	ab1d      	add	r3, sp, #116	; 0x74
 8006f68:	9002      	str	r0, [sp, #8]
 8006f6a:	9006      	str	r0, [sp, #24]
 8006f6c:	9107      	str	r1, [sp, #28]
 8006f6e:	9104      	str	r1, [sp, #16]
 8006f70:	4808      	ldr	r0, [pc, #32]	; (8006f94 <siprintf+0x38>)
 8006f72:	4909      	ldr	r1, [pc, #36]	; (8006f98 <siprintf+0x3c>)
 8006f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f78:	9105      	str	r1, [sp, #20]
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	a902      	add	r1, sp, #8
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	f002 fbe2 	bl	8009748 <_svfiprintf_r>
 8006f84:	2200      	movs	r2, #0
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	b01c      	add	sp, #112	; 0x70
 8006f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f90:	b003      	add	sp, #12
 8006f92:	4770      	bx	lr
 8006f94:	2000006c 	.word	0x2000006c
 8006f98:	ffff0208 	.word	0xffff0208

08006f9c <__sread>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa4:	f000 f86c 	bl	8007080 <_read_r>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	bfab      	itete	ge
 8006fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fae:	89a3      	ldrhlt	r3, [r4, #12]
 8006fb0:	181b      	addge	r3, r3, r0
 8006fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fb6:	bfac      	ite	ge
 8006fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fba:	81a3      	strhlt	r3, [r4, #12]
 8006fbc:	bd10      	pop	{r4, pc}

08006fbe <__swrite>:
 8006fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	898b      	ldrh	r3, [r1, #12]
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	05db      	lsls	r3, r3, #23
 8006fca:	460c      	mov	r4, r1
 8006fcc:	4616      	mov	r6, r2
 8006fce:	d505      	bpl.n	8006fdc <__swrite+0x1e>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd8:	f000 f840 	bl	800705c <_lseek_r>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	4632      	mov	r2, r6
 8006fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	463b      	mov	r3, r7
 8006fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff2:	f000 b857 	b.w	80070a4 <_write_r>

08006ff6 <__sseek>:
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffe:	f000 f82d 	bl	800705c <_lseek_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	bf15      	itete	ne
 8007008:	6560      	strne	r0, [r4, #84]	; 0x54
 800700a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800700e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007012:	81a3      	strheq	r3, [r4, #12]
 8007014:	bf18      	it	ne
 8007016:	81a3      	strhne	r3, [r4, #12]
 8007018:	bd10      	pop	{r4, pc}

0800701a <__sclose>:
 800701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701e:	f000 b80d 	b.w	800703c <_close_r>

08007022 <memset>:
 8007022:	4603      	mov	r3, r0
 8007024:	4402      	add	r2, r0
 8007026:	4293      	cmp	r3, r2
 8007028:	d100      	bne.n	800702c <memset+0xa>
 800702a:	4770      	bx	lr
 800702c:	f803 1b01 	strb.w	r1, [r3], #1
 8007030:	e7f9      	b.n	8007026 <memset+0x4>
	...

08007034 <_localeconv_r>:
 8007034:	4800      	ldr	r0, [pc, #0]	; (8007038 <_localeconv_r+0x4>)
 8007036:	4770      	bx	lr
 8007038:	20000160 	.word	0x20000160

0800703c <_close_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	2300      	movs	r3, #0
 8007040:	4d05      	ldr	r5, [pc, #20]	; (8007058 <_close_r+0x1c>)
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa ff3c 	bl	8001ec4 <_close>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_close_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_close_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000500 	.word	0x20000500

0800705c <_lseek_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	2200      	movs	r2, #0
 8007066:	4d05      	ldr	r5, [pc, #20]	; (800707c <_lseek_r+0x20>)
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7fa ff4e 	bl	8001f0c <_lseek>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_lseek_r+0x1e>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_lseek_r+0x1e>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20000500 	.word	0x20000500

08007080 <_read_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	2200      	movs	r2, #0
 800708a:	4d05      	ldr	r5, [pc, #20]	; (80070a0 <_read_r+0x20>)
 800708c:	602a      	str	r2, [r5, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	f7fa fedf 	bl	8001e52 <_read>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_read_r+0x1e>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_read_r+0x1e>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	20000500 	.word	0x20000500

080070a4 <_write_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	2200      	movs	r2, #0
 80070ae:	4d05      	ldr	r5, [pc, #20]	; (80070c4 <_write_r+0x20>)
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7fa feea 	bl	8001e8c <_write>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_write_r+0x1e>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_write_r+0x1e>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000500 	.word	0x20000500

080070c8 <__errno>:
 80070c8:	4b01      	ldr	r3, [pc, #4]	; (80070d0 <__errno+0x8>)
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	2000006c 	.word	0x2000006c

080070d4 <__libc_init_array>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	2600      	movs	r6, #0
 80070d8:	4d0c      	ldr	r5, [pc, #48]	; (800710c <__libc_init_array+0x38>)
 80070da:	4c0d      	ldr	r4, [pc, #52]	; (8007110 <__libc_init_array+0x3c>)
 80070dc:	1b64      	subs	r4, r4, r5
 80070de:	10a4      	asrs	r4, r4, #2
 80070e0:	42a6      	cmp	r6, r4
 80070e2:	d109      	bne.n	80070f8 <__libc_init_array+0x24>
 80070e4:	f003 fbc2 	bl	800a86c <_init>
 80070e8:	2600      	movs	r6, #0
 80070ea:	4d0a      	ldr	r5, [pc, #40]	; (8007114 <__libc_init_array+0x40>)
 80070ec:	4c0a      	ldr	r4, [pc, #40]	; (8007118 <__libc_init_array+0x44>)
 80070ee:	1b64      	subs	r4, r4, r5
 80070f0:	10a4      	asrs	r4, r4, #2
 80070f2:	42a6      	cmp	r6, r4
 80070f4:	d105      	bne.n	8007102 <__libc_init_array+0x2e>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fc:	4798      	blx	r3
 80070fe:	3601      	adds	r6, #1
 8007100:	e7ee      	b.n	80070e0 <__libc_init_array+0xc>
 8007102:	f855 3b04 	ldr.w	r3, [r5], #4
 8007106:	4798      	blx	r3
 8007108:	3601      	adds	r6, #1
 800710a:	e7f2      	b.n	80070f2 <__libc_init_array+0x1e>
 800710c:	0800ad78 	.word	0x0800ad78
 8007110:	0800ad78 	.word	0x0800ad78
 8007114:	0800ad78 	.word	0x0800ad78
 8007118:	0800ad7c 	.word	0x0800ad7c

0800711c <__retarget_lock_init_recursive>:
 800711c:	4770      	bx	lr

0800711e <__retarget_lock_acquire_recursive>:
 800711e:	4770      	bx	lr

08007120 <__retarget_lock_release_recursive>:
 8007120:	4770      	bx	lr

08007122 <memchr>:
 8007122:	4603      	mov	r3, r0
 8007124:	b510      	push	{r4, lr}
 8007126:	b2c9      	uxtb	r1, r1
 8007128:	4402      	add	r2, r0
 800712a:	4293      	cmp	r3, r2
 800712c:	4618      	mov	r0, r3
 800712e:	d101      	bne.n	8007134 <memchr+0x12>
 8007130:	2000      	movs	r0, #0
 8007132:	e003      	b.n	800713c <memchr+0x1a>
 8007134:	7804      	ldrb	r4, [r0, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	428c      	cmp	r4, r1
 800713a:	d1f6      	bne.n	800712a <memchr+0x8>
 800713c:	bd10      	pop	{r4, pc}
	...

08007140 <nanf>:
 8007140:	4800      	ldr	r0, [pc, #0]	; (8007144 <nanf+0x4>)
 8007142:	4770      	bx	lr
 8007144:	7fc00000 	.word	0x7fc00000

08007148 <quorem>:
 8007148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	6903      	ldr	r3, [r0, #16]
 800714e:	690c      	ldr	r4, [r1, #16]
 8007150:	4607      	mov	r7, r0
 8007152:	42a3      	cmp	r3, r4
 8007154:	db7f      	blt.n	8007256 <quorem+0x10e>
 8007156:	3c01      	subs	r4, #1
 8007158:	f100 0514 	add.w	r5, r0, #20
 800715c:	f101 0814 	add.w	r8, r1, #20
 8007160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800716a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800716e:	3301      	adds	r3, #1
 8007170:	429a      	cmp	r2, r3
 8007172:	fbb2 f6f3 	udiv	r6, r2, r3
 8007176:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800717a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800717e:	d331      	bcc.n	80071e4 <quorem+0x9c>
 8007180:	f04f 0e00 	mov.w	lr, #0
 8007184:	4640      	mov	r0, r8
 8007186:	46ac      	mov	ip, r5
 8007188:	46f2      	mov	sl, lr
 800718a:	f850 2b04 	ldr.w	r2, [r0], #4
 800718e:	b293      	uxth	r3, r2
 8007190:	fb06 e303 	mla	r3, r6, r3, lr
 8007194:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007198:	0c1a      	lsrs	r2, r3, #16
 800719a:	b29b      	uxth	r3, r3
 800719c:	fb06 220e 	mla	r2, r6, lr, r2
 80071a0:	ebaa 0303 	sub.w	r3, sl, r3
 80071a4:	f8dc a000 	ldr.w	sl, [ip]
 80071a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071ac:	fa1f fa8a 	uxth.w	sl, sl
 80071b0:	4453      	add	r3, sl
 80071b2:	f8dc a000 	ldr.w	sl, [ip]
 80071b6:	b292      	uxth	r2, r2
 80071b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c6:	4581      	cmp	r9, r0
 80071c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071cc:	f84c 3b04 	str.w	r3, [ip], #4
 80071d0:	d2db      	bcs.n	800718a <quorem+0x42>
 80071d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80071d6:	b92b      	cbnz	r3, 80071e4 <quorem+0x9c>
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	3b04      	subs	r3, #4
 80071dc:	429d      	cmp	r5, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	d32d      	bcc.n	800723e <quorem+0xf6>
 80071e2:	613c      	str	r4, [r7, #16]
 80071e4:	4638      	mov	r0, r7
 80071e6:	f001 f9df 	bl	80085a8 <__mcmp>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	db23      	blt.n	8007236 <quorem+0xee>
 80071ee:	4629      	mov	r1, r5
 80071f0:	2000      	movs	r0, #0
 80071f2:	3601      	adds	r6, #1
 80071f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071f8:	f8d1 c000 	ldr.w	ip, [r1]
 80071fc:	b293      	uxth	r3, r2
 80071fe:	1ac3      	subs	r3, r0, r3
 8007200:	0c12      	lsrs	r2, r2, #16
 8007202:	fa1f f08c 	uxth.w	r0, ip
 8007206:	4403      	add	r3, r0
 8007208:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800720c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007216:	45c1      	cmp	r9, r8
 8007218:	ea4f 4022 	mov.w	r0, r2, asr #16
 800721c:	f841 3b04 	str.w	r3, [r1], #4
 8007220:	d2e8      	bcs.n	80071f4 <quorem+0xac>
 8007222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722a:	b922      	cbnz	r2, 8007236 <quorem+0xee>
 800722c:	3b04      	subs	r3, #4
 800722e:	429d      	cmp	r5, r3
 8007230:	461a      	mov	r2, r3
 8007232:	d30a      	bcc.n	800724a <quorem+0x102>
 8007234:	613c      	str	r4, [r7, #16]
 8007236:	4630      	mov	r0, r6
 8007238:	b003      	add	sp, #12
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	3b04      	subs	r3, #4
 8007242:	2a00      	cmp	r2, #0
 8007244:	d1cd      	bne.n	80071e2 <quorem+0x9a>
 8007246:	3c01      	subs	r4, #1
 8007248:	e7c8      	b.n	80071dc <quorem+0x94>
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	3b04      	subs	r3, #4
 800724e:	2a00      	cmp	r2, #0
 8007250:	d1f0      	bne.n	8007234 <quorem+0xec>
 8007252:	3c01      	subs	r4, #1
 8007254:	e7eb      	b.n	800722e <quorem+0xe6>
 8007256:	2000      	movs	r0, #0
 8007258:	e7ee      	b.n	8007238 <quorem+0xf0>
 800725a:	0000      	movs	r0, r0
 800725c:	0000      	movs	r0, r0
	...

08007260 <_dtoa_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	4616      	mov	r6, r2
 8007266:	461f      	mov	r7, r3
 8007268:	69c4      	ldr	r4, [r0, #28]
 800726a:	b099      	sub	sp, #100	; 0x64
 800726c:	4605      	mov	r5, r0
 800726e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007272:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007276:	b974      	cbnz	r4, 8007296 <_dtoa_r+0x36>
 8007278:	2010      	movs	r0, #16
 800727a:	f000 fe1d 	bl	8007eb8 <malloc>
 800727e:	4602      	mov	r2, r0
 8007280:	61e8      	str	r0, [r5, #28]
 8007282:	b920      	cbnz	r0, 800728e <_dtoa_r+0x2e>
 8007284:	21ef      	movs	r1, #239	; 0xef
 8007286:	4bac      	ldr	r3, [pc, #688]	; (8007538 <_dtoa_r+0x2d8>)
 8007288:	48ac      	ldr	r0, [pc, #688]	; (800753c <_dtoa_r+0x2dc>)
 800728a:	f002 fc55 	bl	8009b38 <__assert_func>
 800728e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007292:	6004      	str	r4, [r0, #0]
 8007294:	60c4      	str	r4, [r0, #12]
 8007296:	69eb      	ldr	r3, [r5, #28]
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	b151      	cbz	r1, 80072b2 <_dtoa_r+0x52>
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	2301      	movs	r3, #1
 80072a0:	4093      	lsls	r3, r2
 80072a2:	604a      	str	r2, [r1, #4]
 80072a4:	608b      	str	r3, [r1, #8]
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fefa 	bl	80080a0 <_Bfree>
 80072ac:	2200      	movs	r2, #0
 80072ae:	69eb      	ldr	r3, [r5, #28]
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	1e3b      	subs	r3, r7, #0
 80072b4:	bfaf      	iteee	ge
 80072b6:	2300      	movge	r3, #0
 80072b8:	2201      	movlt	r2, #1
 80072ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072be:	9305      	strlt	r3, [sp, #20]
 80072c0:	bfa8      	it	ge
 80072c2:	f8c8 3000 	strge.w	r3, [r8]
 80072c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80072ca:	4b9d      	ldr	r3, [pc, #628]	; (8007540 <_dtoa_r+0x2e0>)
 80072cc:	bfb8      	it	lt
 80072ce:	f8c8 2000 	strlt.w	r2, [r8]
 80072d2:	ea33 0309 	bics.w	r3, r3, r9
 80072d6:	d119      	bne.n	800730c <_dtoa_r+0xac>
 80072d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80072dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072e4:	4333      	orrs	r3, r6
 80072e6:	f000 8589 	beq.w	8007dfc <_dtoa_r+0xb9c>
 80072ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072ec:	b953      	cbnz	r3, 8007304 <_dtoa_r+0xa4>
 80072ee:	4b95      	ldr	r3, [pc, #596]	; (8007544 <_dtoa_r+0x2e4>)
 80072f0:	e023      	b.n	800733a <_dtoa_r+0xda>
 80072f2:	4b95      	ldr	r3, [pc, #596]	; (8007548 <_dtoa_r+0x2e8>)
 80072f4:	9303      	str	r3, [sp, #12]
 80072f6:	3308      	adds	r3, #8
 80072f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	9803      	ldr	r0, [sp, #12]
 80072fe:	b019      	add	sp, #100	; 0x64
 8007300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007304:	4b8f      	ldr	r3, [pc, #572]	; (8007544 <_dtoa_r+0x2e4>)
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	3303      	adds	r3, #3
 800730a:	e7f5      	b.n	80072f8 <_dtoa_r+0x98>
 800730c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007310:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007318:	2200      	movs	r2, #0
 800731a:	2300      	movs	r3, #0
 800731c:	f7f9 fbf8 	bl	8000b10 <__aeabi_dcmpeq>
 8007320:	4680      	mov	r8, r0
 8007322:	b160      	cbz	r0, 800733e <_dtoa_r+0xde>
 8007324:	2301      	movs	r3, #1
 8007326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8562 	beq.w	8007df6 <_dtoa_r+0xb96>
 8007332:	4b86      	ldr	r3, [pc, #536]	; (800754c <_dtoa_r+0x2ec>)
 8007334:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	3b01      	subs	r3, #1
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	e7de      	b.n	80072fc <_dtoa_r+0x9c>
 800733e:	ab16      	add	r3, sp, #88	; 0x58
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	ab17      	add	r3, sp, #92	; 0x5c
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4628      	mov	r0, r5
 8007348:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800734c:	f001 fa3c 	bl	80087c8 <__d2b>
 8007350:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007354:	4682      	mov	sl, r0
 8007356:	2c00      	cmp	r4, #0
 8007358:	d07e      	beq.n	8007458 <_dtoa_r+0x1f8>
 800735a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800735e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007360:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007368:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800736c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007370:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007374:	4619      	mov	r1, r3
 8007376:	2200      	movs	r2, #0
 8007378:	4b75      	ldr	r3, [pc, #468]	; (8007550 <_dtoa_r+0x2f0>)
 800737a:	f7f8 ffa9 	bl	80002d0 <__aeabi_dsub>
 800737e:	a368      	add	r3, pc, #416	; (adr r3, 8007520 <_dtoa_r+0x2c0>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f7f9 f95c 	bl	8000640 <__aeabi_dmul>
 8007388:	a367      	add	r3, pc, #412	; (adr r3, 8007528 <_dtoa_r+0x2c8>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f8 ffa1 	bl	80002d4 <__adddf3>
 8007392:	4606      	mov	r6, r0
 8007394:	4620      	mov	r0, r4
 8007396:	460f      	mov	r7, r1
 8007398:	f7f9 f8e8 	bl	800056c <__aeabi_i2d>
 800739c:	a364      	add	r3, pc, #400	; (adr r3, 8007530 <_dtoa_r+0x2d0>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f9 f94d 	bl	8000640 <__aeabi_dmul>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	f7f8 ff91 	bl	80002d4 <__adddf3>
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	f7f9 fbf3 	bl	8000ba0 <__aeabi_d2iz>
 80073ba:	2200      	movs	r2, #0
 80073bc:	4683      	mov	fp, r0
 80073be:	2300      	movs	r3, #0
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f9 fbae 	bl	8000b24 <__aeabi_dcmplt>
 80073c8:	b148      	cbz	r0, 80073de <_dtoa_r+0x17e>
 80073ca:	4658      	mov	r0, fp
 80073cc:	f7f9 f8ce 	bl	800056c <__aeabi_i2d>
 80073d0:	4632      	mov	r2, r6
 80073d2:	463b      	mov	r3, r7
 80073d4:	f7f9 fb9c 	bl	8000b10 <__aeabi_dcmpeq>
 80073d8:	b908      	cbnz	r0, 80073de <_dtoa_r+0x17e>
 80073da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073de:	f1bb 0f16 	cmp.w	fp, #22
 80073e2:	d857      	bhi.n	8007494 <_dtoa_r+0x234>
 80073e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e8:	4b5a      	ldr	r3, [pc, #360]	; (8007554 <_dtoa_r+0x2f4>)
 80073ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f9 fb97 	bl	8000b24 <__aeabi_dcmplt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d04e      	beq.n	8007498 <_dtoa_r+0x238>
 80073fa:	2300      	movs	r3, #0
 80073fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007400:	930f      	str	r3, [sp, #60]	; 0x3c
 8007402:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007404:	1b1b      	subs	r3, r3, r4
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	bf46      	itte	mi
 800740a:	f1c3 0901 	rsbmi	r9, r3, #1
 800740e:	2300      	movmi	r3, #0
 8007410:	f04f 0900 	movpl.w	r9, #0
 8007414:	9209      	str	r2, [sp, #36]	; 0x24
 8007416:	bf48      	it	mi
 8007418:	9309      	strmi	r3, [sp, #36]	; 0x24
 800741a:	f1bb 0f00 	cmp.w	fp, #0
 800741e:	db3d      	blt.n	800749c <_dtoa_r+0x23c>
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007426:	445b      	add	r3, fp
 8007428:	9309      	str	r3, [sp, #36]	; 0x24
 800742a:	2300      	movs	r3, #0
 800742c:	930a      	str	r3, [sp, #40]	; 0x28
 800742e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007430:	2b09      	cmp	r3, #9
 8007432:	d867      	bhi.n	8007504 <_dtoa_r+0x2a4>
 8007434:	2b05      	cmp	r3, #5
 8007436:	bfc4      	itt	gt
 8007438:	3b04      	subgt	r3, #4
 800743a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800743c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800743e:	bfc8      	it	gt
 8007440:	2400      	movgt	r4, #0
 8007442:	f1a3 0302 	sub.w	r3, r3, #2
 8007446:	bfd8      	it	le
 8007448:	2401      	movle	r4, #1
 800744a:	2b03      	cmp	r3, #3
 800744c:	f200 8086 	bhi.w	800755c <_dtoa_r+0x2fc>
 8007450:	e8df f003 	tbb	[pc, r3]
 8007454:	5637392c 	.word	0x5637392c
 8007458:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800745c:	441c      	add	r4, r3
 800745e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007462:	2b20      	cmp	r3, #32
 8007464:	bfc1      	itttt	gt
 8007466:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800746a:	fa09 f903 	lslgt.w	r9, r9, r3
 800746e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007472:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007476:	bfd6      	itet	le
 8007478:	f1c3 0320 	rsble	r3, r3, #32
 800747c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007480:	fa06 f003 	lslle.w	r0, r6, r3
 8007484:	f7f9 f862 	bl	800054c <__aeabi_ui2d>
 8007488:	2201      	movs	r2, #1
 800748a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800748e:	3c01      	subs	r4, #1
 8007490:	9213      	str	r2, [sp, #76]	; 0x4c
 8007492:	e76f      	b.n	8007374 <_dtoa_r+0x114>
 8007494:	2301      	movs	r3, #1
 8007496:	e7b3      	b.n	8007400 <_dtoa_r+0x1a0>
 8007498:	900f      	str	r0, [sp, #60]	; 0x3c
 800749a:	e7b2      	b.n	8007402 <_dtoa_r+0x1a2>
 800749c:	f1cb 0300 	rsb	r3, fp, #0
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	2300      	movs	r3, #0
 80074a4:	eba9 090b 	sub.w	r9, r9, fp
 80074a8:	930e      	str	r3, [sp, #56]	; 0x38
 80074aa:	e7c0      	b.n	800742e <_dtoa_r+0x1ce>
 80074ac:	2300      	movs	r3, #0
 80074ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dc55      	bgt.n	8007562 <_dtoa_r+0x302>
 80074b6:	2301      	movs	r3, #1
 80074b8:	461a      	mov	r2, r3
 80074ba:	9306      	str	r3, [sp, #24]
 80074bc:	9308      	str	r3, [sp, #32]
 80074be:	9223      	str	r2, [sp, #140]	; 0x8c
 80074c0:	e00b      	b.n	80074da <_dtoa_r+0x27a>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e7f3      	b.n	80074ae <_dtoa_r+0x24e>
 80074c6:	2300      	movs	r3, #0
 80074c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074cc:	445b      	add	r3, fp
 80074ce:	9306      	str	r3, [sp, #24]
 80074d0:	3301      	adds	r3, #1
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	9308      	str	r3, [sp, #32]
 80074d6:	bfb8      	it	lt
 80074d8:	2301      	movlt	r3, #1
 80074da:	2100      	movs	r1, #0
 80074dc:	2204      	movs	r2, #4
 80074de:	69e8      	ldr	r0, [r5, #28]
 80074e0:	f102 0614 	add.w	r6, r2, #20
 80074e4:	429e      	cmp	r6, r3
 80074e6:	d940      	bls.n	800756a <_dtoa_r+0x30a>
 80074e8:	6041      	str	r1, [r0, #4]
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 fd98 	bl	8008020 <_Balloc>
 80074f0:	9003      	str	r0, [sp, #12]
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d13c      	bne.n	8007570 <_dtoa_r+0x310>
 80074f6:	4602      	mov	r2, r0
 80074f8:	f240 11af 	movw	r1, #431	; 0x1af
 80074fc:	4b16      	ldr	r3, [pc, #88]	; (8007558 <_dtoa_r+0x2f8>)
 80074fe:	e6c3      	b.n	8007288 <_dtoa_r+0x28>
 8007500:	2301      	movs	r3, #1
 8007502:	e7e1      	b.n	80074c8 <_dtoa_r+0x268>
 8007504:	2401      	movs	r4, #1
 8007506:	2300      	movs	r3, #0
 8007508:	940b      	str	r4, [sp, #44]	; 0x2c
 800750a:	9322      	str	r3, [sp, #136]	; 0x88
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
 8007510:	2200      	movs	r2, #0
 8007512:	9306      	str	r3, [sp, #24]
 8007514:	9308      	str	r3, [sp, #32]
 8007516:	2312      	movs	r3, #18
 8007518:	e7d1      	b.n	80074be <_dtoa_r+0x25e>
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w
 8007520:	636f4361 	.word	0x636f4361
 8007524:	3fd287a7 	.word	0x3fd287a7
 8007528:	8b60c8b3 	.word	0x8b60c8b3
 800752c:	3fc68a28 	.word	0x3fc68a28
 8007530:	509f79fb 	.word	0x509f79fb
 8007534:	3fd34413 	.word	0x3fd34413
 8007538:	0800a994 	.word	0x0800a994
 800753c:	0800a9ab 	.word	0x0800a9ab
 8007540:	7ff00000 	.word	0x7ff00000
 8007544:	0800a990 	.word	0x0800a990
 8007548:	0800a987 	.word	0x0800a987
 800754c:	0800a95f 	.word	0x0800a95f
 8007550:	3ff80000 	.word	0x3ff80000
 8007554:	0800aa98 	.word	0x0800aa98
 8007558:	0800aa03 	.word	0x0800aa03
 800755c:	2301      	movs	r3, #1
 800755e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007560:	e7d4      	b.n	800750c <_dtoa_r+0x2ac>
 8007562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007564:	9306      	str	r3, [sp, #24]
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	e7b7      	b.n	80074da <_dtoa_r+0x27a>
 800756a:	3101      	adds	r1, #1
 800756c:	0052      	lsls	r2, r2, #1
 800756e:	e7b7      	b.n	80074e0 <_dtoa_r+0x280>
 8007570:	69eb      	ldr	r3, [r5, #28]
 8007572:	9a03      	ldr	r2, [sp, #12]
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	9b08      	ldr	r3, [sp, #32]
 8007578:	2b0e      	cmp	r3, #14
 800757a:	f200 80a8 	bhi.w	80076ce <_dtoa_r+0x46e>
 800757e:	2c00      	cmp	r4, #0
 8007580:	f000 80a5 	beq.w	80076ce <_dtoa_r+0x46e>
 8007584:	f1bb 0f00 	cmp.w	fp, #0
 8007588:	dd34      	ble.n	80075f4 <_dtoa_r+0x394>
 800758a:	4b9a      	ldr	r3, [pc, #616]	; (80077f4 <_dtoa_r+0x594>)
 800758c:	f00b 020f 	and.w	r2, fp, #15
 8007590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800759c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80075a4:	d016      	beq.n	80075d4 <_dtoa_r+0x374>
 80075a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075aa:	4b93      	ldr	r3, [pc, #588]	; (80077f8 <_dtoa_r+0x598>)
 80075ac:	2703      	movs	r7, #3
 80075ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b2:	f7f9 f96f 	bl	8000894 <__aeabi_ddiv>
 80075b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ba:	f004 040f 	and.w	r4, r4, #15
 80075be:	4e8e      	ldr	r6, [pc, #568]	; (80077f8 <_dtoa_r+0x598>)
 80075c0:	b954      	cbnz	r4, 80075d8 <_dtoa_r+0x378>
 80075c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ca:	f7f9 f963 	bl	8000894 <__aeabi_ddiv>
 80075ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075d2:	e029      	b.n	8007628 <_dtoa_r+0x3c8>
 80075d4:	2702      	movs	r7, #2
 80075d6:	e7f2      	b.n	80075be <_dtoa_r+0x35e>
 80075d8:	07e1      	lsls	r1, r4, #31
 80075da:	d508      	bpl.n	80075ee <_dtoa_r+0x38e>
 80075dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075e4:	f7f9 f82c 	bl	8000640 <__aeabi_dmul>
 80075e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075ec:	3701      	adds	r7, #1
 80075ee:	1064      	asrs	r4, r4, #1
 80075f0:	3608      	adds	r6, #8
 80075f2:	e7e5      	b.n	80075c0 <_dtoa_r+0x360>
 80075f4:	f000 80a5 	beq.w	8007742 <_dtoa_r+0x4e2>
 80075f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075fc:	f1cb 0400 	rsb	r4, fp, #0
 8007600:	4b7c      	ldr	r3, [pc, #496]	; (80077f4 <_dtoa_r+0x594>)
 8007602:	f004 020f 	and.w	r2, r4, #15
 8007606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f9 f817 	bl	8000640 <__aeabi_dmul>
 8007612:	2702      	movs	r7, #2
 8007614:	2300      	movs	r3, #0
 8007616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800761a:	4e77      	ldr	r6, [pc, #476]	; (80077f8 <_dtoa_r+0x598>)
 800761c:	1124      	asrs	r4, r4, #4
 800761e:	2c00      	cmp	r4, #0
 8007620:	f040 8084 	bne.w	800772c <_dtoa_r+0x4cc>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1d2      	bne.n	80075ce <_dtoa_r+0x36e>
 8007628:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800762c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8087 	beq.w	8007746 <_dtoa_r+0x4e6>
 8007638:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800763c:	2200      	movs	r2, #0
 800763e:	4b6f      	ldr	r3, [pc, #444]	; (80077fc <_dtoa_r+0x59c>)
 8007640:	f7f9 fa70 	bl	8000b24 <__aeabi_dcmplt>
 8007644:	2800      	cmp	r0, #0
 8007646:	d07e      	beq.n	8007746 <_dtoa_r+0x4e6>
 8007648:	9b08      	ldr	r3, [sp, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d07b      	beq.n	8007746 <_dtoa_r+0x4e6>
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dd38      	ble.n	80076c6 <_dtoa_r+0x466>
 8007654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007658:	2200      	movs	r2, #0
 800765a:	4b69      	ldr	r3, [pc, #420]	; (8007800 <_dtoa_r+0x5a0>)
 800765c:	f7f8 fff0 	bl	8000640 <__aeabi_dmul>
 8007660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007664:	9c06      	ldr	r4, [sp, #24]
 8007666:	f10b 38ff 	add.w	r8, fp, #4294967295
 800766a:	3701      	adds	r7, #1
 800766c:	4638      	mov	r0, r7
 800766e:	f7f8 ff7d 	bl	800056c <__aeabi_i2d>
 8007672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007676:	f7f8 ffe3 	bl	8000640 <__aeabi_dmul>
 800767a:	2200      	movs	r2, #0
 800767c:	4b61      	ldr	r3, [pc, #388]	; (8007804 <_dtoa_r+0x5a4>)
 800767e:	f7f8 fe29 	bl	80002d4 <__adddf3>
 8007682:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800768a:	9611      	str	r6, [sp, #68]	; 0x44
 800768c:	2c00      	cmp	r4, #0
 800768e:	d15d      	bne.n	800774c <_dtoa_r+0x4ec>
 8007690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007694:	2200      	movs	r2, #0
 8007696:	4b5c      	ldr	r3, [pc, #368]	; (8007808 <_dtoa_r+0x5a8>)
 8007698:	f7f8 fe1a 	bl	80002d0 <__aeabi_dsub>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076a4:	4633      	mov	r3, r6
 80076a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076a8:	f7f9 fa5a 	bl	8000b60 <__aeabi_dcmpgt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f040 8295 	bne.w	8007bdc <_dtoa_r+0x97c>
 80076b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076bc:	f7f9 fa32 	bl	8000b24 <__aeabi_dcmplt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f040 8289 	bne.w	8007bd8 <_dtoa_r+0x978>
 80076c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80076ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f2c0 8151 	blt.w	8007978 <_dtoa_r+0x718>
 80076d6:	f1bb 0f0e 	cmp.w	fp, #14
 80076da:	f300 814d 	bgt.w	8007978 <_dtoa_r+0x718>
 80076de:	4b45      	ldr	r3, [pc, #276]	; (80077f4 <_dtoa_r+0x594>)
 80076e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80076ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f280 80da 	bge.w	80078a8 <_dtoa_r+0x648>
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f300 80d6 	bgt.w	80078a8 <_dtoa_r+0x648>
 80076fc:	f040 826b 	bne.w	8007bd6 <_dtoa_r+0x976>
 8007700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007704:	2200      	movs	r2, #0
 8007706:	4b40      	ldr	r3, [pc, #256]	; (8007808 <_dtoa_r+0x5a8>)
 8007708:	f7f8 ff9a 	bl	8000640 <__aeabi_dmul>
 800770c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007710:	f7f9 fa1c 	bl	8000b4c <__aeabi_dcmpge>
 8007714:	9c08      	ldr	r4, [sp, #32]
 8007716:	4626      	mov	r6, r4
 8007718:	2800      	cmp	r0, #0
 800771a:	f040 8241 	bne.w	8007ba0 <_dtoa_r+0x940>
 800771e:	2331      	movs	r3, #49	; 0x31
 8007720:	9f03      	ldr	r7, [sp, #12]
 8007722:	f10b 0b01 	add.w	fp, fp, #1
 8007726:	f807 3b01 	strb.w	r3, [r7], #1
 800772a:	e23d      	b.n	8007ba8 <_dtoa_r+0x948>
 800772c:	07e2      	lsls	r2, r4, #31
 800772e:	d505      	bpl.n	800773c <_dtoa_r+0x4dc>
 8007730:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007734:	f7f8 ff84 	bl	8000640 <__aeabi_dmul>
 8007738:	2301      	movs	r3, #1
 800773a:	3701      	adds	r7, #1
 800773c:	1064      	asrs	r4, r4, #1
 800773e:	3608      	adds	r6, #8
 8007740:	e76d      	b.n	800761e <_dtoa_r+0x3be>
 8007742:	2702      	movs	r7, #2
 8007744:	e770      	b.n	8007628 <_dtoa_r+0x3c8>
 8007746:	46d8      	mov	r8, fp
 8007748:	9c08      	ldr	r4, [sp, #32]
 800774a:	e78f      	b.n	800766c <_dtoa_r+0x40c>
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <_dtoa_r+0x594>)
 8007750:	4421      	add	r1, r4
 8007752:	9112      	str	r1, [sp, #72]	; 0x48
 8007754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007756:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800775a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800775e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007762:	2900      	cmp	r1, #0
 8007764:	d054      	beq.n	8007810 <_dtoa_r+0x5b0>
 8007766:	2000      	movs	r0, #0
 8007768:	4928      	ldr	r1, [pc, #160]	; (800780c <_dtoa_r+0x5ac>)
 800776a:	f7f9 f893 	bl	8000894 <__aeabi_ddiv>
 800776e:	463b      	mov	r3, r7
 8007770:	4632      	mov	r2, r6
 8007772:	f7f8 fdad 	bl	80002d0 <__aeabi_dsub>
 8007776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800777a:	9f03      	ldr	r7, [sp, #12]
 800777c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007780:	f7f9 fa0e 	bl	8000ba0 <__aeabi_d2iz>
 8007784:	4604      	mov	r4, r0
 8007786:	f7f8 fef1 	bl	800056c <__aeabi_i2d>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007792:	f7f8 fd9d 	bl	80002d0 <__aeabi_dsub>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	3430      	adds	r4, #48	; 0x30
 800779c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077a4:	f807 4b01 	strb.w	r4, [r7], #1
 80077a8:	f7f9 f9bc 	bl	8000b24 <__aeabi_dcmplt>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d173      	bne.n	8007898 <_dtoa_r+0x638>
 80077b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b4:	2000      	movs	r0, #0
 80077b6:	4911      	ldr	r1, [pc, #68]	; (80077fc <_dtoa_r+0x59c>)
 80077b8:	f7f8 fd8a 	bl	80002d0 <__aeabi_dsub>
 80077bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c0:	f7f9 f9b0 	bl	8000b24 <__aeabi_dcmplt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f040 80b6 	bne.w	8007936 <_dtoa_r+0x6d6>
 80077ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077cc:	429f      	cmp	r7, r3
 80077ce:	f43f af7a 	beq.w	80076c6 <_dtoa_r+0x466>
 80077d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077d6:	2200      	movs	r2, #0
 80077d8:	4b09      	ldr	r3, [pc, #36]	; (8007800 <_dtoa_r+0x5a0>)
 80077da:	f7f8 ff31 	bl	8000640 <__aeabi_dmul>
 80077de:	2200      	movs	r2, #0
 80077e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <_dtoa_r+0x5a0>)
 80077ea:	f7f8 ff29 	bl	8000640 <__aeabi_dmul>
 80077ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077f2:	e7c3      	b.n	800777c <_dtoa_r+0x51c>
 80077f4:	0800aa98 	.word	0x0800aa98
 80077f8:	0800aa70 	.word	0x0800aa70
 80077fc:	3ff00000 	.word	0x3ff00000
 8007800:	40240000 	.word	0x40240000
 8007804:	401c0000 	.word	0x401c0000
 8007808:	40140000 	.word	0x40140000
 800780c:	3fe00000 	.word	0x3fe00000
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 ff14 	bl	8000640 <__aeabi_dmul>
 8007818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800781a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800781e:	9c03      	ldr	r4, [sp, #12]
 8007820:	9314      	str	r3, [sp, #80]	; 0x50
 8007822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007826:	f7f9 f9bb 	bl	8000ba0 <__aeabi_d2iz>
 800782a:	9015      	str	r0, [sp, #84]	; 0x54
 800782c:	f7f8 fe9e 	bl	800056c <__aeabi_i2d>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007838:	f7f8 fd4a 	bl	80002d0 <__aeabi_dsub>
 800783c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800783e:	4606      	mov	r6, r0
 8007840:	3330      	adds	r3, #48	; 0x30
 8007842:	f804 3b01 	strb.w	r3, [r4], #1
 8007846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007848:	460f      	mov	r7, r1
 800784a:	429c      	cmp	r4, r3
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	d124      	bne.n	800789c <_dtoa_r+0x63c>
 8007852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007856:	4baf      	ldr	r3, [pc, #700]	; (8007b14 <_dtoa_r+0x8b4>)
 8007858:	f7f8 fd3c 	bl	80002d4 <__adddf3>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f9 f97c 	bl	8000b60 <__aeabi_dcmpgt>
 8007868:	2800      	cmp	r0, #0
 800786a:	d163      	bne.n	8007934 <_dtoa_r+0x6d4>
 800786c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007870:	2000      	movs	r0, #0
 8007872:	49a8      	ldr	r1, [pc, #672]	; (8007b14 <_dtoa_r+0x8b4>)
 8007874:	f7f8 fd2c 	bl	80002d0 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4630      	mov	r0, r6
 800787e:	4639      	mov	r1, r7
 8007880:	f7f9 f950 	bl	8000b24 <__aeabi_dcmplt>
 8007884:	2800      	cmp	r0, #0
 8007886:	f43f af1e 	beq.w	80076c6 <_dtoa_r+0x466>
 800788a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800788c:	1e7b      	subs	r3, r7, #1
 800788e:	9314      	str	r3, [sp, #80]	; 0x50
 8007890:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007894:	2b30      	cmp	r3, #48	; 0x30
 8007896:	d0f8      	beq.n	800788a <_dtoa_r+0x62a>
 8007898:	46c3      	mov	fp, r8
 800789a:	e03b      	b.n	8007914 <_dtoa_r+0x6b4>
 800789c:	4b9e      	ldr	r3, [pc, #632]	; (8007b18 <_dtoa_r+0x8b8>)
 800789e:	f7f8 fecf 	bl	8000640 <__aeabi_dmul>
 80078a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078a6:	e7bc      	b.n	8007822 <_dtoa_r+0x5c2>
 80078a8:	9f03      	ldr	r7, [sp, #12]
 80078aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078b2:	4640      	mov	r0, r8
 80078b4:	4649      	mov	r1, r9
 80078b6:	f7f8 ffed 	bl	8000894 <__aeabi_ddiv>
 80078ba:	f7f9 f971 	bl	8000ba0 <__aeabi_d2iz>
 80078be:	4604      	mov	r4, r0
 80078c0:	f7f8 fe54 	bl	800056c <__aeabi_i2d>
 80078c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c8:	f7f8 feba 	bl	8000640 <__aeabi_dmul>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fcfc 	bl	80002d0 <__aeabi_dsub>
 80078d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80078dc:	f807 6b01 	strb.w	r6, [r7], #1
 80078e0:	9e03      	ldr	r6, [sp, #12]
 80078e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80078e6:	1bbe      	subs	r6, r7, r6
 80078e8:	45b4      	cmp	ip, r6
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	d136      	bne.n	800795e <_dtoa_r+0x6fe>
 80078f0:	f7f8 fcf0 	bl	80002d4 <__adddf3>
 80078f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078f8:	4680      	mov	r8, r0
 80078fa:	4689      	mov	r9, r1
 80078fc:	f7f9 f930 	bl	8000b60 <__aeabi_dcmpgt>
 8007900:	bb58      	cbnz	r0, 800795a <_dtoa_r+0x6fa>
 8007902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f9 f901 	bl	8000b10 <__aeabi_dcmpeq>
 800790e:	b108      	cbz	r0, 8007914 <_dtoa_r+0x6b4>
 8007910:	07e3      	lsls	r3, r4, #31
 8007912:	d422      	bmi.n	800795a <_dtoa_r+0x6fa>
 8007914:	4651      	mov	r1, sl
 8007916:	4628      	mov	r0, r5
 8007918:	f000 fbc2 	bl	80080a0 <_Bfree>
 800791c:	2300      	movs	r3, #0
 800791e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007920:	703b      	strb	r3, [r7, #0]
 8007922:	f10b 0301 	add.w	r3, fp, #1
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800792a:	2b00      	cmp	r3, #0
 800792c:	f43f ace6 	beq.w	80072fc <_dtoa_r+0x9c>
 8007930:	601f      	str	r7, [r3, #0]
 8007932:	e4e3      	b.n	80072fc <_dtoa_r+0x9c>
 8007934:	4627      	mov	r7, r4
 8007936:	463b      	mov	r3, r7
 8007938:	461f      	mov	r7, r3
 800793a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800793e:	2a39      	cmp	r2, #57	; 0x39
 8007940:	d107      	bne.n	8007952 <_dtoa_r+0x6f2>
 8007942:	9a03      	ldr	r2, [sp, #12]
 8007944:	429a      	cmp	r2, r3
 8007946:	d1f7      	bne.n	8007938 <_dtoa_r+0x6d8>
 8007948:	2230      	movs	r2, #48	; 0x30
 800794a:	9903      	ldr	r1, [sp, #12]
 800794c:	f108 0801 	add.w	r8, r8, #1
 8007950:	700a      	strb	r2, [r1, #0]
 8007952:	781a      	ldrb	r2, [r3, #0]
 8007954:	3201      	adds	r2, #1
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e79e      	b.n	8007898 <_dtoa_r+0x638>
 800795a:	46d8      	mov	r8, fp
 800795c:	e7eb      	b.n	8007936 <_dtoa_r+0x6d6>
 800795e:	2200      	movs	r2, #0
 8007960:	4b6d      	ldr	r3, [pc, #436]	; (8007b18 <_dtoa_r+0x8b8>)
 8007962:	f7f8 fe6d 	bl	8000640 <__aeabi_dmul>
 8007966:	2200      	movs	r2, #0
 8007968:	2300      	movs	r3, #0
 800796a:	4680      	mov	r8, r0
 800796c:	4689      	mov	r9, r1
 800796e:	f7f9 f8cf 	bl	8000b10 <__aeabi_dcmpeq>
 8007972:	2800      	cmp	r0, #0
 8007974:	d09b      	beq.n	80078ae <_dtoa_r+0x64e>
 8007976:	e7cd      	b.n	8007914 <_dtoa_r+0x6b4>
 8007978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800797a:	2a00      	cmp	r2, #0
 800797c:	f000 80c4 	beq.w	8007b08 <_dtoa_r+0x8a8>
 8007980:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007982:	2a01      	cmp	r2, #1
 8007984:	f300 80a8 	bgt.w	8007ad8 <_dtoa_r+0x878>
 8007988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800798a:	2a00      	cmp	r2, #0
 800798c:	f000 80a0 	beq.w	8007ad0 <_dtoa_r+0x870>
 8007990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007994:	464f      	mov	r7, r9
 8007996:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799a:	2101      	movs	r1, #1
 800799c:	441a      	add	r2, r3
 800799e:	4628      	mov	r0, r5
 80079a0:	4499      	add	r9, r3
 80079a2:	9209      	str	r2, [sp, #36]	; 0x24
 80079a4:	f000 fc7c 	bl	80082a0 <__i2b>
 80079a8:	4606      	mov	r6, r0
 80079aa:	b15f      	cbz	r7, 80079c4 <_dtoa_r+0x764>
 80079ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dd08      	ble.n	80079c4 <_dtoa_r+0x764>
 80079b2:	42bb      	cmp	r3, r7
 80079b4:	bfa8      	it	ge
 80079b6:	463b      	movge	r3, r7
 80079b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ba:	eba9 0903 	sub.w	r9, r9, r3
 80079be:	1aff      	subs	r7, r7, r3
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	9309      	str	r3, [sp, #36]	; 0x24
 80079c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c6:	b1f3      	cbz	r3, 8007a06 <_dtoa_r+0x7a6>
 80079c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 80a0 	beq.w	8007b10 <_dtoa_r+0x8b0>
 80079d0:	2c00      	cmp	r4, #0
 80079d2:	dd10      	ble.n	80079f6 <_dtoa_r+0x796>
 80079d4:	4631      	mov	r1, r6
 80079d6:	4622      	mov	r2, r4
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 fd1f 	bl	800841c <__pow5mult>
 80079de:	4652      	mov	r2, sl
 80079e0:	4601      	mov	r1, r0
 80079e2:	4606      	mov	r6, r0
 80079e4:	4628      	mov	r0, r5
 80079e6:	f000 fc71 	bl	80082cc <__multiply>
 80079ea:	4680      	mov	r8, r0
 80079ec:	4651      	mov	r1, sl
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fb56 	bl	80080a0 <_Bfree>
 80079f4:	46c2      	mov	sl, r8
 80079f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f8:	1b1a      	subs	r2, r3, r4
 80079fa:	d004      	beq.n	8007a06 <_dtoa_r+0x7a6>
 80079fc:	4651      	mov	r1, sl
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fd0c 	bl	800841c <__pow5mult>
 8007a04:	4682      	mov	sl, r0
 8007a06:	2101      	movs	r1, #1
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 fc49 	bl	80082a0 <__i2b>
 8007a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a10:	4604      	mov	r4, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f340 8082 	ble.w	8007b1c <_dtoa_r+0x8bc>
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 fcfd 	bl	800841c <__pow5mult>
 8007a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a24:	4604      	mov	r4, r0
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	dd7b      	ble.n	8007b22 <_dtoa_r+0x8c2>
 8007a2a:	f04f 0800 	mov.w	r8, #0
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a34:	6918      	ldr	r0, [r3, #16]
 8007a36:	f000 fbe5 	bl	8008204 <__hi0bits>
 8007a3a:	f1c0 0020 	rsb	r0, r0, #32
 8007a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a40:	4418      	add	r0, r3
 8007a42:	f010 001f 	ands.w	r0, r0, #31
 8007a46:	f000 8092 	beq.w	8007b6e <_dtoa_r+0x90e>
 8007a4a:	f1c0 0320 	rsb	r3, r0, #32
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	f340 8085 	ble.w	8007b5e <_dtoa_r+0x8fe>
 8007a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a56:	f1c0 001c 	rsb	r0, r0, #28
 8007a5a:	4403      	add	r3, r0
 8007a5c:	4481      	add	r9, r0
 8007a5e:	4407      	add	r7, r0
 8007a60:	9309      	str	r3, [sp, #36]	; 0x24
 8007a62:	f1b9 0f00 	cmp.w	r9, #0
 8007a66:	dd05      	ble.n	8007a74 <_dtoa_r+0x814>
 8007a68:	4651      	mov	r1, sl
 8007a6a:	464a      	mov	r2, r9
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 fd2f 	bl	80084d0 <__lshift>
 8007a72:	4682      	mov	sl, r0
 8007a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd05      	ble.n	8007a86 <_dtoa_r+0x826>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fd26 	bl	80084d0 <__lshift>
 8007a84:	4604      	mov	r4, r0
 8007a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d072      	beq.n	8007b72 <_dtoa_r+0x912>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f000 fd8a 	bl	80085a8 <__mcmp>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	da6c      	bge.n	8007b72 <_dtoa_r+0x912>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4651      	mov	r1, sl
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fb20 	bl	80080e4 <__multadd>
 8007aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 81ac 	beq.w	8007e0a <_dtoa_r+0xbaa>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	220a      	movs	r2, #10
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 fb13 	bl	80080e4 <__multadd>
 8007abe:	9b06      	ldr	r3, [sp, #24]
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f300 8093 	bgt.w	8007bee <_dtoa_r+0x98e>
 8007ac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	dc59      	bgt.n	8007b82 <_dtoa_r+0x922>
 8007ace:	e08e      	b.n	8007bee <_dtoa_r+0x98e>
 8007ad0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ad2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ad6:	e75d      	b.n	8007994 <_dtoa_r+0x734>
 8007ad8:	9b08      	ldr	r3, [sp, #32]
 8007ada:	1e5c      	subs	r4, r3, #1
 8007adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	bfbf      	itttt	lt
 8007ae2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ae4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007ae6:	1ae3      	sublt	r3, r4, r3
 8007ae8:	18d2      	addlt	r2, r2, r3
 8007aea:	bfa8      	it	ge
 8007aec:	1b1c      	subge	r4, r3, r4
 8007aee:	9b08      	ldr	r3, [sp, #32]
 8007af0:	bfbe      	ittt	lt
 8007af2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007af4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007af6:	2400      	movlt	r4, #0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfb5      	itete	lt
 8007afc:	eba9 0703 	sublt.w	r7, r9, r3
 8007b00:	464f      	movge	r7, r9
 8007b02:	2300      	movlt	r3, #0
 8007b04:	9b08      	ldrge	r3, [sp, #32]
 8007b06:	e747      	b.n	8007998 <_dtoa_r+0x738>
 8007b08:	464f      	mov	r7, r9
 8007b0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b0e:	e74c      	b.n	80079aa <_dtoa_r+0x74a>
 8007b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b12:	e773      	b.n	80079fc <_dtoa_r+0x79c>
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	40240000 	.word	0x40240000
 8007b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	dc18      	bgt.n	8007b54 <_dtoa_r+0x8f4>
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	b9b3      	cbnz	r3, 8007b54 <_dtoa_r+0x8f4>
 8007b26:	9b05      	ldr	r3, [sp, #20]
 8007b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b2c:	b993      	cbnz	r3, 8007b54 <_dtoa_r+0x8f4>
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b34:	0d1b      	lsrs	r3, r3, #20
 8007b36:	051b      	lsls	r3, r3, #20
 8007b38:	b17b      	cbz	r3, 8007b5a <_dtoa_r+0x8fa>
 8007b3a:	f04f 0801 	mov.w	r8, #1
 8007b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b40:	f109 0901 	add.w	r9, r9, #1
 8007b44:	3301      	adds	r3, #1
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f47f af6f 	bne.w	8007a2e <_dtoa_r+0x7ce>
 8007b50:	2001      	movs	r0, #1
 8007b52:	e774      	b.n	8007a3e <_dtoa_r+0x7de>
 8007b54:	f04f 0800 	mov.w	r8, #0
 8007b58:	e7f6      	b.n	8007b48 <_dtoa_r+0x8e8>
 8007b5a:	4698      	mov	r8, r3
 8007b5c:	e7f4      	b.n	8007b48 <_dtoa_r+0x8e8>
 8007b5e:	d080      	beq.n	8007a62 <_dtoa_r+0x802>
 8007b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b62:	331c      	adds	r3, #28
 8007b64:	441a      	add	r2, r3
 8007b66:	4499      	add	r9, r3
 8007b68:	441f      	add	r7, r3
 8007b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b6c:	e779      	b.n	8007a62 <_dtoa_r+0x802>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	e7f6      	b.n	8007b60 <_dtoa_r+0x900>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dc34      	bgt.n	8007be2 <_dtoa_r+0x982>
 8007b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	dd31      	ble.n	8007be2 <_dtoa_r+0x982>
 8007b7e:	9b08      	ldr	r3, [sp, #32]
 8007b80:	9306      	str	r3, [sp, #24]
 8007b82:	9b06      	ldr	r3, [sp, #24]
 8007b84:	b963      	cbnz	r3, 8007ba0 <_dtoa_r+0x940>
 8007b86:	4621      	mov	r1, r4
 8007b88:	2205      	movs	r2, #5
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 faaa 	bl	80080e4 <__multadd>
 8007b90:	4601      	mov	r1, r0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4650      	mov	r0, sl
 8007b96:	f000 fd07 	bl	80085a8 <__mcmp>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	f73f adbf 	bgt.w	800771e <_dtoa_r+0x4be>
 8007ba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ba2:	9f03      	ldr	r7, [sp, #12]
 8007ba4:	ea6f 0b03 	mvn.w	fp, r3
 8007ba8:	f04f 0800 	mov.w	r8, #0
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 fa76 	bl	80080a0 <_Bfree>
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	f43f aead 	beq.w	8007914 <_dtoa_r+0x6b4>
 8007bba:	f1b8 0f00 	cmp.w	r8, #0
 8007bbe:	d005      	beq.n	8007bcc <_dtoa_r+0x96c>
 8007bc0:	45b0      	cmp	r8, r6
 8007bc2:	d003      	beq.n	8007bcc <_dtoa_r+0x96c>
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 fa6a 	bl	80080a0 <_Bfree>
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fa66 	bl	80080a0 <_Bfree>
 8007bd4:	e69e      	b.n	8007914 <_dtoa_r+0x6b4>
 8007bd6:	2400      	movs	r4, #0
 8007bd8:	4626      	mov	r6, r4
 8007bda:	e7e1      	b.n	8007ba0 <_dtoa_r+0x940>
 8007bdc:	46c3      	mov	fp, r8
 8007bde:	4626      	mov	r6, r4
 8007be0:	e59d      	b.n	800771e <_dtoa_r+0x4be>
 8007be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80c8 	beq.w	8007d7a <_dtoa_r+0xb1a>
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	9306      	str	r3, [sp, #24]
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	dd05      	ble.n	8007bfe <_dtoa_r+0x99e>
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	463a      	mov	r2, r7
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f000 fc6a 	bl	80084d0 <__lshift>
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	d05b      	beq.n	8007cbc <_dtoa_r+0xa5c>
 8007c04:	4628      	mov	r0, r5
 8007c06:	6871      	ldr	r1, [r6, #4]
 8007c08:	f000 fa0a 	bl	8008020 <_Balloc>
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	b928      	cbnz	r0, 8007c1c <_dtoa_r+0x9bc>
 8007c10:	4602      	mov	r2, r0
 8007c12:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c16:	4b81      	ldr	r3, [pc, #516]	; (8007e1c <_dtoa_r+0xbbc>)
 8007c18:	f7ff bb36 	b.w	8007288 <_dtoa_r+0x28>
 8007c1c:	6932      	ldr	r2, [r6, #16]
 8007c1e:	f106 010c 	add.w	r1, r6, #12
 8007c22:	3202      	adds	r2, #2
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	300c      	adds	r0, #12
 8007c28:	f001 ff72 	bl	8009b10 <memcpy>
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	4639      	mov	r1, r7
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 fc4d 	bl	80084d0 <__lshift>
 8007c36:	46b0      	mov	r8, r6
 8007c38:	4606      	mov	r6, r0
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	9a03      	ldr	r2, [sp, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	9308      	str	r3, [sp, #32]
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	4413      	add	r3, r2
 8007c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c48:	9b04      	ldr	r3, [sp, #16]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	4621      	mov	r1, r4
 8007c54:	3b01      	subs	r3, #1
 8007c56:	4650      	mov	r0, sl
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	f7ff fa75 	bl	8007148 <quorem>
 8007c5e:	4641      	mov	r1, r8
 8007c60:	9006      	str	r0, [sp, #24]
 8007c62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c66:	4650      	mov	r0, sl
 8007c68:	f000 fc9e 	bl	80085a8 <__mcmp>
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c70:	4621      	mov	r1, r4
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 fcb4 	bl	80085e0 <__mdiff>
 8007c78:	68c2      	ldr	r2, [r0, #12]
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	bb02      	cbnz	r2, 8007cc0 <_dtoa_r+0xa60>
 8007c7e:	4601      	mov	r1, r0
 8007c80:	4650      	mov	r0, sl
 8007c82:	f000 fc91 	bl	80085a8 <__mcmp>
 8007c86:	4602      	mov	r2, r0
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	920c      	str	r2, [sp, #48]	; 0x30
 8007c8e:	f000 fa07 	bl	80080a0 <_Bfree>
 8007c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c96:	9f08      	ldr	r7, [sp, #32]
 8007c98:	ea43 0102 	orr.w	r1, r3, r2
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	4319      	orrs	r1, r3
 8007ca0:	d110      	bne.n	8007cc4 <_dtoa_r+0xa64>
 8007ca2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ca6:	d029      	beq.n	8007cfc <_dtoa_r+0xa9c>
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dd02      	ble.n	8007cb4 <_dtoa_r+0xa54>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	f883 9000 	strb.w	r9, [r3]
 8007cba:	e777      	b.n	8007bac <_dtoa_r+0x94c>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	e7ba      	b.n	8007c36 <_dtoa_r+0x9d6>
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	e7e1      	b.n	8007c88 <_dtoa_r+0xa28>
 8007cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	db04      	blt.n	8007cd4 <_dtoa_r+0xa74>
 8007cca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	d120      	bne.n	8007d16 <_dtoa_r+0xab6>
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	dded      	ble.n	8007cb4 <_dtoa_r+0xa54>
 8007cd8:	4651      	mov	r1, sl
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f000 fbf7 	bl	80084d0 <__lshift>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4682      	mov	sl, r0
 8007ce6:	f000 fc5f 	bl	80085a8 <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	dc03      	bgt.n	8007cf6 <_dtoa_r+0xa96>
 8007cee:	d1e1      	bne.n	8007cb4 <_dtoa_r+0xa54>
 8007cf0:	f019 0f01 	tst.w	r9, #1
 8007cf4:	d0de      	beq.n	8007cb4 <_dtoa_r+0xa54>
 8007cf6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cfa:	d1d8      	bne.n	8007cae <_dtoa_r+0xa4e>
 8007cfc:	2339      	movs	r3, #57	; 0x39
 8007cfe:	9a04      	ldr	r2, [sp, #16]
 8007d00:	7013      	strb	r3, [r2, #0]
 8007d02:	463b      	mov	r3, r7
 8007d04:	461f      	mov	r7, r3
 8007d06:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	2a39      	cmp	r2, #57	; 0x39
 8007d0e:	d06b      	beq.n	8007de8 <_dtoa_r+0xb88>
 8007d10:	3201      	adds	r2, #1
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e74a      	b.n	8007bac <_dtoa_r+0x94c>
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	dd07      	ble.n	8007d2a <_dtoa_r+0xaca>
 8007d1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d1e:	d0ed      	beq.n	8007cfc <_dtoa_r+0xa9c>
 8007d20:	9a04      	ldr	r2, [sp, #16]
 8007d22:	f109 0301 	add.w	r3, r9, #1
 8007d26:	7013      	strb	r3, [r2, #0]
 8007d28:	e740      	b.n	8007bac <_dtoa_r+0x94c>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d2e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d042      	beq.n	8007dbc <_dtoa_r+0xb5c>
 8007d36:	4651      	mov	r1, sl
 8007d38:	2300      	movs	r3, #0
 8007d3a:	220a      	movs	r2, #10
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f9d1 	bl	80080e4 <__multadd>
 8007d42:	45b0      	cmp	r8, r6
 8007d44:	4682      	mov	sl, r0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	f04f 020a 	mov.w	r2, #10
 8007d4e:	4641      	mov	r1, r8
 8007d50:	4628      	mov	r0, r5
 8007d52:	d107      	bne.n	8007d64 <_dtoa_r+0xb04>
 8007d54:	f000 f9c6 	bl	80080e4 <__multadd>
 8007d58:	4680      	mov	r8, r0
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	9308      	str	r3, [sp, #32]
 8007d62:	e775      	b.n	8007c50 <_dtoa_r+0x9f0>
 8007d64:	f000 f9be 	bl	80080e4 <__multadd>
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	220a      	movs	r2, #10
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f9b7 	bl	80080e4 <__multadd>
 8007d76:	4606      	mov	r6, r0
 8007d78:	e7f0      	b.n	8007d5c <_dtoa_r+0xafc>
 8007d7a:	9b08      	ldr	r3, [sp, #32]
 8007d7c:	9306      	str	r3, [sp, #24]
 8007d7e:	9f03      	ldr	r7, [sp, #12]
 8007d80:	4621      	mov	r1, r4
 8007d82:	4650      	mov	r0, sl
 8007d84:	f7ff f9e0 	bl	8007148 <quorem>
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d8e:	f807 9b01 	strb.w	r9, [r7], #1
 8007d92:	1afa      	subs	r2, r7, r3
 8007d94:	9b06      	ldr	r3, [sp, #24]
 8007d96:	4293      	cmp	r3, r2
 8007d98:	dd07      	ble.n	8007daa <_dtoa_r+0xb4a>
 8007d9a:	4651      	mov	r1, sl
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	220a      	movs	r2, #10
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f99f 	bl	80080e4 <__multadd>
 8007da6:	4682      	mov	sl, r0
 8007da8:	e7ea      	b.n	8007d80 <_dtoa_r+0xb20>
 8007daa:	9b06      	ldr	r3, [sp, #24]
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfcc      	ite	gt
 8007db4:	461f      	movgt	r7, r3
 8007db6:	2701      	movle	r7, #1
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	441f      	add	r7, r3
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 fb85 	bl	80084d0 <__lshift>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4682      	mov	sl, r0
 8007dca:	f000 fbed 	bl	80085a8 <__mcmp>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	dc97      	bgt.n	8007d02 <_dtoa_r+0xaa2>
 8007dd2:	d102      	bne.n	8007dda <_dtoa_r+0xb7a>
 8007dd4:	f019 0f01 	tst.w	r9, #1
 8007dd8:	d193      	bne.n	8007d02 <_dtoa_r+0xaa2>
 8007dda:	463b      	mov	r3, r7
 8007ddc:	461f      	mov	r7, r3
 8007dde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de2:	2a30      	cmp	r2, #48	; 0x30
 8007de4:	d0fa      	beq.n	8007ddc <_dtoa_r+0xb7c>
 8007de6:	e6e1      	b.n	8007bac <_dtoa_r+0x94c>
 8007de8:	9a03      	ldr	r2, [sp, #12]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d18a      	bne.n	8007d04 <_dtoa_r+0xaa4>
 8007dee:	2331      	movs	r3, #49	; 0x31
 8007df0:	f10b 0b01 	add.w	fp, fp, #1
 8007df4:	e797      	b.n	8007d26 <_dtoa_r+0xac6>
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <_dtoa_r+0xbc0>)
 8007df8:	f7ff ba9f 	b.w	800733a <_dtoa_r+0xda>
 8007dfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f47f aa77 	bne.w	80072f2 <_dtoa_r+0x92>
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <_dtoa_r+0xbc4>)
 8007e06:	f7ff ba98 	b.w	800733a <_dtoa_r+0xda>
 8007e0a:	9b06      	ldr	r3, [sp, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	dcb6      	bgt.n	8007d7e <_dtoa_r+0xb1e>
 8007e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	f73f aeb5 	bgt.w	8007b82 <_dtoa_r+0x922>
 8007e18:	e7b1      	b.n	8007d7e <_dtoa_r+0xb1e>
 8007e1a:	bf00      	nop
 8007e1c:	0800aa03 	.word	0x0800aa03
 8007e20:	0800a95e 	.word	0x0800a95e
 8007e24:	0800a987 	.word	0x0800a987

08007e28 <_free_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	d040      	beq.n	8007eb2 <_free_r+0x8a>
 8007e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e34:	1f0c      	subs	r4, r1, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfb8      	it	lt
 8007e3a:	18e4      	addlt	r4, r4, r3
 8007e3c:	f000 f8e4 	bl	8008008 <__malloc_lock>
 8007e40:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <_free_r+0x8c>)
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	b933      	cbnz	r3, 8007e54 <_free_r+0x2c>
 8007e46:	6063      	str	r3, [r4, #4]
 8007e48:	6014      	str	r4, [r2, #0]
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e50:	f000 b8e0 	b.w	8008014 <__malloc_unlock>
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d908      	bls.n	8007e6a <_free_r+0x42>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	1821      	adds	r1, r4, r0
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	bf01      	itttt	eq
 8007e60:	6819      	ldreq	r1, [r3, #0]
 8007e62:	685b      	ldreq	r3, [r3, #4]
 8007e64:	1809      	addeq	r1, r1, r0
 8007e66:	6021      	streq	r1, [r4, #0]
 8007e68:	e7ed      	b.n	8007e46 <_free_r+0x1e>
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	b10b      	cbz	r3, 8007e74 <_free_r+0x4c>
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d9fa      	bls.n	8007e6a <_free_r+0x42>
 8007e74:	6811      	ldr	r1, [r2, #0]
 8007e76:	1850      	adds	r0, r2, r1
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d10b      	bne.n	8007e94 <_free_r+0x6c>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	4401      	add	r1, r0
 8007e80:	1850      	adds	r0, r2, r1
 8007e82:	4283      	cmp	r3, r0
 8007e84:	6011      	str	r1, [r2, #0]
 8007e86:	d1e0      	bne.n	8007e4a <_free_r+0x22>
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4408      	add	r0, r1
 8007e8e:	6010      	str	r0, [r2, #0]
 8007e90:	6053      	str	r3, [r2, #4]
 8007e92:	e7da      	b.n	8007e4a <_free_r+0x22>
 8007e94:	d902      	bls.n	8007e9c <_free_r+0x74>
 8007e96:	230c      	movs	r3, #12
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	e7d6      	b.n	8007e4a <_free_r+0x22>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	1821      	adds	r1, r4, r0
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf01      	itttt	eq
 8007ea4:	6819      	ldreq	r1, [r3, #0]
 8007ea6:	685b      	ldreq	r3, [r3, #4]
 8007ea8:	1809      	addeq	r1, r1, r0
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	6054      	str	r4, [r2, #4]
 8007eb0:	e7cb      	b.n	8007e4a <_free_r+0x22>
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20000508 	.word	0x20000508

08007eb8 <malloc>:
 8007eb8:	4b02      	ldr	r3, [pc, #8]	; (8007ec4 <malloc+0xc>)
 8007eba:	4601      	mov	r1, r0
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	f000 b823 	b.w	8007f08 <_malloc_r>
 8007ec2:	bf00      	nop
 8007ec4:	2000006c 	.word	0x2000006c

08007ec8 <sbrk_aligned>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	4e0e      	ldr	r6, [pc, #56]	; (8007f04 <sbrk_aligned+0x3c>)
 8007ecc:	460c      	mov	r4, r1
 8007ece:	6831      	ldr	r1, [r6, #0]
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	b911      	cbnz	r1, 8007eda <sbrk_aligned+0x12>
 8007ed4:	f001 fe0c 	bl	8009af0 <_sbrk_r>
 8007ed8:	6030      	str	r0, [r6, #0]
 8007eda:	4621      	mov	r1, r4
 8007edc:	4628      	mov	r0, r5
 8007ede:	f001 fe07 	bl	8009af0 <_sbrk_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d00a      	beq.n	8007efc <sbrk_aligned+0x34>
 8007ee6:	1cc4      	adds	r4, r0, #3
 8007ee8:	f024 0403 	bic.w	r4, r4, #3
 8007eec:	42a0      	cmp	r0, r4
 8007eee:	d007      	beq.n	8007f00 <sbrk_aligned+0x38>
 8007ef0:	1a21      	subs	r1, r4, r0
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f001 fdfc 	bl	8009af0 <_sbrk_r>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d101      	bne.n	8007f00 <sbrk_aligned+0x38>
 8007efc:	f04f 34ff 	mov.w	r4, #4294967295
 8007f00:	4620      	mov	r0, r4
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	2000050c 	.word	0x2000050c

08007f08 <_malloc_r>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	1ccd      	adds	r5, r1, #3
 8007f0e:	f025 0503 	bic.w	r5, r5, #3
 8007f12:	3508      	adds	r5, #8
 8007f14:	2d0c      	cmp	r5, #12
 8007f16:	bf38      	it	cc
 8007f18:	250c      	movcc	r5, #12
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	db01      	blt.n	8007f24 <_malloc_r+0x1c>
 8007f20:	42a9      	cmp	r1, r5
 8007f22:	d905      	bls.n	8007f30 <_malloc_r+0x28>
 8007f24:	230c      	movs	r3, #12
 8007f26:	2600      	movs	r6, #0
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008004 <_malloc_r+0xfc>
 8007f34:	f000 f868 	bl	8008008 <__malloc_lock>
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	461c      	mov	r4, r3
 8007f3e:	bb5c      	cbnz	r4, 8007f98 <_malloc_r+0x90>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4638      	mov	r0, r7
 8007f44:	f7ff ffc0 	bl	8007ec8 <sbrk_aligned>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	d155      	bne.n	8007ffa <_malloc_r+0xf2>
 8007f4e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f52:	4626      	mov	r6, r4
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	d145      	bne.n	8007fe4 <_malloc_r+0xdc>
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	d048      	beq.n	8007fee <_malloc_r+0xe6>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4638      	mov	r0, r7
 8007f62:	eb04 0903 	add.w	r9, r4, r3
 8007f66:	f001 fdc3 	bl	8009af0 <_sbrk_r>
 8007f6a:	4581      	cmp	r9, r0
 8007f6c:	d13f      	bne.n	8007fee <_malloc_r+0xe6>
 8007f6e:	6821      	ldr	r1, [r4, #0]
 8007f70:	4638      	mov	r0, r7
 8007f72:	1a6d      	subs	r5, r5, r1
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7ff ffa7 	bl	8007ec8 <sbrk_aligned>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	d037      	beq.n	8007fee <_malloc_r+0xe6>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	442b      	add	r3, r5
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	f8d8 3000 	ldr.w	r3, [r8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d038      	beq.n	8007ffe <_malloc_r+0xf6>
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	42a2      	cmp	r2, r4
 8007f90:	d12b      	bne.n	8007fea <_malloc_r+0xe2>
 8007f92:	2200      	movs	r2, #0
 8007f94:	605a      	str	r2, [r3, #4]
 8007f96:	e00f      	b.n	8007fb8 <_malloc_r+0xb0>
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	1b52      	subs	r2, r2, r5
 8007f9c:	d41f      	bmi.n	8007fde <_malloc_r+0xd6>
 8007f9e:	2a0b      	cmp	r2, #11
 8007fa0:	d917      	bls.n	8007fd2 <_malloc_r+0xca>
 8007fa2:	1961      	adds	r1, r4, r5
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	6025      	str	r5, [r4, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	6059      	strne	r1, [r3, #4]
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	bf08      	it	eq
 8007fb0:	f8c8 1000 	streq.w	r1, [r8]
 8007fb4:	5162      	str	r2, [r4, r5]
 8007fb6:	604b      	str	r3, [r1, #4]
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f104 060b 	add.w	r6, r4, #11
 8007fbe:	f000 f829 	bl	8008014 <__malloc_unlock>
 8007fc2:	f026 0607 	bic.w	r6, r6, #7
 8007fc6:	1d23      	adds	r3, r4, #4
 8007fc8:	1af2      	subs	r2, r6, r3
 8007fca:	d0ae      	beq.n	8007f2a <_malloc_r+0x22>
 8007fcc:	1b9b      	subs	r3, r3, r6
 8007fce:	50a3      	str	r3, [r4, r2]
 8007fd0:	e7ab      	b.n	8007f2a <_malloc_r+0x22>
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	6862      	ldr	r2, [r4, #4]
 8007fd6:	d1dd      	bne.n	8007f94 <_malloc_r+0x8c>
 8007fd8:	f8c8 2000 	str.w	r2, [r8]
 8007fdc:	e7ec      	b.n	8007fb8 <_malloc_r+0xb0>
 8007fde:	4623      	mov	r3, r4
 8007fe0:	6864      	ldr	r4, [r4, #4]
 8007fe2:	e7ac      	b.n	8007f3e <_malloc_r+0x36>
 8007fe4:	4634      	mov	r4, r6
 8007fe6:	6876      	ldr	r6, [r6, #4]
 8007fe8:	e7b4      	b.n	8007f54 <_malloc_r+0x4c>
 8007fea:	4613      	mov	r3, r2
 8007fec:	e7cc      	b.n	8007f88 <_malloc_r+0x80>
 8007fee:	230c      	movs	r3, #12
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	f000 f80e 	bl	8008014 <__malloc_unlock>
 8007ff8:	e797      	b.n	8007f2a <_malloc_r+0x22>
 8007ffa:	6025      	str	r5, [r4, #0]
 8007ffc:	e7dc      	b.n	8007fb8 <_malloc_r+0xb0>
 8007ffe:	605b      	str	r3, [r3, #4]
 8008000:	deff      	udf	#255	; 0xff
 8008002:	bf00      	nop
 8008004:	20000508 	.word	0x20000508

08008008 <__malloc_lock>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__malloc_lock+0x8>)
 800800a:	f7ff b888 	b.w	800711e <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	20000504 	.word	0x20000504

08008014 <__malloc_unlock>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__malloc_unlock+0x8>)
 8008016:	f7ff b883 	b.w	8007120 <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	20000504 	.word	0x20000504

08008020 <_Balloc>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	69c6      	ldr	r6, [r0, #28]
 8008024:	4604      	mov	r4, r0
 8008026:	460d      	mov	r5, r1
 8008028:	b976      	cbnz	r6, 8008048 <_Balloc+0x28>
 800802a:	2010      	movs	r0, #16
 800802c:	f7ff ff44 	bl	8007eb8 <malloc>
 8008030:	4602      	mov	r2, r0
 8008032:	61e0      	str	r0, [r4, #28]
 8008034:	b920      	cbnz	r0, 8008040 <_Balloc+0x20>
 8008036:	216b      	movs	r1, #107	; 0x6b
 8008038:	4b17      	ldr	r3, [pc, #92]	; (8008098 <_Balloc+0x78>)
 800803a:	4818      	ldr	r0, [pc, #96]	; (800809c <_Balloc+0x7c>)
 800803c:	f001 fd7c 	bl	8009b38 <__assert_func>
 8008040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008044:	6006      	str	r6, [r0, #0]
 8008046:	60c6      	str	r6, [r0, #12]
 8008048:	69e6      	ldr	r6, [r4, #28]
 800804a:	68f3      	ldr	r3, [r6, #12]
 800804c:	b183      	cbz	r3, 8008070 <_Balloc+0x50>
 800804e:	69e3      	ldr	r3, [r4, #28]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008056:	b9b8      	cbnz	r0, 8008088 <_Balloc+0x68>
 8008058:	2101      	movs	r1, #1
 800805a:	fa01 f605 	lsl.w	r6, r1, r5
 800805e:	1d72      	adds	r2, r6, #5
 8008060:	4620      	mov	r0, r4
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	f001 fd86 	bl	8009b74 <_calloc_r>
 8008068:	b160      	cbz	r0, 8008084 <_Balloc+0x64>
 800806a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800806e:	e00e      	b.n	800808e <_Balloc+0x6e>
 8008070:	2221      	movs	r2, #33	; 0x21
 8008072:	2104      	movs	r1, #4
 8008074:	4620      	mov	r0, r4
 8008076:	f001 fd7d 	bl	8009b74 <_calloc_r>
 800807a:	69e3      	ldr	r3, [r4, #28]
 800807c:	60f0      	str	r0, [r6, #12]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e4      	bne.n	800804e <_Balloc+0x2e>
 8008084:	2000      	movs	r0, #0
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	6802      	ldr	r2, [r0, #0]
 800808a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800808e:	2300      	movs	r3, #0
 8008090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008094:	e7f7      	b.n	8008086 <_Balloc+0x66>
 8008096:	bf00      	nop
 8008098:	0800a994 	.word	0x0800a994
 800809c:	0800aa14 	.word	0x0800aa14

080080a0 <_Bfree>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	69c6      	ldr	r6, [r0, #28]
 80080a4:	4605      	mov	r5, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	b976      	cbnz	r6, 80080c8 <_Bfree+0x28>
 80080aa:	2010      	movs	r0, #16
 80080ac:	f7ff ff04 	bl	8007eb8 <malloc>
 80080b0:	4602      	mov	r2, r0
 80080b2:	61e8      	str	r0, [r5, #28]
 80080b4:	b920      	cbnz	r0, 80080c0 <_Bfree+0x20>
 80080b6:	218f      	movs	r1, #143	; 0x8f
 80080b8:	4b08      	ldr	r3, [pc, #32]	; (80080dc <_Bfree+0x3c>)
 80080ba:	4809      	ldr	r0, [pc, #36]	; (80080e0 <_Bfree+0x40>)
 80080bc:	f001 fd3c 	bl	8009b38 <__assert_func>
 80080c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c4:	6006      	str	r6, [r0, #0]
 80080c6:	60c6      	str	r6, [r0, #12]
 80080c8:	b13c      	cbz	r4, 80080da <_Bfree+0x3a>
 80080ca:	69eb      	ldr	r3, [r5, #28]
 80080cc:	6862      	ldr	r2, [r4, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080d4:	6021      	str	r1, [r4, #0]
 80080d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	0800a994 	.word	0x0800a994
 80080e0:	0800aa14 	.word	0x0800aa14

080080e4 <__multadd>:
 80080e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	4607      	mov	r7, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	461e      	mov	r6, r3
 80080ee:	2000      	movs	r0, #0
 80080f0:	690d      	ldr	r5, [r1, #16]
 80080f2:	f101 0c14 	add.w	ip, r1, #20
 80080f6:	f8dc 3000 	ldr.w	r3, [ip]
 80080fa:	3001      	adds	r0, #1
 80080fc:	b299      	uxth	r1, r3
 80080fe:	fb02 6101 	mla	r1, r2, r1, r6
 8008102:	0c1e      	lsrs	r6, r3, #16
 8008104:	0c0b      	lsrs	r3, r1, #16
 8008106:	fb02 3306 	mla	r3, r2, r6, r3
 800810a:	b289      	uxth	r1, r1
 800810c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008110:	4285      	cmp	r5, r0
 8008112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008116:	f84c 1b04 	str.w	r1, [ip], #4
 800811a:	dcec      	bgt.n	80080f6 <__multadd+0x12>
 800811c:	b30e      	cbz	r6, 8008162 <__multadd+0x7e>
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	42ab      	cmp	r3, r5
 8008122:	dc19      	bgt.n	8008158 <__multadd+0x74>
 8008124:	6861      	ldr	r1, [r4, #4]
 8008126:	4638      	mov	r0, r7
 8008128:	3101      	adds	r1, #1
 800812a:	f7ff ff79 	bl	8008020 <_Balloc>
 800812e:	4680      	mov	r8, r0
 8008130:	b928      	cbnz	r0, 800813e <__multadd+0x5a>
 8008132:	4602      	mov	r2, r0
 8008134:	21ba      	movs	r1, #186	; 0xba
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <__multadd+0x84>)
 8008138:	480c      	ldr	r0, [pc, #48]	; (800816c <__multadd+0x88>)
 800813a:	f001 fcfd 	bl	8009b38 <__assert_func>
 800813e:	6922      	ldr	r2, [r4, #16]
 8008140:	f104 010c 	add.w	r1, r4, #12
 8008144:	3202      	adds	r2, #2
 8008146:	0092      	lsls	r2, r2, #2
 8008148:	300c      	adds	r0, #12
 800814a:	f001 fce1 	bl	8009b10 <memcpy>
 800814e:	4621      	mov	r1, r4
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ffa5 	bl	80080a0 <_Bfree>
 8008156:	4644      	mov	r4, r8
 8008158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800815c:	3501      	adds	r5, #1
 800815e:	615e      	str	r6, [r3, #20]
 8008160:	6125      	str	r5, [r4, #16]
 8008162:	4620      	mov	r0, r4
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	0800aa03 	.word	0x0800aa03
 800816c:	0800aa14 	.word	0x0800aa14

08008170 <__s2b>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4615      	mov	r5, r2
 8008176:	2209      	movs	r2, #9
 8008178:	461f      	mov	r7, r3
 800817a:	3308      	adds	r3, #8
 800817c:	460c      	mov	r4, r1
 800817e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008182:	4606      	mov	r6, r0
 8008184:	2201      	movs	r2, #1
 8008186:	2100      	movs	r1, #0
 8008188:	429a      	cmp	r2, r3
 800818a:	db09      	blt.n	80081a0 <__s2b+0x30>
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff ff47 	bl	8008020 <_Balloc>
 8008192:	b940      	cbnz	r0, 80081a6 <__s2b+0x36>
 8008194:	4602      	mov	r2, r0
 8008196:	21d3      	movs	r1, #211	; 0xd3
 8008198:	4b18      	ldr	r3, [pc, #96]	; (80081fc <__s2b+0x8c>)
 800819a:	4819      	ldr	r0, [pc, #100]	; (8008200 <__s2b+0x90>)
 800819c:	f001 fccc 	bl	8009b38 <__assert_func>
 80081a0:	0052      	lsls	r2, r2, #1
 80081a2:	3101      	adds	r1, #1
 80081a4:	e7f0      	b.n	8008188 <__s2b+0x18>
 80081a6:	9b08      	ldr	r3, [sp, #32]
 80081a8:	2d09      	cmp	r5, #9
 80081aa:	6143      	str	r3, [r0, #20]
 80081ac:	f04f 0301 	mov.w	r3, #1
 80081b0:	6103      	str	r3, [r0, #16]
 80081b2:	dd16      	ble.n	80081e2 <__s2b+0x72>
 80081b4:	f104 0909 	add.w	r9, r4, #9
 80081b8:	46c8      	mov	r8, r9
 80081ba:	442c      	add	r4, r5
 80081bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081c0:	4601      	mov	r1, r0
 80081c2:	220a      	movs	r2, #10
 80081c4:	4630      	mov	r0, r6
 80081c6:	3b30      	subs	r3, #48	; 0x30
 80081c8:	f7ff ff8c 	bl	80080e4 <__multadd>
 80081cc:	45a0      	cmp	r8, r4
 80081ce:	d1f5      	bne.n	80081bc <__s2b+0x4c>
 80081d0:	f1a5 0408 	sub.w	r4, r5, #8
 80081d4:	444c      	add	r4, r9
 80081d6:	1b2d      	subs	r5, r5, r4
 80081d8:	1963      	adds	r3, r4, r5
 80081da:	42bb      	cmp	r3, r7
 80081dc:	db04      	blt.n	80081e8 <__s2b+0x78>
 80081de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e2:	2509      	movs	r5, #9
 80081e4:	340a      	adds	r4, #10
 80081e6:	e7f6      	b.n	80081d6 <__s2b+0x66>
 80081e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081ec:	4601      	mov	r1, r0
 80081ee:	220a      	movs	r2, #10
 80081f0:	4630      	mov	r0, r6
 80081f2:	3b30      	subs	r3, #48	; 0x30
 80081f4:	f7ff ff76 	bl	80080e4 <__multadd>
 80081f8:	e7ee      	b.n	80081d8 <__s2b+0x68>
 80081fa:	bf00      	nop
 80081fc:	0800aa03 	.word	0x0800aa03
 8008200:	0800aa14 	.word	0x0800aa14

08008204 <__hi0bits>:
 8008204:	0c02      	lsrs	r2, r0, #16
 8008206:	0412      	lsls	r2, r2, #16
 8008208:	4603      	mov	r3, r0
 800820a:	b9ca      	cbnz	r2, 8008240 <__hi0bits+0x3c>
 800820c:	0403      	lsls	r3, r0, #16
 800820e:	2010      	movs	r0, #16
 8008210:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008214:	bf04      	itt	eq
 8008216:	021b      	lsleq	r3, r3, #8
 8008218:	3008      	addeq	r0, #8
 800821a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800821e:	bf04      	itt	eq
 8008220:	011b      	lsleq	r3, r3, #4
 8008222:	3004      	addeq	r0, #4
 8008224:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008228:	bf04      	itt	eq
 800822a:	009b      	lsleq	r3, r3, #2
 800822c:	3002      	addeq	r0, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	db05      	blt.n	800823e <__hi0bits+0x3a>
 8008232:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008236:	f100 0001 	add.w	r0, r0, #1
 800823a:	bf08      	it	eq
 800823c:	2020      	moveq	r0, #32
 800823e:	4770      	bx	lr
 8008240:	2000      	movs	r0, #0
 8008242:	e7e5      	b.n	8008210 <__hi0bits+0xc>

08008244 <__lo0bits>:
 8008244:	6803      	ldr	r3, [r0, #0]
 8008246:	4602      	mov	r2, r0
 8008248:	f013 0007 	ands.w	r0, r3, #7
 800824c:	d00b      	beq.n	8008266 <__lo0bits+0x22>
 800824e:	07d9      	lsls	r1, r3, #31
 8008250:	d421      	bmi.n	8008296 <__lo0bits+0x52>
 8008252:	0798      	lsls	r0, r3, #30
 8008254:	bf49      	itett	mi
 8008256:	085b      	lsrmi	r3, r3, #1
 8008258:	089b      	lsrpl	r3, r3, #2
 800825a:	2001      	movmi	r0, #1
 800825c:	6013      	strmi	r3, [r2, #0]
 800825e:	bf5c      	itt	pl
 8008260:	2002      	movpl	r0, #2
 8008262:	6013      	strpl	r3, [r2, #0]
 8008264:	4770      	bx	lr
 8008266:	b299      	uxth	r1, r3
 8008268:	b909      	cbnz	r1, 800826e <__lo0bits+0x2a>
 800826a:	2010      	movs	r0, #16
 800826c:	0c1b      	lsrs	r3, r3, #16
 800826e:	b2d9      	uxtb	r1, r3
 8008270:	b909      	cbnz	r1, 8008276 <__lo0bits+0x32>
 8008272:	3008      	adds	r0, #8
 8008274:	0a1b      	lsrs	r3, r3, #8
 8008276:	0719      	lsls	r1, r3, #28
 8008278:	bf04      	itt	eq
 800827a:	091b      	lsreq	r3, r3, #4
 800827c:	3004      	addeq	r0, #4
 800827e:	0799      	lsls	r1, r3, #30
 8008280:	bf04      	itt	eq
 8008282:	089b      	lsreq	r3, r3, #2
 8008284:	3002      	addeq	r0, #2
 8008286:	07d9      	lsls	r1, r3, #31
 8008288:	d403      	bmi.n	8008292 <__lo0bits+0x4e>
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	f100 0001 	add.w	r0, r0, #1
 8008290:	d003      	beq.n	800829a <__lo0bits+0x56>
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	4770      	bx	lr
 8008296:	2000      	movs	r0, #0
 8008298:	4770      	bx	lr
 800829a:	2020      	movs	r0, #32
 800829c:	4770      	bx	lr
	...

080082a0 <__i2b>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	2101      	movs	r1, #1
 80082a6:	f7ff febb 	bl	8008020 <_Balloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	b928      	cbnz	r0, 80082ba <__i2b+0x1a>
 80082ae:	f240 1145 	movw	r1, #325	; 0x145
 80082b2:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <__i2b+0x24>)
 80082b4:	4804      	ldr	r0, [pc, #16]	; (80082c8 <__i2b+0x28>)
 80082b6:	f001 fc3f 	bl	8009b38 <__assert_func>
 80082ba:	2301      	movs	r3, #1
 80082bc:	6144      	str	r4, [r0, #20]
 80082be:	6103      	str	r3, [r0, #16]
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	bf00      	nop
 80082c4:	0800aa03 	.word	0x0800aa03
 80082c8:	0800aa14 	.word	0x0800aa14

080082cc <__multiply>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	4691      	mov	r9, r2
 80082d2:	690a      	ldr	r2, [r1, #16]
 80082d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082d8:	460c      	mov	r4, r1
 80082da:	429a      	cmp	r2, r3
 80082dc:	bfbe      	ittt	lt
 80082de:	460b      	movlt	r3, r1
 80082e0:	464c      	movlt	r4, r9
 80082e2:	4699      	movlt	r9, r3
 80082e4:	6927      	ldr	r7, [r4, #16]
 80082e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	6861      	ldr	r1, [r4, #4]
 80082ee:	eb07 060a 	add.w	r6, r7, sl
 80082f2:	42b3      	cmp	r3, r6
 80082f4:	b085      	sub	sp, #20
 80082f6:	bfb8      	it	lt
 80082f8:	3101      	addlt	r1, #1
 80082fa:	f7ff fe91 	bl	8008020 <_Balloc>
 80082fe:	b930      	cbnz	r0, 800830e <__multiply+0x42>
 8008300:	4602      	mov	r2, r0
 8008302:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008306:	4b43      	ldr	r3, [pc, #268]	; (8008414 <__multiply+0x148>)
 8008308:	4843      	ldr	r0, [pc, #268]	; (8008418 <__multiply+0x14c>)
 800830a:	f001 fc15 	bl	8009b38 <__assert_func>
 800830e:	f100 0514 	add.w	r5, r0, #20
 8008312:	462b      	mov	r3, r5
 8008314:	2200      	movs	r2, #0
 8008316:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800831a:	4543      	cmp	r3, r8
 800831c:	d321      	bcc.n	8008362 <__multiply+0x96>
 800831e:	f104 0314 	add.w	r3, r4, #20
 8008322:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008326:	f109 0314 	add.w	r3, r9, #20
 800832a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800832e:	9202      	str	r2, [sp, #8]
 8008330:	1b3a      	subs	r2, r7, r4
 8008332:	3a15      	subs	r2, #21
 8008334:	f022 0203 	bic.w	r2, r2, #3
 8008338:	3204      	adds	r2, #4
 800833a:	f104 0115 	add.w	r1, r4, #21
 800833e:	428f      	cmp	r7, r1
 8008340:	bf38      	it	cc
 8008342:	2204      	movcc	r2, #4
 8008344:	9201      	str	r2, [sp, #4]
 8008346:	9a02      	ldr	r2, [sp, #8]
 8008348:	9303      	str	r3, [sp, #12]
 800834a:	429a      	cmp	r2, r3
 800834c:	d80c      	bhi.n	8008368 <__multiply+0x9c>
 800834e:	2e00      	cmp	r6, #0
 8008350:	dd03      	ble.n	800835a <__multiply+0x8e>
 8008352:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008356:	2b00      	cmp	r3, #0
 8008358:	d05a      	beq.n	8008410 <__multiply+0x144>
 800835a:	6106      	str	r6, [r0, #16]
 800835c:	b005      	add	sp, #20
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	f843 2b04 	str.w	r2, [r3], #4
 8008366:	e7d8      	b.n	800831a <__multiply+0x4e>
 8008368:	f8b3 a000 	ldrh.w	sl, [r3]
 800836c:	f1ba 0f00 	cmp.w	sl, #0
 8008370:	d023      	beq.n	80083ba <__multiply+0xee>
 8008372:	46a9      	mov	r9, r5
 8008374:	f04f 0c00 	mov.w	ip, #0
 8008378:	f104 0e14 	add.w	lr, r4, #20
 800837c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008380:	f8d9 1000 	ldr.w	r1, [r9]
 8008384:	fa1f fb82 	uxth.w	fp, r2
 8008388:	b289      	uxth	r1, r1
 800838a:	fb0a 110b 	mla	r1, sl, fp, r1
 800838e:	4461      	add	r1, ip
 8008390:	f8d9 c000 	ldr.w	ip, [r9]
 8008394:	0c12      	lsrs	r2, r2, #16
 8008396:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800839a:	fb0a c202 	mla	r2, sl, r2, ip
 800839e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083a2:	b289      	uxth	r1, r1
 80083a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083a8:	4577      	cmp	r7, lr
 80083aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083ae:	f849 1b04 	str.w	r1, [r9], #4
 80083b2:	d8e3      	bhi.n	800837c <__multiply+0xb0>
 80083b4:	9a01      	ldr	r2, [sp, #4]
 80083b6:	f845 c002 	str.w	ip, [r5, r2]
 80083ba:	9a03      	ldr	r2, [sp, #12]
 80083bc:	3304      	adds	r3, #4
 80083be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	d021      	beq.n	800840c <__multiply+0x140>
 80083c8:	46ae      	mov	lr, r5
 80083ca:	f04f 0a00 	mov.w	sl, #0
 80083ce:	6829      	ldr	r1, [r5, #0]
 80083d0:	f104 0c14 	add.w	ip, r4, #20
 80083d4:	f8bc b000 	ldrh.w	fp, [ip]
 80083d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083dc:	b289      	uxth	r1, r1
 80083de:	fb09 220b 	mla	r2, r9, fp, r2
 80083e2:	4452      	add	r2, sl
 80083e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083e8:	f84e 1b04 	str.w	r1, [lr], #4
 80083ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80083f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083f4:	f8be 1000 	ldrh.w	r1, [lr]
 80083f8:	4567      	cmp	r7, ip
 80083fa:	fb09 110a 	mla	r1, r9, sl, r1
 80083fe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008402:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008406:	d8e5      	bhi.n	80083d4 <__multiply+0x108>
 8008408:	9a01      	ldr	r2, [sp, #4]
 800840a:	50a9      	str	r1, [r5, r2]
 800840c:	3504      	adds	r5, #4
 800840e:	e79a      	b.n	8008346 <__multiply+0x7a>
 8008410:	3e01      	subs	r6, #1
 8008412:	e79c      	b.n	800834e <__multiply+0x82>
 8008414:	0800aa03 	.word	0x0800aa03
 8008418:	0800aa14 	.word	0x0800aa14

0800841c <__pow5mult>:
 800841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008420:	4615      	mov	r5, r2
 8008422:	f012 0203 	ands.w	r2, r2, #3
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	d007      	beq.n	800843c <__pow5mult+0x20>
 800842c:	4c25      	ldr	r4, [pc, #148]	; (80084c4 <__pow5mult+0xa8>)
 800842e:	3a01      	subs	r2, #1
 8008430:	2300      	movs	r3, #0
 8008432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008436:	f7ff fe55 	bl	80080e4 <__multadd>
 800843a:	4607      	mov	r7, r0
 800843c:	10ad      	asrs	r5, r5, #2
 800843e:	d03d      	beq.n	80084bc <__pow5mult+0xa0>
 8008440:	69f4      	ldr	r4, [r6, #28]
 8008442:	b97c      	cbnz	r4, 8008464 <__pow5mult+0x48>
 8008444:	2010      	movs	r0, #16
 8008446:	f7ff fd37 	bl	8007eb8 <malloc>
 800844a:	4602      	mov	r2, r0
 800844c:	61f0      	str	r0, [r6, #28]
 800844e:	b928      	cbnz	r0, 800845c <__pow5mult+0x40>
 8008450:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008454:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <__pow5mult+0xac>)
 8008456:	481d      	ldr	r0, [pc, #116]	; (80084cc <__pow5mult+0xb0>)
 8008458:	f001 fb6e 	bl	8009b38 <__assert_func>
 800845c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008460:	6004      	str	r4, [r0, #0]
 8008462:	60c4      	str	r4, [r0, #12]
 8008464:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800846c:	b94c      	cbnz	r4, 8008482 <__pow5mult+0x66>
 800846e:	f240 2171 	movw	r1, #625	; 0x271
 8008472:	4630      	mov	r0, r6
 8008474:	f7ff ff14 	bl	80082a0 <__i2b>
 8008478:	2300      	movs	r3, #0
 800847a:	4604      	mov	r4, r0
 800847c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008480:	6003      	str	r3, [r0, #0]
 8008482:	f04f 0900 	mov.w	r9, #0
 8008486:	07eb      	lsls	r3, r5, #31
 8008488:	d50a      	bpl.n	80084a0 <__pow5mult+0x84>
 800848a:	4639      	mov	r1, r7
 800848c:	4622      	mov	r2, r4
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ff1c 	bl	80082cc <__multiply>
 8008494:	4680      	mov	r8, r0
 8008496:	4639      	mov	r1, r7
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff fe01 	bl	80080a0 <_Bfree>
 800849e:	4647      	mov	r7, r8
 80084a0:	106d      	asrs	r5, r5, #1
 80084a2:	d00b      	beq.n	80084bc <__pow5mult+0xa0>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	b938      	cbnz	r0, 80084b8 <__pow5mult+0x9c>
 80084a8:	4622      	mov	r2, r4
 80084aa:	4621      	mov	r1, r4
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7ff ff0d 	bl	80082cc <__multiply>
 80084b2:	6020      	str	r0, [r4, #0]
 80084b4:	f8c0 9000 	str.w	r9, [r0]
 80084b8:	4604      	mov	r4, r0
 80084ba:	e7e4      	b.n	8008486 <__pow5mult+0x6a>
 80084bc:	4638      	mov	r0, r7
 80084be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084c2:	bf00      	nop
 80084c4:	0800ab60 	.word	0x0800ab60
 80084c8:	0800a994 	.word	0x0800a994
 80084cc:	0800aa14 	.word	0x0800aa14

080084d0 <__lshift>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	460c      	mov	r4, r1
 80084d6:	4607      	mov	r7, r0
 80084d8:	4691      	mov	r9, r2
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	6849      	ldr	r1, [r1, #4]
 80084de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084e2:	68a3      	ldr	r3, [r4, #8]
 80084e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084e8:	f108 0601 	add.w	r6, r8, #1
 80084ec:	42b3      	cmp	r3, r6
 80084ee:	db0b      	blt.n	8008508 <__lshift+0x38>
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff fd95 	bl	8008020 <_Balloc>
 80084f6:	4605      	mov	r5, r0
 80084f8:	b948      	cbnz	r0, 800850e <__lshift+0x3e>
 80084fa:	4602      	mov	r2, r0
 80084fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <__lshift+0xd0>)
 8008502:	4828      	ldr	r0, [pc, #160]	; (80085a4 <__lshift+0xd4>)
 8008504:	f001 fb18 	bl	8009b38 <__assert_func>
 8008508:	3101      	adds	r1, #1
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	e7ee      	b.n	80084ec <__lshift+0x1c>
 800850e:	2300      	movs	r3, #0
 8008510:	f100 0114 	add.w	r1, r0, #20
 8008514:	f100 0210 	add.w	r2, r0, #16
 8008518:	4618      	mov	r0, r3
 800851a:	4553      	cmp	r3, sl
 800851c:	db33      	blt.n	8008586 <__lshift+0xb6>
 800851e:	6920      	ldr	r0, [r4, #16]
 8008520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008524:	f104 0314 	add.w	r3, r4, #20
 8008528:	f019 091f 	ands.w	r9, r9, #31
 800852c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008534:	d02b      	beq.n	800858e <__lshift+0xbe>
 8008536:	468a      	mov	sl, r1
 8008538:	2200      	movs	r2, #0
 800853a:	f1c9 0e20 	rsb	lr, r9, #32
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	fa00 f009 	lsl.w	r0, r0, r9
 8008544:	4310      	orrs	r0, r2
 8008546:	f84a 0b04 	str.w	r0, [sl], #4
 800854a:	f853 2b04 	ldr.w	r2, [r3], #4
 800854e:	459c      	cmp	ip, r3
 8008550:	fa22 f20e 	lsr.w	r2, r2, lr
 8008554:	d8f3      	bhi.n	800853e <__lshift+0x6e>
 8008556:	ebac 0304 	sub.w	r3, ip, r4
 800855a:	3b15      	subs	r3, #21
 800855c:	f023 0303 	bic.w	r3, r3, #3
 8008560:	3304      	adds	r3, #4
 8008562:	f104 0015 	add.w	r0, r4, #21
 8008566:	4584      	cmp	ip, r0
 8008568:	bf38      	it	cc
 800856a:	2304      	movcc	r3, #4
 800856c:	50ca      	str	r2, [r1, r3]
 800856e:	b10a      	cbz	r2, 8008574 <__lshift+0xa4>
 8008570:	f108 0602 	add.w	r6, r8, #2
 8008574:	3e01      	subs	r6, #1
 8008576:	4638      	mov	r0, r7
 8008578:	4621      	mov	r1, r4
 800857a:	612e      	str	r6, [r5, #16]
 800857c:	f7ff fd90 	bl	80080a0 <_Bfree>
 8008580:	4628      	mov	r0, r5
 8008582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008586:	f842 0f04 	str.w	r0, [r2, #4]!
 800858a:	3301      	adds	r3, #1
 800858c:	e7c5      	b.n	800851a <__lshift+0x4a>
 800858e:	3904      	subs	r1, #4
 8008590:	f853 2b04 	ldr.w	r2, [r3], #4
 8008594:	459c      	cmp	ip, r3
 8008596:	f841 2f04 	str.w	r2, [r1, #4]!
 800859a:	d8f9      	bhi.n	8008590 <__lshift+0xc0>
 800859c:	e7ea      	b.n	8008574 <__lshift+0xa4>
 800859e:	bf00      	nop
 80085a0:	0800aa03 	.word	0x0800aa03
 80085a4:	0800aa14 	.word	0x0800aa14

080085a8 <__mcmp>:
 80085a8:	4603      	mov	r3, r0
 80085aa:	690a      	ldr	r2, [r1, #16]
 80085ac:	6900      	ldr	r0, [r0, #16]
 80085ae:	b530      	push	{r4, r5, lr}
 80085b0:	1a80      	subs	r0, r0, r2
 80085b2:	d10d      	bne.n	80085d0 <__mcmp+0x28>
 80085b4:	3314      	adds	r3, #20
 80085b6:	3114      	adds	r1, #20
 80085b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085c8:	4295      	cmp	r5, r2
 80085ca:	d002      	beq.n	80085d2 <__mcmp+0x2a>
 80085cc:	d304      	bcc.n	80085d8 <__mcmp+0x30>
 80085ce:	2001      	movs	r0, #1
 80085d0:	bd30      	pop	{r4, r5, pc}
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	d3f4      	bcc.n	80085c0 <__mcmp+0x18>
 80085d6:	e7fb      	b.n	80085d0 <__mcmp+0x28>
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	e7f8      	b.n	80085d0 <__mcmp+0x28>
	...

080085e0 <__mdiff>:
 80085e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	460d      	mov	r5, r1
 80085e6:	4607      	mov	r7, r0
 80085e8:	4611      	mov	r1, r2
 80085ea:	4628      	mov	r0, r5
 80085ec:	4614      	mov	r4, r2
 80085ee:	f7ff ffdb 	bl	80085a8 <__mcmp>
 80085f2:	1e06      	subs	r6, r0, #0
 80085f4:	d111      	bne.n	800861a <__mdiff+0x3a>
 80085f6:	4631      	mov	r1, r6
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff fd11 	bl	8008020 <_Balloc>
 80085fe:	4602      	mov	r2, r0
 8008600:	b928      	cbnz	r0, 800860e <__mdiff+0x2e>
 8008602:	f240 2137 	movw	r1, #567	; 0x237
 8008606:	4b3a      	ldr	r3, [pc, #232]	; (80086f0 <__mdiff+0x110>)
 8008608:	483a      	ldr	r0, [pc, #232]	; (80086f4 <__mdiff+0x114>)
 800860a:	f001 fa95 	bl	8009b38 <__assert_func>
 800860e:	2301      	movs	r3, #1
 8008610:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008614:	4610      	mov	r0, r2
 8008616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861a:	bfa4      	itt	ge
 800861c:	4623      	movge	r3, r4
 800861e:	462c      	movge	r4, r5
 8008620:	4638      	mov	r0, r7
 8008622:	6861      	ldr	r1, [r4, #4]
 8008624:	bfa6      	itte	ge
 8008626:	461d      	movge	r5, r3
 8008628:	2600      	movge	r6, #0
 800862a:	2601      	movlt	r6, #1
 800862c:	f7ff fcf8 	bl	8008020 <_Balloc>
 8008630:	4602      	mov	r2, r0
 8008632:	b918      	cbnz	r0, 800863c <__mdiff+0x5c>
 8008634:	f240 2145 	movw	r1, #581	; 0x245
 8008638:	4b2d      	ldr	r3, [pc, #180]	; (80086f0 <__mdiff+0x110>)
 800863a:	e7e5      	b.n	8008608 <__mdiff+0x28>
 800863c:	f102 0814 	add.w	r8, r2, #20
 8008640:	46c2      	mov	sl, r8
 8008642:	f04f 0c00 	mov.w	ip, #0
 8008646:	6927      	ldr	r7, [r4, #16]
 8008648:	60c6      	str	r6, [r0, #12]
 800864a:	692e      	ldr	r6, [r5, #16]
 800864c:	f104 0014 	add.w	r0, r4, #20
 8008650:	f105 0914 	add.w	r9, r5, #20
 8008654:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008658:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800865c:	3410      	adds	r4, #16
 800865e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008662:	f859 3b04 	ldr.w	r3, [r9], #4
 8008666:	fa1f f18b 	uxth.w	r1, fp
 800866a:	4461      	add	r1, ip
 800866c:	fa1f fc83 	uxth.w	ip, r3
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	eba1 010c 	sub.w	r1, r1, ip
 8008676:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800867a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800867e:	b289      	uxth	r1, r1
 8008680:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008684:	454e      	cmp	r6, r9
 8008686:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800868a:	f84a 1b04 	str.w	r1, [sl], #4
 800868e:	d8e6      	bhi.n	800865e <__mdiff+0x7e>
 8008690:	1b73      	subs	r3, r6, r5
 8008692:	3b15      	subs	r3, #21
 8008694:	f023 0303 	bic.w	r3, r3, #3
 8008698:	3515      	adds	r5, #21
 800869a:	3304      	adds	r3, #4
 800869c:	42ae      	cmp	r6, r5
 800869e:	bf38      	it	cc
 80086a0:	2304      	movcc	r3, #4
 80086a2:	4418      	add	r0, r3
 80086a4:	4443      	add	r3, r8
 80086a6:	461e      	mov	r6, r3
 80086a8:	4605      	mov	r5, r0
 80086aa:	4575      	cmp	r5, lr
 80086ac:	d30e      	bcc.n	80086cc <__mdiff+0xec>
 80086ae:	f10e 0103 	add.w	r1, lr, #3
 80086b2:	1a09      	subs	r1, r1, r0
 80086b4:	f021 0103 	bic.w	r1, r1, #3
 80086b8:	3803      	subs	r0, #3
 80086ba:	4586      	cmp	lr, r0
 80086bc:	bf38      	it	cc
 80086be:	2100      	movcc	r1, #0
 80086c0:	440b      	add	r3, r1
 80086c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086c6:	b189      	cbz	r1, 80086ec <__mdiff+0x10c>
 80086c8:	6117      	str	r7, [r2, #16]
 80086ca:	e7a3      	b.n	8008614 <__mdiff+0x34>
 80086cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80086d0:	fa1f f188 	uxth.w	r1, r8
 80086d4:	4461      	add	r1, ip
 80086d6:	140c      	asrs	r4, r1, #16
 80086d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086dc:	b289      	uxth	r1, r1
 80086de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80086e2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80086e6:	f846 1b04 	str.w	r1, [r6], #4
 80086ea:	e7de      	b.n	80086aa <__mdiff+0xca>
 80086ec:	3f01      	subs	r7, #1
 80086ee:	e7e8      	b.n	80086c2 <__mdiff+0xe2>
 80086f0:	0800aa03 	.word	0x0800aa03
 80086f4:	0800aa14 	.word	0x0800aa14

080086f8 <__ulp>:
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <__ulp+0x3c>)
 80086fa:	400b      	ands	r3, r1
 80086fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc08      	bgt.n	8008716 <__ulp+0x1e>
 8008704:	425b      	negs	r3, r3
 8008706:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800870a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800870e:	da04      	bge.n	800871a <__ulp+0x22>
 8008710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008714:	4113      	asrs	r3, r2
 8008716:	2200      	movs	r2, #0
 8008718:	e008      	b.n	800872c <__ulp+0x34>
 800871a:	f1a2 0314 	sub.w	r3, r2, #20
 800871e:	2b1e      	cmp	r3, #30
 8008720:	bfd6      	itet	le
 8008722:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008726:	2201      	movgt	r2, #1
 8008728:	40da      	lsrle	r2, r3
 800872a:	2300      	movs	r3, #0
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	7ff00000 	.word	0x7ff00000

08008738 <__b2d>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	6905      	ldr	r5, [r0, #16]
 800873c:	f100 0714 	add.w	r7, r0, #20
 8008740:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008744:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008748:	1f2e      	subs	r6, r5, #4
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff fd5a 	bl	8008204 <__hi0bits>
 8008750:	f1c0 0220 	rsb	r2, r0, #32
 8008754:	280a      	cmp	r0, #10
 8008756:	4603      	mov	r3, r0
 8008758:	f8df c068 	ldr.w	ip, [pc, #104]	; 80087c4 <__b2d+0x8c>
 800875c:	600a      	str	r2, [r1, #0]
 800875e:	dc12      	bgt.n	8008786 <__b2d+0x4e>
 8008760:	f1c0 0e0b 	rsb	lr, r0, #11
 8008764:	fa24 f20e 	lsr.w	r2, r4, lr
 8008768:	42b7      	cmp	r7, r6
 800876a:	ea42 010c 	orr.w	r1, r2, ip
 800876e:	bf2c      	ite	cs
 8008770:	2200      	movcs	r2, #0
 8008772:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008776:	3315      	adds	r3, #21
 8008778:	fa04 f303 	lsl.w	r3, r4, r3
 800877c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008780:	431a      	orrs	r2, r3
 8008782:	4610      	mov	r0, r2
 8008784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008786:	42b7      	cmp	r7, r6
 8008788:	bf2e      	itee	cs
 800878a:	2200      	movcs	r2, #0
 800878c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008790:	f1a5 0608 	subcc.w	r6, r5, #8
 8008794:	3b0b      	subs	r3, #11
 8008796:	d012      	beq.n	80087be <__b2d+0x86>
 8008798:	f1c3 0520 	rsb	r5, r3, #32
 800879c:	fa22 f105 	lsr.w	r1, r2, r5
 80087a0:	409c      	lsls	r4, r3
 80087a2:	430c      	orrs	r4, r1
 80087a4:	42be      	cmp	r6, r7
 80087a6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80087aa:	bf94      	ite	ls
 80087ac:	2400      	movls	r4, #0
 80087ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087b2:	409a      	lsls	r2, r3
 80087b4:	40ec      	lsrs	r4, r5
 80087b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80087ba:	4322      	orrs	r2, r4
 80087bc:	e7e1      	b.n	8008782 <__b2d+0x4a>
 80087be:	ea44 010c 	orr.w	r1, r4, ip
 80087c2:	e7de      	b.n	8008782 <__b2d+0x4a>
 80087c4:	3ff00000 	.word	0x3ff00000

080087c8 <__d2b>:
 80087c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ca:	2101      	movs	r1, #1
 80087cc:	4617      	mov	r7, r2
 80087ce:	461c      	mov	r4, r3
 80087d0:	9e08      	ldr	r6, [sp, #32]
 80087d2:	f7ff fc25 	bl	8008020 <_Balloc>
 80087d6:	4605      	mov	r5, r0
 80087d8:	b930      	cbnz	r0, 80087e8 <__d2b+0x20>
 80087da:	4602      	mov	r2, r0
 80087dc:	f240 310f 	movw	r1, #783	; 0x30f
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <__d2b+0xa4>)
 80087e2:	4823      	ldr	r0, [pc, #140]	; (8008870 <__d2b+0xa8>)
 80087e4:	f001 f9a8 	bl	8009b38 <__assert_func>
 80087e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80087ec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80087f0:	bb24      	cbnz	r4, 800883c <__d2b+0x74>
 80087f2:	2f00      	cmp	r7, #0
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	d026      	beq.n	8008846 <__d2b+0x7e>
 80087f8:	4668      	mov	r0, sp
 80087fa:	9700      	str	r7, [sp, #0]
 80087fc:	f7ff fd22 	bl	8008244 <__lo0bits>
 8008800:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008804:	b1e8      	cbz	r0, 8008842 <__d2b+0x7a>
 8008806:	f1c0 0320 	rsb	r3, r0, #32
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	430b      	orrs	r3, r1
 8008810:	40c2      	lsrs	r2, r0
 8008812:	616b      	str	r3, [r5, #20]
 8008814:	9201      	str	r2, [sp, #4]
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2102      	movne	r1, #2
 800881e:	2101      	moveq	r1, #1
 8008820:	61ab      	str	r3, [r5, #24]
 8008822:	6129      	str	r1, [r5, #16]
 8008824:	b1bc      	cbz	r4, 8008856 <__d2b+0x8e>
 8008826:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800882a:	4404      	add	r4, r0
 800882c:	6034      	str	r4, [r6, #0]
 800882e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008834:	6018      	str	r0, [r3, #0]
 8008836:	4628      	mov	r0, r5
 8008838:	b003      	add	sp, #12
 800883a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008840:	e7d7      	b.n	80087f2 <__d2b+0x2a>
 8008842:	6169      	str	r1, [r5, #20]
 8008844:	e7e7      	b.n	8008816 <__d2b+0x4e>
 8008846:	a801      	add	r0, sp, #4
 8008848:	f7ff fcfc 	bl	8008244 <__lo0bits>
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	2101      	movs	r1, #1
 8008850:	616b      	str	r3, [r5, #20]
 8008852:	3020      	adds	r0, #32
 8008854:	e7e5      	b.n	8008822 <__d2b+0x5a>
 8008856:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800885a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800885e:	6030      	str	r0, [r6, #0]
 8008860:	6918      	ldr	r0, [r3, #16]
 8008862:	f7ff fccf 	bl	8008204 <__hi0bits>
 8008866:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800886a:	e7e2      	b.n	8008832 <__d2b+0x6a>
 800886c:	0800aa03 	.word	0x0800aa03
 8008870:	0800aa14 	.word	0x0800aa14

08008874 <__ratio>:
 8008874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	4688      	mov	r8, r1
 800887a:	4669      	mov	r1, sp
 800887c:	4681      	mov	r9, r0
 800887e:	f7ff ff5b 	bl	8008738 <__b2d>
 8008882:	460f      	mov	r7, r1
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	4640      	mov	r0, r8
 800888a:	a901      	add	r1, sp, #4
 800888c:	f7ff ff54 	bl	8008738 <__b2d>
 8008890:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008894:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008898:	468b      	mov	fp, r1
 800889a:	eba3 0c02 	sub.w	ip, r3, r2
 800889e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfd5      	itete	le
 80088ac:	460a      	movle	r2, r1
 80088ae:	462a      	movgt	r2, r5
 80088b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088b4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088b8:	bfd8      	it	le
 80088ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80088be:	465b      	mov	r3, fp
 80088c0:	4602      	mov	r2, r0
 80088c2:	4639      	mov	r1, r7
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7f7 ffe5 	bl	8000894 <__aeabi_ddiv>
 80088ca:	b003      	add	sp, #12
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088d0 <__copybits>:
 80088d0:	3901      	subs	r1, #1
 80088d2:	b570      	push	{r4, r5, r6, lr}
 80088d4:	1149      	asrs	r1, r1, #5
 80088d6:	6914      	ldr	r4, [r2, #16]
 80088d8:	3101      	adds	r1, #1
 80088da:	f102 0314 	add.w	r3, r2, #20
 80088de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088e6:	1f05      	subs	r5, r0, #4
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d30c      	bcc.n	8008906 <__copybits+0x36>
 80088ec:	1aa3      	subs	r3, r4, r2
 80088ee:	3b11      	subs	r3, #17
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	3211      	adds	r2, #17
 80088f6:	42a2      	cmp	r2, r4
 80088f8:	bf88      	it	hi
 80088fa:	2300      	movhi	r3, #0
 80088fc:	4418      	add	r0, r3
 80088fe:	2300      	movs	r3, #0
 8008900:	4288      	cmp	r0, r1
 8008902:	d305      	bcc.n	8008910 <__copybits+0x40>
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	f853 6b04 	ldr.w	r6, [r3], #4
 800890a:	f845 6f04 	str.w	r6, [r5, #4]!
 800890e:	e7eb      	b.n	80088e8 <__copybits+0x18>
 8008910:	f840 3b04 	str.w	r3, [r0], #4
 8008914:	e7f4      	b.n	8008900 <__copybits+0x30>

08008916 <__any_on>:
 8008916:	f100 0214 	add.w	r2, r0, #20
 800891a:	6900      	ldr	r0, [r0, #16]
 800891c:	114b      	asrs	r3, r1, #5
 800891e:	4298      	cmp	r0, r3
 8008920:	b510      	push	{r4, lr}
 8008922:	db11      	blt.n	8008948 <__any_on+0x32>
 8008924:	dd0a      	ble.n	800893c <__any_on+0x26>
 8008926:	f011 011f 	ands.w	r1, r1, #31
 800892a:	d007      	beq.n	800893c <__any_on+0x26>
 800892c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008930:	fa24 f001 	lsr.w	r0, r4, r1
 8008934:	fa00 f101 	lsl.w	r1, r0, r1
 8008938:	428c      	cmp	r4, r1
 800893a:	d10b      	bne.n	8008954 <__any_on+0x3e>
 800893c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008940:	4293      	cmp	r3, r2
 8008942:	d803      	bhi.n	800894c <__any_on+0x36>
 8008944:	2000      	movs	r0, #0
 8008946:	bd10      	pop	{r4, pc}
 8008948:	4603      	mov	r3, r0
 800894a:	e7f7      	b.n	800893c <__any_on+0x26>
 800894c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008950:	2900      	cmp	r1, #0
 8008952:	d0f5      	beq.n	8008940 <__any_on+0x2a>
 8008954:	2001      	movs	r0, #1
 8008956:	e7f6      	b.n	8008946 <__any_on+0x30>

08008958 <sulp>:
 8008958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895c:	460f      	mov	r7, r1
 800895e:	4690      	mov	r8, r2
 8008960:	f7ff feca 	bl	80086f8 <__ulp>
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	f1b8 0f00 	cmp.w	r8, #0
 800896c:	d011      	beq.n	8008992 <sulp+0x3a>
 800896e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008972:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008976:	2b00      	cmp	r3, #0
 8008978:	dd0b      	ble.n	8008992 <sulp+0x3a>
 800897a:	2400      	movs	r4, #0
 800897c:	051b      	lsls	r3, r3, #20
 800897e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008982:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008986:	4622      	mov	r2, r4
 8008988:	462b      	mov	r3, r5
 800898a:	f7f7 fe59 	bl	8000640 <__aeabi_dmul>
 800898e:	4604      	mov	r4, r0
 8008990:	460d      	mov	r5, r1
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899a:	0000      	movs	r0, r0
 800899c:	0000      	movs	r0, r0
	...

080089a0 <_strtod_l>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	b09f      	sub	sp, #124	; 0x7c
 80089a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80089a8:	2200      	movs	r2, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	921a      	str	r2, [sp, #104]	; 0x68
 80089ae:	460d      	mov	r5, r1
 80089b0:	f04f 0800 	mov.w	r8, #0
 80089b4:	f04f 0900 	mov.w	r9, #0
 80089b8:	460a      	mov	r2, r1
 80089ba:	9219      	str	r2, [sp, #100]	; 0x64
 80089bc:	7811      	ldrb	r1, [r2, #0]
 80089be:	292b      	cmp	r1, #43	; 0x2b
 80089c0:	d04a      	beq.n	8008a58 <_strtod_l+0xb8>
 80089c2:	d838      	bhi.n	8008a36 <_strtod_l+0x96>
 80089c4:	290d      	cmp	r1, #13
 80089c6:	d832      	bhi.n	8008a2e <_strtod_l+0x8e>
 80089c8:	2908      	cmp	r1, #8
 80089ca:	d832      	bhi.n	8008a32 <_strtod_l+0x92>
 80089cc:	2900      	cmp	r1, #0
 80089ce:	d03b      	beq.n	8008a48 <_strtod_l+0xa8>
 80089d0:	2200      	movs	r2, #0
 80089d2:	920e      	str	r2, [sp, #56]	; 0x38
 80089d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80089d6:	7832      	ldrb	r2, [r6, #0]
 80089d8:	2a30      	cmp	r2, #48	; 0x30
 80089da:	f040 80b2 	bne.w	8008b42 <_strtod_l+0x1a2>
 80089de:	7872      	ldrb	r2, [r6, #1]
 80089e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80089e4:	2a58      	cmp	r2, #88	; 0x58
 80089e6:	d16e      	bne.n	8008ac6 <_strtod_l+0x126>
 80089e8:	9302      	str	r3, [sp, #8]
 80089ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ec:	4620      	mov	r0, r4
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	ab1a      	add	r3, sp, #104	; 0x68
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4a8c      	ldr	r2, [pc, #560]	; (8008c28 <_strtod_l+0x288>)
 80089f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80089f8:	a919      	add	r1, sp, #100	; 0x64
 80089fa:	f001 f937 	bl	8009c6c <__gethex>
 80089fe:	f010 070f 	ands.w	r7, r0, #15
 8008a02:	4605      	mov	r5, r0
 8008a04:	d005      	beq.n	8008a12 <_strtod_l+0x72>
 8008a06:	2f06      	cmp	r7, #6
 8008a08:	d128      	bne.n	8008a5c <_strtod_l+0xbc>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	9619      	str	r6, [sp, #100]	; 0x64
 8008a10:	930e      	str	r3, [sp, #56]	; 0x38
 8008a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 85a0 	bne.w	800955a <_strtod_l+0xbba>
 8008a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a1c:	b1cb      	cbz	r3, 8008a52 <_strtod_l+0xb2>
 8008a1e:	4642      	mov	r2, r8
 8008a20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a24:	4610      	mov	r0, r2
 8008a26:	4619      	mov	r1, r3
 8008a28:	b01f      	add	sp, #124	; 0x7c
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	2920      	cmp	r1, #32
 8008a30:	d1ce      	bne.n	80089d0 <_strtod_l+0x30>
 8008a32:	3201      	adds	r2, #1
 8008a34:	e7c1      	b.n	80089ba <_strtod_l+0x1a>
 8008a36:	292d      	cmp	r1, #45	; 0x2d
 8008a38:	d1ca      	bne.n	80089d0 <_strtod_l+0x30>
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	910e      	str	r1, [sp, #56]	; 0x38
 8008a3e:	1c51      	adds	r1, r2, #1
 8008a40:	9119      	str	r1, [sp, #100]	; 0x64
 8008a42:	7852      	ldrb	r2, [r2, #1]
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	d1c5      	bne.n	80089d4 <_strtod_l+0x34>
 8008a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a4a:	9519      	str	r5, [sp, #100]	; 0x64
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 8582 	bne.w	8009556 <_strtod_l+0xbb6>
 8008a52:	4642      	mov	r2, r8
 8008a54:	464b      	mov	r3, r9
 8008a56:	e7e5      	b.n	8008a24 <_strtod_l+0x84>
 8008a58:	2100      	movs	r1, #0
 8008a5a:	e7ef      	b.n	8008a3c <_strtod_l+0x9c>
 8008a5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a5e:	b13a      	cbz	r2, 8008a70 <_strtod_l+0xd0>
 8008a60:	2135      	movs	r1, #53	; 0x35
 8008a62:	a81c      	add	r0, sp, #112	; 0x70
 8008a64:	f7ff ff34 	bl	80088d0 <__copybits>
 8008a68:	4620      	mov	r0, r4
 8008a6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a6c:	f7ff fb18 	bl	80080a0 <_Bfree>
 8008a70:	3f01      	subs	r7, #1
 8008a72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a74:	2f04      	cmp	r7, #4
 8008a76:	d806      	bhi.n	8008a86 <_strtod_l+0xe6>
 8008a78:	e8df f007 	tbb	[pc, r7]
 8008a7c:	201d0314 	.word	0x201d0314
 8008a80:	14          	.byte	0x14
 8008a81:	00          	.byte	0x00
 8008a82:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008a86:	05e9      	lsls	r1, r5, #23
 8008a88:	bf48      	it	mi
 8008a8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008a8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a92:	0d1b      	lsrs	r3, r3, #20
 8008a94:	051b      	lsls	r3, r3, #20
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1bb      	bne.n	8008a12 <_strtod_l+0x72>
 8008a9a:	f7fe fb15 	bl	80070c8 <__errno>
 8008a9e:	2322      	movs	r3, #34	; 0x22
 8008aa0:	6003      	str	r3, [r0, #0]
 8008aa2:	e7b6      	b.n	8008a12 <_strtod_l+0x72>
 8008aa4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008aa8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008aac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ab0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ab4:	e7e7      	b.n	8008a86 <_strtod_l+0xe6>
 8008ab6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008c2c <_strtod_l+0x28c>
 8008aba:	e7e4      	b.n	8008a86 <_strtod_l+0xe6>
 8008abc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ac0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ac4:	e7df      	b.n	8008a86 <_strtod_l+0xe6>
 8008ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	9219      	str	r2, [sp, #100]	; 0x64
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2b30      	cmp	r3, #48	; 0x30
 8008ad0:	d0f9      	beq.n	8008ac6 <_strtod_l+0x126>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d09d      	beq.n	8008a12 <_strtod_l+0x72>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f04f 0a00 	mov.w	sl, #0
 8008adc:	220a      	movs	r2, #10
 8008ade:	46d3      	mov	fp, sl
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ae4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008aec:	7806      	ldrb	r6, [r0, #0]
 8008aee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008af2:	b2d9      	uxtb	r1, r3
 8008af4:	2909      	cmp	r1, #9
 8008af6:	d926      	bls.n	8008b46 <_strtod_l+0x1a6>
 8008af8:	2201      	movs	r2, #1
 8008afa:	494d      	ldr	r1, [pc, #308]	; (8008c30 <_strtod_l+0x290>)
 8008afc:	f000 ffe6 	bl	8009acc <strncmp>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d030      	beq.n	8008b66 <_strtod_l+0x1c6>
 8008b04:	2000      	movs	r0, #0
 8008b06:	4632      	mov	r2, r6
 8008b08:	4603      	mov	r3, r0
 8008b0a:	465e      	mov	r6, fp
 8008b0c:	9008      	str	r0, [sp, #32]
 8008b0e:	2a65      	cmp	r2, #101	; 0x65
 8008b10:	d001      	beq.n	8008b16 <_strtod_l+0x176>
 8008b12:	2a45      	cmp	r2, #69	; 0x45
 8008b14:	d113      	bne.n	8008b3e <_strtod_l+0x19e>
 8008b16:	b91e      	cbnz	r6, 8008b20 <_strtod_l+0x180>
 8008b18:	9a05      	ldr	r2, [sp, #20]
 8008b1a:	4302      	orrs	r2, r0
 8008b1c:	d094      	beq.n	8008a48 <_strtod_l+0xa8>
 8008b1e:	2600      	movs	r6, #0
 8008b20:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008b22:	1c6a      	adds	r2, r5, #1
 8008b24:	9219      	str	r2, [sp, #100]	; 0x64
 8008b26:	786a      	ldrb	r2, [r5, #1]
 8008b28:	2a2b      	cmp	r2, #43	; 0x2b
 8008b2a:	d074      	beq.n	8008c16 <_strtod_l+0x276>
 8008b2c:	2a2d      	cmp	r2, #45	; 0x2d
 8008b2e:	d078      	beq.n	8008c22 <_strtod_l+0x282>
 8008b30:	f04f 0c00 	mov.w	ip, #0
 8008b34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b38:	2909      	cmp	r1, #9
 8008b3a:	d97f      	bls.n	8008c3c <_strtod_l+0x29c>
 8008b3c:	9519      	str	r5, [sp, #100]	; 0x64
 8008b3e:	2700      	movs	r7, #0
 8008b40:	e09e      	b.n	8008c80 <_strtod_l+0x2e0>
 8008b42:	2300      	movs	r3, #0
 8008b44:	e7c8      	b.n	8008ad8 <_strtod_l+0x138>
 8008b46:	f1bb 0f08 	cmp.w	fp, #8
 8008b4a:	bfd8      	it	le
 8008b4c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008b4e:	f100 0001 	add.w	r0, r0, #1
 8008b52:	bfd6      	itet	le
 8008b54:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b58:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b5c:	930a      	strle	r3, [sp, #40]	; 0x28
 8008b5e:	f10b 0b01 	add.w	fp, fp, #1
 8008b62:	9019      	str	r0, [sp, #100]	; 0x64
 8008b64:	e7c1      	b.n	8008aea <_strtod_l+0x14a>
 8008b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	9219      	str	r2, [sp, #100]	; 0x64
 8008b6c:	785a      	ldrb	r2, [r3, #1]
 8008b6e:	f1bb 0f00 	cmp.w	fp, #0
 8008b72:	d037      	beq.n	8008be4 <_strtod_l+0x244>
 8008b74:	465e      	mov	r6, fp
 8008b76:	9008      	str	r0, [sp, #32]
 8008b78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	d912      	bls.n	8008ba6 <_strtod_l+0x206>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7c4      	b.n	8008b0e <_strtod_l+0x16e>
 8008b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b86:	3001      	adds	r0, #1
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	9219      	str	r2, [sp, #100]	; 0x64
 8008b8c:	785a      	ldrb	r2, [r3, #1]
 8008b8e:	2a30      	cmp	r2, #48	; 0x30
 8008b90:	d0f8      	beq.n	8008b84 <_strtod_l+0x1e4>
 8008b92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	f200 84e4 	bhi.w	8009564 <_strtod_l+0xbc4>
 8008b9c:	9008      	str	r0, [sp, #32]
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba6:	3a30      	subs	r2, #48	; 0x30
 8008ba8:	f100 0301 	add.w	r3, r0, #1
 8008bac:	d014      	beq.n	8008bd8 <_strtod_l+0x238>
 8008bae:	9908      	ldr	r1, [sp, #32]
 8008bb0:	eb00 0c06 	add.w	ip, r0, r6
 8008bb4:	4419      	add	r1, r3
 8008bb6:	9108      	str	r1, [sp, #32]
 8008bb8:	4633      	mov	r3, r6
 8008bba:	210a      	movs	r1, #10
 8008bbc:	4563      	cmp	r3, ip
 8008bbe:	d113      	bne.n	8008be8 <_strtod_l+0x248>
 8008bc0:	1833      	adds	r3, r6, r0
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	f106 0601 	add.w	r6, r6, #1
 8008bc8:	4406      	add	r6, r0
 8008bca:	dc1a      	bgt.n	8008c02 <_strtod_l+0x262>
 8008bcc:	230a      	movs	r3, #10
 8008bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bd0:	fb03 2301 	mla	r3, r3, r1, r2
 8008bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bda:	4618      	mov	r0, r3
 8008bdc:	1c51      	adds	r1, r2, #1
 8008bde:	9119      	str	r1, [sp, #100]	; 0x64
 8008be0:	7852      	ldrb	r2, [r2, #1]
 8008be2:	e7c9      	b.n	8008b78 <_strtod_l+0x1d8>
 8008be4:	4658      	mov	r0, fp
 8008be6:	e7d2      	b.n	8008b8e <_strtod_l+0x1ee>
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	f103 0301 	add.w	r3, r3, #1
 8008bee:	dc03      	bgt.n	8008bf8 <_strtod_l+0x258>
 8008bf0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008bf2:	434f      	muls	r7, r1
 8008bf4:	970a      	str	r7, [sp, #40]	; 0x28
 8008bf6:	e7e1      	b.n	8008bbc <_strtod_l+0x21c>
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	bfd8      	it	le
 8008bfc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008c00:	e7dc      	b.n	8008bbc <_strtod_l+0x21c>
 8008c02:	2e10      	cmp	r6, #16
 8008c04:	bfdc      	itt	le
 8008c06:	230a      	movle	r3, #10
 8008c08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008c0c:	e7e3      	b.n	8008bd6 <_strtod_l+0x236>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	9308      	str	r3, [sp, #32]
 8008c12:	2301      	movs	r3, #1
 8008c14:	e780      	b.n	8008b18 <_strtod_l+0x178>
 8008c16:	f04f 0c00 	mov.w	ip, #0
 8008c1a:	1caa      	adds	r2, r5, #2
 8008c1c:	9219      	str	r2, [sp, #100]	; 0x64
 8008c1e:	78aa      	ldrb	r2, [r5, #2]
 8008c20:	e788      	b.n	8008b34 <_strtod_l+0x194>
 8008c22:	f04f 0c01 	mov.w	ip, #1
 8008c26:	e7f8      	b.n	8008c1a <_strtod_l+0x27a>
 8008c28:	0800ab70 	.word	0x0800ab70
 8008c2c:	7ff00000 	.word	0x7ff00000
 8008c30:	0800ab6c 	.word	0x0800ab6c
 8008c34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c36:	1c51      	adds	r1, r2, #1
 8008c38:	9119      	str	r1, [sp, #100]	; 0x64
 8008c3a:	7852      	ldrb	r2, [r2, #1]
 8008c3c:	2a30      	cmp	r2, #48	; 0x30
 8008c3e:	d0f9      	beq.n	8008c34 <_strtod_l+0x294>
 8008c40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c44:	2908      	cmp	r1, #8
 8008c46:	f63f af7a 	bhi.w	8008b3e <_strtod_l+0x19e>
 8008c4a:	3a30      	subs	r2, #48	; 0x30
 8008c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c50:	920c      	str	r2, [sp, #48]	; 0x30
 8008c52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c54:	1c57      	adds	r7, r2, #1
 8008c56:	9719      	str	r7, [sp, #100]	; 0x64
 8008c58:	7852      	ldrb	r2, [r2, #1]
 8008c5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c5e:	f1be 0f09 	cmp.w	lr, #9
 8008c62:	d938      	bls.n	8008cd6 <_strtod_l+0x336>
 8008c64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c66:	1a7f      	subs	r7, r7, r1
 8008c68:	2f08      	cmp	r7, #8
 8008c6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c6e:	dc03      	bgt.n	8008c78 <_strtod_l+0x2d8>
 8008c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c72:	428f      	cmp	r7, r1
 8008c74:	bfa8      	it	ge
 8008c76:	460f      	movge	r7, r1
 8008c78:	f1bc 0f00 	cmp.w	ip, #0
 8008c7c:	d000      	beq.n	8008c80 <_strtod_l+0x2e0>
 8008c7e:	427f      	negs	r7, r7
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	d14f      	bne.n	8008d24 <_strtod_l+0x384>
 8008c84:	9905      	ldr	r1, [sp, #20]
 8008c86:	4301      	orrs	r1, r0
 8008c88:	f47f aec3 	bne.w	8008a12 <_strtod_l+0x72>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f47f aedb 	bne.w	8008a48 <_strtod_l+0xa8>
 8008c92:	2a69      	cmp	r2, #105	; 0x69
 8008c94:	d029      	beq.n	8008cea <_strtod_l+0x34a>
 8008c96:	dc26      	bgt.n	8008ce6 <_strtod_l+0x346>
 8008c98:	2a49      	cmp	r2, #73	; 0x49
 8008c9a:	d026      	beq.n	8008cea <_strtod_l+0x34a>
 8008c9c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c9e:	f47f aed3 	bne.w	8008a48 <_strtod_l+0xa8>
 8008ca2:	499a      	ldr	r1, [pc, #616]	; (8008f0c <_strtod_l+0x56c>)
 8008ca4:	a819      	add	r0, sp, #100	; 0x64
 8008ca6:	f001 fa23 	bl	800a0f0 <__match>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f43f aecc 	beq.w	8008a48 <_strtod_l+0xa8>
 8008cb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b28      	cmp	r3, #40	; 0x28
 8008cb6:	d12f      	bne.n	8008d18 <_strtod_l+0x378>
 8008cb8:	4995      	ldr	r1, [pc, #596]	; (8008f10 <_strtod_l+0x570>)
 8008cba:	aa1c      	add	r2, sp, #112	; 0x70
 8008cbc:	a819      	add	r0, sp, #100	; 0x64
 8008cbe:	f001 fa2b 	bl	800a118 <__hexnan>
 8008cc2:	2805      	cmp	r0, #5
 8008cc4:	d128      	bne.n	8008d18 <_strtod_l+0x378>
 8008cc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cc8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008ccc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008cd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008cd4:	e69d      	b.n	8008a12 <_strtod_l+0x72>
 8008cd6:	210a      	movs	r1, #10
 8008cd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cda:	fb01 2107 	mla	r1, r1, r7, r2
 8008cde:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ce4:	e7b5      	b.n	8008c52 <_strtod_l+0x2b2>
 8008ce6:	2a6e      	cmp	r2, #110	; 0x6e
 8008ce8:	e7d9      	b.n	8008c9e <_strtod_l+0x2fe>
 8008cea:	498a      	ldr	r1, [pc, #552]	; (8008f14 <_strtod_l+0x574>)
 8008cec:	a819      	add	r0, sp, #100	; 0x64
 8008cee:	f001 f9ff 	bl	800a0f0 <__match>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f43f aea8 	beq.w	8008a48 <_strtod_l+0xa8>
 8008cf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cfa:	4987      	ldr	r1, [pc, #540]	; (8008f18 <_strtod_l+0x578>)
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	a819      	add	r0, sp, #100	; 0x64
 8008d00:	9319      	str	r3, [sp, #100]	; 0x64
 8008d02:	f001 f9f5 	bl	800a0f0 <__match>
 8008d06:	b910      	cbnz	r0, 8008d0e <_strtod_l+0x36e>
 8008d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d0e:	f04f 0800 	mov.w	r8, #0
 8008d12:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008f1c <_strtod_l+0x57c>
 8008d16:	e67c      	b.n	8008a12 <_strtod_l+0x72>
 8008d18:	4881      	ldr	r0, [pc, #516]	; (8008f20 <_strtod_l+0x580>)
 8008d1a:	f000 ff07 	bl	8009b2c <nan>
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4689      	mov	r9, r1
 8008d22:	e676      	b.n	8008a12 <_strtod_l+0x72>
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	f1bb 0f00 	cmp.w	fp, #0
 8008d2a:	bf08      	it	eq
 8008d2c:	46b3      	moveq	fp, r6
 8008d2e:	1afb      	subs	r3, r7, r3
 8008d30:	2e10      	cmp	r6, #16
 8008d32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d34:	4635      	mov	r5, r6
 8008d36:	9309      	str	r3, [sp, #36]	; 0x24
 8008d38:	bfa8      	it	ge
 8008d3a:	2510      	movge	r5, #16
 8008d3c:	f7f7 fc06 	bl	800054c <__aeabi_ui2d>
 8008d40:	2e09      	cmp	r6, #9
 8008d42:	4680      	mov	r8, r0
 8008d44:	4689      	mov	r9, r1
 8008d46:	dd13      	ble.n	8008d70 <_strtod_l+0x3d0>
 8008d48:	4b76      	ldr	r3, [pc, #472]	; (8008f24 <_strtod_l+0x584>)
 8008d4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d52:	f7f7 fc75 	bl	8000640 <__aeabi_dmul>
 8008d56:	4680      	mov	r8, r0
 8008d58:	4650      	mov	r0, sl
 8008d5a:	4689      	mov	r9, r1
 8008d5c:	f7f7 fbf6 	bl	800054c <__aeabi_ui2d>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4640      	mov	r0, r8
 8008d66:	4649      	mov	r1, r9
 8008d68:	f7f7 fab4 	bl	80002d4 <__adddf3>
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	4689      	mov	r9, r1
 8008d70:	2e0f      	cmp	r6, #15
 8008d72:	dc36      	bgt.n	8008de2 <_strtod_l+0x442>
 8008d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f43f ae4b 	beq.w	8008a12 <_strtod_l+0x72>
 8008d7c:	dd22      	ble.n	8008dc4 <_strtod_l+0x424>
 8008d7e:	2b16      	cmp	r3, #22
 8008d80:	dc09      	bgt.n	8008d96 <_strtod_l+0x3f6>
 8008d82:	4968      	ldr	r1, [pc, #416]	; (8008f24 <_strtod_l+0x584>)
 8008d84:	4642      	mov	r2, r8
 8008d86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d90:	f7f7 fc56 	bl	8000640 <__aeabi_dmul>
 8008d94:	e7c3      	b.n	8008d1e <_strtod_l+0x37e>
 8008d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d98:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	db20      	blt.n	8008de2 <_strtod_l+0x442>
 8008da0:	4c60      	ldr	r4, [pc, #384]	; (8008f24 <_strtod_l+0x584>)
 8008da2:	f1c6 060f 	rsb	r6, r6, #15
 8008da6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008daa:	4642      	mov	r2, r8
 8008dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db0:	464b      	mov	r3, r9
 8008db2:	f7f7 fc45 	bl	8000640 <__aeabi_dmul>
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	1b9e      	subs	r6, r3, r6
 8008dba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008dbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dc2:	e7e5      	b.n	8008d90 <_strtod_l+0x3f0>
 8008dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc6:	3316      	adds	r3, #22
 8008dc8:	db0b      	blt.n	8008de2 <_strtod_l+0x442>
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	4640      	mov	r0, r8
 8008dce:	1bdf      	subs	r7, r3, r7
 8008dd0:	4b54      	ldr	r3, [pc, #336]	; (8008f24 <_strtod_l+0x584>)
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	f7f7 fd5a 	bl	8000894 <__aeabi_ddiv>
 8008de0:	e79d      	b.n	8008d1e <_strtod_l+0x37e>
 8008de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de4:	1b75      	subs	r5, r6, r5
 8008de6:	441d      	add	r5, r3
 8008de8:	2d00      	cmp	r5, #0
 8008dea:	dd70      	ble.n	8008ece <_strtod_l+0x52e>
 8008dec:	f015 030f 	ands.w	r3, r5, #15
 8008df0:	d00a      	beq.n	8008e08 <_strtod_l+0x468>
 8008df2:	494c      	ldr	r1, [pc, #304]	; (8008f24 <_strtod_l+0x584>)
 8008df4:	4642      	mov	r2, r8
 8008df6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dfe:	464b      	mov	r3, r9
 8008e00:	f7f7 fc1e 	bl	8000640 <__aeabi_dmul>
 8008e04:	4680      	mov	r8, r0
 8008e06:	4689      	mov	r9, r1
 8008e08:	f035 050f 	bics.w	r5, r5, #15
 8008e0c:	d04d      	beq.n	8008eaa <_strtod_l+0x50a>
 8008e0e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008e12:	dd22      	ble.n	8008e5a <_strtod_l+0x4ba>
 8008e14:	2600      	movs	r6, #0
 8008e16:	46b3      	mov	fp, r6
 8008e18:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e1a:	9608      	str	r6, [sp, #32]
 8008e1c:	2322      	movs	r3, #34	; 0x22
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008f1c <_strtod_l+0x57c>
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f43f adf1 	beq.w	8008a12 <_strtod_l+0x72>
 8008e30:	4620      	mov	r0, r4
 8008e32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e34:	f7ff f934 	bl	80080a0 <_Bfree>
 8008e38:	4620      	mov	r0, r4
 8008e3a:	9908      	ldr	r1, [sp, #32]
 8008e3c:	f7ff f930 	bl	80080a0 <_Bfree>
 8008e40:	4659      	mov	r1, fp
 8008e42:	4620      	mov	r0, r4
 8008e44:	f7ff f92c 	bl	80080a0 <_Bfree>
 8008e48:	4620      	mov	r0, r4
 8008e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e4c:	f7ff f928 	bl	80080a0 <_Bfree>
 8008e50:	4631      	mov	r1, r6
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff f924 	bl	80080a0 <_Bfree>
 8008e58:	e5db      	b.n	8008a12 <_strtod_l+0x72>
 8008e5a:	4b33      	ldr	r3, [pc, #204]	; (8008f28 <_strtod_l+0x588>)
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	2300      	movs	r3, #0
 8008e62:	4649      	mov	r1, r9
 8008e64:	469a      	mov	sl, r3
 8008e66:	112d      	asrs	r5, r5, #4
 8008e68:	2d01      	cmp	r5, #1
 8008e6a:	dc21      	bgt.n	8008eb0 <_strtod_l+0x510>
 8008e6c:	b10b      	cbz	r3, 8008e72 <_strtod_l+0x4d2>
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4689      	mov	r9, r1
 8008e72:	492d      	ldr	r1, [pc, #180]	; (8008f28 <_strtod_l+0x588>)
 8008e74:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e78:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e7c:	4642      	mov	r2, r8
 8008e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e82:	464b      	mov	r3, r9
 8008e84:	f7f7 fbdc 	bl	8000640 <__aeabi_dmul>
 8008e88:	4b24      	ldr	r3, [pc, #144]	; (8008f1c <_strtod_l+0x57c>)
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	400b      	ands	r3, r1
 8008e8e:	4927      	ldr	r1, [pc, #156]	; (8008f2c <_strtod_l+0x58c>)
 8008e90:	4680      	mov	r8, r0
 8008e92:	428b      	cmp	r3, r1
 8008e94:	d8be      	bhi.n	8008e14 <_strtod_l+0x474>
 8008e96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e9a:	428b      	cmp	r3, r1
 8008e9c:	bf86      	itte	hi
 8008e9e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008ea2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008f30 <_strtod_l+0x590>
 8008ea6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	e07b      	b.n	8008fa8 <_strtod_l+0x608>
 8008eb0:	07ea      	lsls	r2, r5, #31
 8008eb2:	d505      	bpl.n	8008ec0 <_strtod_l+0x520>
 8008eb4:	9b05      	ldr	r3, [sp, #20]
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 fbc1 	bl	8000640 <__aeabi_dmul>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	9a05      	ldr	r2, [sp, #20]
 8008ec2:	f10a 0a01 	add.w	sl, sl, #1
 8008ec6:	3208      	adds	r2, #8
 8008ec8:	106d      	asrs	r5, r5, #1
 8008eca:	9205      	str	r2, [sp, #20]
 8008ecc:	e7cc      	b.n	8008e68 <_strtod_l+0x4c8>
 8008ece:	d0ec      	beq.n	8008eaa <_strtod_l+0x50a>
 8008ed0:	426d      	negs	r5, r5
 8008ed2:	f015 020f 	ands.w	r2, r5, #15
 8008ed6:	d00a      	beq.n	8008eee <_strtod_l+0x54e>
 8008ed8:	4b12      	ldr	r3, [pc, #72]	; (8008f24 <_strtod_l+0x584>)
 8008eda:	4640      	mov	r0, r8
 8008edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 fcd5 	bl	8000894 <__aeabi_ddiv>
 8008eea:	4680      	mov	r8, r0
 8008eec:	4689      	mov	r9, r1
 8008eee:	112d      	asrs	r5, r5, #4
 8008ef0:	d0db      	beq.n	8008eaa <_strtod_l+0x50a>
 8008ef2:	2d1f      	cmp	r5, #31
 8008ef4:	dd1e      	ble.n	8008f34 <_strtod_l+0x594>
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	46b3      	mov	fp, r6
 8008efa:	960b      	str	r6, [sp, #44]	; 0x2c
 8008efc:	9608      	str	r6, [sp, #32]
 8008efe:	2322      	movs	r3, #34	; 0x22
 8008f00:	f04f 0800 	mov.w	r8, #0
 8008f04:	f04f 0900 	mov.w	r9, #0
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	e78d      	b.n	8008e28 <_strtod_l+0x488>
 8008f0c:	0800a95b 	.word	0x0800a95b
 8008f10:	0800ab84 	.word	0x0800ab84
 8008f14:	0800a953 	.word	0x0800a953
 8008f18:	0800a98a 	.word	0x0800a98a
 8008f1c:	7ff00000 	.word	0x7ff00000
 8008f20:	0800ad15 	.word	0x0800ad15
 8008f24:	0800aa98 	.word	0x0800aa98
 8008f28:	0800aa70 	.word	0x0800aa70
 8008f2c:	7ca00000 	.word	0x7ca00000
 8008f30:	7fefffff 	.word	0x7fefffff
 8008f34:	f015 0310 	ands.w	r3, r5, #16
 8008f38:	bf18      	it	ne
 8008f3a:	236a      	movne	r3, #106	; 0x6a
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	9305      	str	r3, [sp, #20]
 8008f40:	4649      	mov	r1, r9
 8008f42:	2300      	movs	r3, #0
 8008f44:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009210 <_strtod_l+0x870>
 8008f48:	07ea      	lsls	r2, r5, #31
 8008f4a:	d504      	bpl.n	8008f56 <_strtod_l+0x5b6>
 8008f4c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f50:	f7f7 fb76 	bl	8000640 <__aeabi_dmul>
 8008f54:	2301      	movs	r3, #1
 8008f56:	106d      	asrs	r5, r5, #1
 8008f58:	f10a 0a08 	add.w	sl, sl, #8
 8008f5c:	d1f4      	bne.n	8008f48 <_strtod_l+0x5a8>
 8008f5e:	b10b      	cbz	r3, 8008f64 <_strtod_l+0x5c4>
 8008f60:	4680      	mov	r8, r0
 8008f62:	4689      	mov	r9, r1
 8008f64:	9b05      	ldr	r3, [sp, #20]
 8008f66:	b1bb      	cbz	r3, 8008f98 <_strtod_l+0x5f8>
 8008f68:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	4649      	mov	r1, r9
 8008f74:	dd10      	ble.n	8008f98 <_strtod_l+0x5f8>
 8008f76:	2b1f      	cmp	r3, #31
 8008f78:	f340 8128 	ble.w	80091cc <_strtod_l+0x82c>
 8008f7c:	2b34      	cmp	r3, #52	; 0x34
 8008f7e:	bfd8      	it	le
 8008f80:	f04f 33ff 	movle.w	r3, #4294967295
 8008f84:	f04f 0800 	mov.w	r8, #0
 8008f88:	bfcf      	iteee	gt
 8008f8a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f8e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f92:	4093      	lslle	r3, r2
 8008f94:	ea03 0901 	andle.w	r9, r3, r1
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 fdb6 	bl	8000b10 <__aeabi_dcmpeq>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d1a6      	bne.n	8008ef6 <_strtod_l+0x556>
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	465a      	mov	r2, fp
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4633      	mov	r3, r6
 8008fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fb4:	f7ff f8dc 	bl	8008170 <__s2b>
 8008fb8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f43f af2a 	beq.w	8008e14 <_strtod_l+0x474>
 8008fc0:	2600      	movs	r6, #0
 8008fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc4:	9b08      	ldr	r3, [sp, #32]
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	eba3 0307 	sub.w	r3, r3, r7
 8008fcc:	bfa8      	it	ge
 8008fce:	2300      	movge	r3, #0
 8008fd0:	46b3      	mov	fp, r6
 8008fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8008fd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fd8:	9316      	str	r3, [sp, #88]	; 0x58
 8008fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fdc:	4620      	mov	r0, r4
 8008fde:	6859      	ldr	r1, [r3, #4]
 8008fe0:	f7ff f81e 	bl	8008020 <_Balloc>
 8008fe4:	9008      	str	r0, [sp, #32]
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f af18 	beq.w	8008e1c <_strtod_l+0x47c>
 8008fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fee:	300c      	adds	r0, #12
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	f103 010c 	add.w	r1, r3, #12
 8008ff6:	3202      	adds	r2, #2
 8008ff8:	0092      	lsls	r2, r2, #2
 8008ffa:	f000 fd89 	bl	8009b10 <memcpy>
 8008ffe:	ab1c      	add	r3, sp, #112	; 0x70
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	ab1b      	add	r3, sp, #108	; 0x6c
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4642      	mov	r2, r8
 8009008:	464b      	mov	r3, r9
 800900a:	4620      	mov	r0, r4
 800900c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009010:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009014:	f7ff fbd8 	bl	80087c8 <__d2b>
 8009018:	901a      	str	r0, [sp, #104]	; 0x68
 800901a:	2800      	cmp	r0, #0
 800901c:	f43f aefe 	beq.w	8008e1c <_strtod_l+0x47c>
 8009020:	2101      	movs	r1, #1
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff f93c 	bl	80082a0 <__i2b>
 8009028:	4683      	mov	fp, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f aef6 	beq.w	8008e1c <_strtod_l+0x47c>
 8009030:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009032:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009034:	2f00      	cmp	r7, #0
 8009036:	bfab      	itete	ge
 8009038:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800903a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800903c:	eb07 0a03 	addge.w	sl, r7, r3
 8009040:	1bdd      	sublt	r5, r3, r7
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	bfa8      	it	ge
 8009046:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009048:	eba7 0703 	sub.w	r7, r7, r3
 800904c:	4417      	add	r7, r2
 800904e:	4b71      	ldr	r3, [pc, #452]	; (8009214 <_strtod_l+0x874>)
 8009050:	f107 37ff 	add.w	r7, r7, #4294967295
 8009054:	bfb8      	it	lt
 8009056:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800905a:	429f      	cmp	r7, r3
 800905c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009060:	f280 80c7 	bge.w	80091f2 <_strtod_l+0x852>
 8009064:	1bdb      	subs	r3, r3, r7
 8009066:	2b1f      	cmp	r3, #31
 8009068:	f04f 0101 	mov.w	r1, #1
 800906c:	eba2 0203 	sub.w	r2, r2, r3
 8009070:	f300 80b3 	bgt.w	80091da <_strtod_l+0x83a>
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	9313      	str	r3, [sp, #76]	; 0x4c
 800907a:	2300      	movs	r3, #0
 800907c:	9310      	str	r3, [sp, #64]	; 0x40
 800907e:	eb0a 0702 	add.w	r7, sl, r2
 8009082:	9b05      	ldr	r3, [sp, #20]
 8009084:	45ba      	cmp	sl, r7
 8009086:	4415      	add	r5, r2
 8009088:	441d      	add	r5, r3
 800908a:	4653      	mov	r3, sl
 800908c:	bfa8      	it	ge
 800908e:	463b      	movge	r3, r7
 8009090:	42ab      	cmp	r3, r5
 8009092:	bfa8      	it	ge
 8009094:	462b      	movge	r3, r5
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfc2      	ittt	gt
 800909a:	1aff      	subgt	r7, r7, r3
 800909c:	1aed      	subgt	r5, r5, r3
 800909e:	ebaa 0a03 	subgt.w	sl, sl, r3
 80090a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd17      	ble.n	80090d8 <_strtod_l+0x738>
 80090a8:	4659      	mov	r1, fp
 80090aa:	461a      	mov	r2, r3
 80090ac:	4620      	mov	r0, r4
 80090ae:	f7ff f9b5 	bl	800841c <__pow5mult>
 80090b2:	4683      	mov	fp, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f aeb1 	beq.w	8008e1c <_strtod_l+0x47c>
 80090ba:	4601      	mov	r1, r0
 80090bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff f904 	bl	80082cc <__multiply>
 80090c4:	900a      	str	r0, [sp, #40]	; 0x28
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f aea8 	beq.w	8008e1c <_strtod_l+0x47c>
 80090cc:	4620      	mov	r0, r4
 80090ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090d0:	f7fe ffe6 	bl	80080a0 <_Bfree>
 80090d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d6:	931a      	str	r3, [sp, #104]	; 0x68
 80090d8:	2f00      	cmp	r7, #0
 80090da:	f300 808f 	bgt.w	80091fc <_strtod_l+0x85c>
 80090de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dd08      	ble.n	80090f6 <_strtod_l+0x756>
 80090e4:	4620      	mov	r0, r4
 80090e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090e8:	9908      	ldr	r1, [sp, #32]
 80090ea:	f7ff f997 	bl	800841c <__pow5mult>
 80090ee:	9008      	str	r0, [sp, #32]
 80090f0:	2800      	cmp	r0, #0
 80090f2:	f43f ae93 	beq.w	8008e1c <_strtod_l+0x47c>
 80090f6:	2d00      	cmp	r5, #0
 80090f8:	dd08      	ble.n	800910c <_strtod_l+0x76c>
 80090fa:	462a      	mov	r2, r5
 80090fc:	4620      	mov	r0, r4
 80090fe:	9908      	ldr	r1, [sp, #32]
 8009100:	f7ff f9e6 	bl	80084d0 <__lshift>
 8009104:	9008      	str	r0, [sp, #32]
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f ae88 	beq.w	8008e1c <_strtod_l+0x47c>
 800910c:	f1ba 0f00 	cmp.w	sl, #0
 8009110:	dd08      	ble.n	8009124 <_strtod_l+0x784>
 8009112:	4659      	mov	r1, fp
 8009114:	4652      	mov	r2, sl
 8009116:	4620      	mov	r0, r4
 8009118:	f7ff f9da 	bl	80084d0 <__lshift>
 800911c:	4683      	mov	fp, r0
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f ae7c 	beq.w	8008e1c <_strtod_l+0x47c>
 8009124:	4620      	mov	r0, r4
 8009126:	9a08      	ldr	r2, [sp, #32]
 8009128:	991a      	ldr	r1, [sp, #104]	; 0x68
 800912a:	f7ff fa59 	bl	80085e0 <__mdiff>
 800912e:	4606      	mov	r6, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	f43f ae73 	beq.w	8008e1c <_strtod_l+0x47c>
 8009136:	2500      	movs	r5, #0
 8009138:	68c3      	ldr	r3, [r0, #12]
 800913a:	4659      	mov	r1, fp
 800913c:	60c5      	str	r5, [r0, #12]
 800913e:	930a      	str	r3, [sp, #40]	; 0x28
 8009140:	f7ff fa32 	bl	80085a8 <__mcmp>
 8009144:	42a8      	cmp	r0, r5
 8009146:	da6b      	bge.n	8009220 <_strtod_l+0x880>
 8009148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914a:	ea53 0308 	orrs.w	r3, r3, r8
 800914e:	f040 808f 	bne.w	8009270 <_strtod_l+0x8d0>
 8009152:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009156:	2b00      	cmp	r3, #0
 8009158:	f040 808a 	bne.w	8009270 <_strtod_l+0x8d0>
 800915c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009160:	0d1b      	lsrs	r3, r3, #20
 8009162:	051b      	lsls	r3, r3, #20
 8009164:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009168:	f240 8082 	bls.w	8009270 <_strtod_l+0x8d0>
 800916c:	6973      	ldr	r3, [r6, #20]
 800916e:	b913      	cbnz	r3, 8009176 <_strtod_l+0x7d6>
 8009170:	6933      	ldr	r3, [r6, #16]
 8009172:	2b01      	cmp	r3, #1
 8009174:	dd7c      	ble.n	8009270 <_strtod_l+0x8d0>
 8009176:	4631      	mov	r1, r6
 8009178:	2201      	movs	r2, #1
 800917a:	4620      	mov	r0, r4
 800917c:	f7ff f9a8 	bl	80084d0 <__lshift>
 8009180:	4659      	mov	r1, fp
 8009182:	4606      	mov	r6, r0
 8009184:	f7ff fa10 	bl	80085a8 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	dd71      	ble.n	8009270 <_strtod_l+0x8d0>
 800918c:	9905      	ldr	r1, [sp, #20]
 800918e:	464b      	mov	r3, r9
 8009190:	4a21      	ldr	r2, [pc, #132]	; (8009218 <_strtod_l+0x878>)
 8009192:	2900      	cmp	r1, #0
 8009194:	f000 808d 	beq.w	80092b2 <_strtod_l+0x912>
 8009198:	ea02 0109 	and.w	r1, r2, r9
 800919c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091a0:	f300 8087 	bgt.w	80092b2 <_strtod_l+0x912>
 80091a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091a8:	f77f aea9 	ble.w	8008efe <_strtod_l+0x55e>
 80091ac:	4640      	mov	r0, r8
 80091ae:	4649      	mov	r1, r9
 80091b0:	4b1a      	ldr	r3, [pc, #104]	; (800921c <_strtod_l+0x87c>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	f7f7 fa44 	bl	8000640 <__aeabi_dmul>
 80091b8:	4b17      	ldr	r3, [pc, #92]	; (8009218 <_strtod_l+0x878>)
 80091ba:	4680      	mov	r8, r0
 80091bc:	400b      	ands	r3, r1
 80091be:	4689      	mov	r9, r1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f47f ae35 	bne.w	8008e30 <_strtod_l+0x490>
 80091c6:	2322      	movs	r3, #34	; 0x22
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	e631      	b.n	8008e30 <_strtod_l+0x490>
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	fa02 f303 	lsl.w	r3, r2, r3
 80091d4:	ea03 0808 	and.w	r8, r3, r8
 80091d8:	e6de      	b.n	8008f98 <_strtod_l+0x5f8>
 80091da:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80091de:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80091e2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80091e6:	37e2      	adds	r7, #226	; 0xe2
 80091e8:	fa01 f307 	lsl.w	r3, r1, r7
 80091ec:	9310      	str	r3, [sp, #64]	; 0x40
 80091ee:	9113      	str	r1, [sp, #76]	; 0x4c
 80091f0:	e745      	b.n	800907e <_strtod_l+0x6de>
 80091f2:	2300      	movs	r3, #0
 80091f4:	9310      	str	r3, [sp, #64]	; 0x40
 80091f6:	2301      	movs	r3, #1
 80091f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80091fa:	e740      	b.n	800907e <_strtod_l+0x6de>
 80091fc:	463a      	mov	r2, r7
 80091fe:	4620      	mov	r0, r4
 8009200:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009202:	f7ff f965 	bl	80084d0 <__lshift>
 8009206:	901a      	str	r0, [sp, #104]	; 0x68
 8009208:	2800      	cmp	r0, #0
 800920a:	f47f af68 	bne.w	80090de <_strtod_l+0x73e>
 800920e:	e605      	b.n	8008e1c <_strtod_l+0x47c>
 8009210:	0800ab98 	.word	0x0800ab98
 8009214:	fffffc02 	.word	0xfffffc02
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	39500000 	.word	0x39500000
 8009220:	46ca      	mov	sl, r9
 8009222:	d165      	bne.n	80092f0 <_strtod_l+0x950>
 8009224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009226:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800922a:	b352      	cbz	r2, 8009282 <_strtod_l+0x8e2>
 800922c:	4a9e      	ldr	r2, [pc, #632]	; (80094a8 <_strtod_l+0xb08>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d12a      	bne.n	8009288 <_strtod_l+0x8e8>
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	4641      	mov	r1, r8
 8009236:	b1fb      	cbz	r3, 8009278 <_strtod_l+0x8d8>
 8009238:	4b9c      	ldr	r3, [pc, #624]	; (80094ac <_strtod_l+0xb0c>)
 800923a:	f04f 32ff 	mov.w	r2, #4294967295
 800923e:	ea09 0303 	and.w	r3, r9, r3
 8009242:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009246:	d81a      	bhi.n	800927e <_strtod_l+0x8de>
 8009248:	0d1b      	lsrs	r3, r3, #20
 800924a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800924e:	fa02 f303 	lsl.w	r3, r2, r3
 8009252:	4299      	cmp	r1, r3
 8009254:	d118      	bne.n	8009288 <_strtod_l+0x8e8>
 8009256:	4b96      	ldr	r3, [pc, #600]	; (80094b0 <_strtod_l+0xb10>)
 8009258:	459a      	cmp	sl, r3
 800925a:	d102      	bne.n	8009262 <_strtod_l+0x8c2>
 800925c:	3101      	adds	r1, #1
 800925e:	f43f addd 	beq.w	8008e1c <_strtod_l+0x47c>
 8009262:	f04f 0800 	mov.w	r8, #0
 8009266:	4b91      	ldr	r3, [pc, #580]	; (80094ac <_strtod_l+0xb0c>)
 8009268:	ea0a 0303 	and.w	r3, sl, r3
 800926c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009270:	9b05      	ldr	r3, [sp, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d19a      	bne.n	80091ac <_strtod_l+0x80c>
 8009276:	e5db      	b.n	8008e30 <_strtod_l+0x490>
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	e7e9      	b.n	8009252 <_strtod_l+0x8b2>
 800927e:	4613      	mov	r3, r2
 8009280:	e7e7      	b.n	8009252 <_strtod_l+0x8b2>
 8009282:	ea53 0308 	orrs.w	r3, r3, r8
 8009286:	d081      	beq.n	800918c <_strtod_l+0x7ec>
 8009288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800928a:	b1e3      	cbz	r3, 80092c6 <_strtod_l+0x926>
 800928c:	ea13 0f0a 	tst.w	r3, sl
 8009290:	d0ee      	beq.n	8009270 <_strtod_l+0x8d0>
 8009292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009294:	4640      	mov	r0, r8
 8009296:	4649      	mov	r1, r9
 8009298:	9a05      	ldr	r2, [sp, #20]
 800929a:	b1c3      	cbz	r3, 80092ce <_strtod_l+0x92e>
 800929c:	f7ff fb5c 	bl	8008958 <sulp>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092a8:	f7f7 f814 	bl	80002d4 <__adddf3>
 80092ac:	4680      	mov	r8, r0
 80092ae:	4689      	mov	r9, r1
 80092b0:	e7de      	b.n	8009270 <_strtod_l+0x8d0>
 80092b2:	4013      	ands	r3, r2
 80092b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80092bc:	f04f 38ff 	mov.w	r8, #4294967295
 80092c0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80092c4:	e7d4      	b.n	8009270 <_strtod_l+0x8d0>
 80092c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092c8:	ea13 0f08 	tst.w	r3, r8
 80092cc:	e7e0      	b.n	8009290 <_strtod_l+0x8f0>
 80092ce:	f7ff fb43 	bl	8008958 <sulp>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092da:	f7f6 fff9 	bl	80002d0 <__aeabi_dsub>
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4680      	mov	r8, r0
 80092e4:	4689      	mov	r9, r1
 80092e6:	f7f7 fc13 	bl	8000b10 <__aeabi_dcmpeq>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d0c0      	beq.n	8009270 <_strtod_l+0x8d0>
 80092ee:	e606      	b.n	8008efe <_strtod_l+0x55e>
 80092f0:	4659      	mov	r1, fp
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff fabe 	bl	8008874 <__ratio>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009300:	2200      	movs	r2, #0
 8009302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009306:	f7f7 fc17 	bl	8000b38 <__aeabi_dcmple>
 800930a:	2800      	cmp	r0, #0
 800930c:	d06f      	beq.n	80093ee <_strtod_l+0xa4e>
 800930e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009310:	2b00      	cmp	r3, #0
 8009312:	d17c      	bne.n	800940e <_strtod_l+0xa6e>
 8009314:	f1b8 0f00 	cmp.w	r8, #0
 8009318:	d159      	bne.n	80093ce <_strtod_l+0xa2e>
 800931a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800931e:	2b00      	cmp	r3, #0
 8009320:	d17b      	bne.n	800941a <_strtod_l+0xa7a>
 8009322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009326:	2200      	movs	r2, #0
 8009328:	4b62      	ldr	r3, [pc, #392]	; (80094b4 <_strtod_l+0xb14>)
 800932a:	f7f7 fbfb 	bl	8000b24 <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d15a      	bne.n	80093e8 <_strtod_l+0xa48>
 8009332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009336:	2200      	movs	r2, #0
 8009338:	4b5f      	ldr	r3, [pc, #380]	; (80094b8 <_strtod_l+0xb18>)
 800933a:	f7f7 f981 	bl	8000640 <__aeabi_dmul>
 800933e:	4605      	mov	r5, r0
 8009340:	460f      	mov	r7, r1
 8009342:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009346:	9506      	str	r5, [sp, #24]
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800934e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009352:	4b56      	ldr	r3, [pc, #344]	; (80094ac <_strtod_l+0xb0c>)
 8009354:	4a55      	ldr	r2, [pc, #340]	; (80094ac <_strtod_l+0xb0c>)
 8009356:	ea0a 0303 	and.w	r3, sl, r3
 800935a:	9313      	str	r3, [sp, #76]	; 0x4c
 800935c:	4b57      	ldr	r3, [pc, #348]	; (80094bc <_strtod_l+0xb1c>)
 800935e:	ea0a 0202 	and.w	r2, sl, r2
 8009362:	429a      	cmp	r2, r3
 8009364:	f040 80b0 	bne.w	80094c8 <_strtod_l+0xb28>
 8009368:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800936c:	4640      	mov	r0, r8
 800936e:	4649      	mov	r1, r9
 8009370:	f7ff f9c2 	bl	80086f8 <__ulp>
 8009374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009378:	f7f7 f962 	bl	8000640 <__aeabi_dmul>
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	f7f6 ffa8 	bl	80002d4 <__adddf3>
 8009384:	f8df a124 	ldr.w	sl, [pc, #292]	; 80094ac <_strtod_l+0xb0c>
 8009388:	4a4d      	ldr	r2, [pc, #308]	; (80094c0 <_strtod_l+0xb20>)
 800938a:	ea01 0a0a 	and.w	sl, r1, sl
 800938e:	4592      	cmp	sl, r2
 8009390:	4680      	mov	r8, r0
 8009392:	d948      	bls.n	8009426 <_strtod_l+0xa86>
 8009394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009396:	4b46      	ldr	r3, [pc, #280]	; (80094b0 <_strtod_l+0xb10>)
 8009398:	429a      	cmp	r2, r3
 800939a:	d103      	bne.n	80093a4 <_strtod_l+0xa04>
 800939c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800939e:	3301      	adds	r3, #1
 80093a0:	f43f ad3c 	beq.w	8008e1c <_strtod_l+0x47c>
 80093a4:	f04f 38ff 	mov.w	r8, #4294967295
 80093a8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80094b0 <_strtod_l+0xb10>
 80093ac:	4620      	mov	r0, r4
 80093ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093b0:	f7fe fe76 	bl	80080a0 <_Bfree>
 80093b4:	4620      	mov	r0, r4
 80093b6:	9908      	ldr	r1, [sp, #32]
 80093b8:	f7fe fe72 	bl	80080a0 <_Bfree>
 80093bc:	4659      	mov	r1, fp
 80093be:	4620      	mov	r0, r4
 80093c0:	f7fe fe6e 	bl	80080a0 <_Bfree>
 80093c4:	4631      	mov	r1, r6
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7fe fe6a 	bl	80080a0 <_Bfree>
 80093cc:	e605      	b.n	8008fda <_strtod_l+0x63a>
 80093ce:	f1b8 0f01 	cmp.w	r8, #1
 80093d2:	d103      	bne.n	80093dc <_strtod_l+0xa3c>
 80093d4:	f1b9 0f00 	cmp.w	r9, #0
 80093d8:	f43f ad91 	beq.w	8008efe <_strtod_l+0x55e>
 80093dc:	2200      	movs	r2, #0
 80093de:	4b39      	ldr	r3, [pc, #228]	; (80094c4 <_strtod_l+0xb24>)
 80093e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80093e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093e6:	e016      	b.n	8009416 <_strtod_l+0xa76>
 80093e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80093ea:	4f33      	ldr	r7, [pc, #204]	; (80094b8 <_strtod_l+0xb18>)
 80093ec:	e7a9      	b.n	8009342 <_strtod_l+0x9a2>
 80093ee:	4b32      	ldr	r3, [pc, #200]	; (80094b8 <_strtod_l+0xb18>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093f6:	f7f7 f923 	bl	8000640 <__aeabi_dmul>
 80093fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fc:	4605      	mov	r5, r0
 80093fe:	460f      	mov	r7, r1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d09e      	beq.n	8009342 <_strtod_l+0x9a2>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800940c:	e79d      	b.n	800934a <_strtod_l+0x9aa>
 800940e:	2200      	movs	r2, #0
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <_strtod_l+0xb14>)
 8009412:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009416:	4f27      	ldr	r7, [pc, #156]	; (80094b4 <_strtod_l+0xb14>)
 8009418:	e797      	b.n	800934a <_strtod_l+0x9aa>
 800941a:	2200      	movs	r2, #0
 800941c:	4b29      	ldr	r3, [pc, #164]	; (80094c4 <_strtod_l+0xb24>)
 800941e:	4645      	mov	r5, r8
 8009420:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009424:	e7f7      	b.n	8009416 <_strtod_l+0xa76>
 8009426:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800942a:	9b05      	ldr	r3, [sp, #20]
 800942c:	46ca      	mov	sl, r9
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1bc      	bne.n	80093ac <_strtod_l+0xa0c>
 8009432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009436:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009438:	0d1b      	lsrs	r3, r3, #20
 800943a:	051b      	lsls	r3, r3, #20
 800943c:	429a      	cmp	r2, r3
 800943e:	d1b5      	bne.n	80093ac <_strtod_l+0xa0c>
 8009440:	4628      	mov	r0, r5
 8009442:	4639      	mov	r1, r7
 8009444:	f7f7 fe0e 	bl	8001064 <__aeabi_d2lz>
 8009448:	f7f7 f8cc 	bl	80005e4 <__aeabi_l2d>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4628      	mov	r0, r5
 8009452:	4639      	mov	r1, r7
 8009454:	f7f6 ff3c 	bl	80002d0 <__aeabi_dsub>
 8009458:	460b      	mov	r3, r1
 800945a:	4602      	mov	r2, r0
 800945c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009460:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009466:	ea4a 0a08 	orr.w	sl, sl, r8
 800946a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800946e:	d06c      	beq.n	800954a <_strtod_l+0xbaa>
 8009470:	a309      	add	r3, pc, #36	; (adr r3, 8009498 <_strtod_l+0xaf8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 fb55 	bl	8000b24 <__aeabi_dcmplt>
 800947a:	2800      	cmp	r0, #0
 800947c:	f47f acd8 	bne.w	8008e30 <_strtod_l+0x490>
 8009480:	a307      	add	r3, pc, #28	; (adr r3, 80094a0 <_strtod_l+0xb00>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800948a:	f7f7 fb69 	bl	8000b60 <__aeabi_dcmpgt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d08c      	beq.n	80093ac <_strtod_l+0xa0c>
 8009492:	e4cd      	b.n	8008e30 <_strtod_l+0x490>
 8009494:	f3af 8000 	nop.w
 8009498:	94a03595 	.word	0x94a03595
 800949c:	3fdfffff 	.word	0x3fdfffff
 80094a0:	35afe535 	.word	0x35afe535
 80094a4:	3fe00000 	.word	0x3fe00000
 80094a8:	000fffff 	.word	0x000fffff
 80094ac:	7ff00000 	.word	0x7ff00000
 80094b0:	7fefffff 	.word	0x7fefffff
 80094b4:	3ff00000 	.word	0x3ff00000
 80094b8:	3fe00000 	.word	0x3fe00000
 80094bc:	7fe00000 	.word	0x7fe00000
 80094c0:	7c9fffff 	.word	0x7c9fffff
 80094c4:	bff00000 	.word	0xbff00000
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	b333      	cbz	r3, 800951a <_strtod_l+0xb7a>
 80094cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094d2:	d822      	bhi.n	800951a <_strtod_l+0xb7a>
 80094d4:	a328      	add	r3, pc, #160	; (adr r3, 8009578 <_strtod_l+0xbd8>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4628      	mov	r0, r5
 80094dc:	4639      	mov	r1, r7
 80094de:	f7f7 fb2b 	bl	8000b38 <__aeabi_dcmple>
 80094e2:	b1a0      	cbz	r0, 800950e <_strtod_l+0xb6e>
 80094e4:	4639      	mov	r1, r7
 80094e6:	4628      	mov	r0, r5
 80094e8:	f7f7 fb82 	bl	8000bf0 <__aeabi_d2uiz>
 80094ec:	2801      	cmp	r0, #1
 80094ee:	bf38      	it	cc
 80094f0:	2001      	movcc	r0, #1
 80094f2:	f7f7 f82b 	bl	800054c <__aeabi_ui2d>
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	4605      	mov	r5, r0
 80094fa:	460f      	mov	r7, r1
 80094fc:	bb03      	cbnz	r3, 8009540 <_strtod_l+0xba0>
 80094fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009502:	9014      	str	r0, [sp, #80]	; 0x50
 8009504:	9315      	str	r3, [sp, #84]	; 0x54
 8009506:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800950a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800950e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009512:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	9311      	str	r3, [sp, #68]	; 0x44
 800951a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800951c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800951e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009522:	f7ff f8e9 	bl	80086f8 <__ulp>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 f887 	bl	8000640 <__aeabi_dmul>
 8009532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009536:	f7f6 fecd 	bl	80002d4 <__adddf3>
 800953a:	4680      	mov	r8, r0
 800953c:	4689      	mov	r9, r1
 800953e:	e774      	b.n	800942a <_strtod_l+0xa8a>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009548:	e7dd      	b.n	8009506 <_strtod_l+0xb66>
 800954a:	a30d      	add	r3, pc, #52	; (adr r3, 8009580 <_strtod_l+0xbe0>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f7 fae8 	bl	8000b24 <__aeabi_dcmplt>
 8009554:	e79b      	b.n	800948e <_strtod_l+0xaee>
 8009556:	2300      	movs	r3, #0
 8009558:	930e      	str	r3, [sp, #56]	; 0x38
 800955a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800955c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	f7ff ba5b 	b.w	8008a1a <_strtod_l+0x7a>
 8009564:	2a65      	cmp	r2, #101	; 0x65
 8009566:	f43f ab52 	beq.w	8008c0e <_strtod_l+0x26e>
 800956a:	2a45      	cmp	r2, #69	; 0x45
 800956c:	f43f ab4f 	beq.w	8008c0e <_strtod_l+0x26e>
 8009570:	2301      	movs	r3, #1
 8009572:	f7ff bb87 	b.w	8008c84 <_strtod_l+0x2e4>
 8009576:	bf00      	nop
 8009578:	ffc00000 	.word	0xffc00000
 800957c:	41dfffff 	.word	0x41dfffff
 8009580:	94a03595 	.word	0x94a03595
 8009584:	3fcfffff 	.word	0x3fcfffff

08009588 <_strtod_r>:
 8009588:	4b01      	ldr	r3, [pc, #4]	; (8009590 <_strtod_r+0x8>)
 800958a:	f7ff ba09 	b.w	80089a0 <_strtod_l>
 800958e:	bf00      	nop
 8009590:	20000070 	.word	0x20000070

08009594 <_strtol_l.constprop.0>:
 8009594:	2b01      	cmp	r3, #1
 8009596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959a:	4686      	mov	lr, r0
 800959c:	4690      	mov	r8, r2
 800959e:	d001      	beq.n	80095a4 <_strtol_l.constprop.0+0x10>
 80095a0:	2b24      	cmp	r3, #36	; 0x24
 80095a2:	d906      	bls.n	80095b2 <_strtol_l.constprop.0+0x1e>
 80095a4:	f7fd fd90 	bl	80070c8 <__errno>
 80095a8:	2316      	movs	r3, #22
 80095aa:	6003      	str	r3, [r0, #0]
 80095ac:	2000      	movs	r0, #0
 80095ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b2:	460d      	mov	r5, r1
 80095b4:	4835      	ldr	r0, [pc, #212]	; (800968c <_strtol_l.constprop.0+0xf8>)
 80095b6:	462a      	mov	r2, r5
 80095b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095bc:	5d06      	ldrb	r6, [r0, r4]
 80095be:	f016 0608 	ands.w	r6, r6, #8
 80095c2:	d1f8      	bne.n	80095b6 <_strtol_l.constprop.0+0x22>
 80095c4:	2c2d      	cmp	r4, #45	; 0x2d
 80095c6:	d12e      	bne.n	8009626 <_strtol_l.constprop.0+0x92>
 80095c8:	2601      	movs	r6, #1
 80095ca:	782c      	ldrb	r4, [r5, #0]
 80095cc:	1c95      	adds	r5, r2, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d057      	beq.n	8009682 <_strtol_l.constprop.0+0xee>
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d109      	bne.n	80095ea <_strtol_l.constprop.0+0x56>
 80095d6:	2c30      	cmp	r4, #48	; 0x30
 80095d8:	d107      	bne.n	80095ea <_strtol_l.constprop.0+0x56>
 80095da:	782a      	ldrb	r2, [r5, #0]
 80095dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80095e0:	2a58      	cmp	r2, #88	; 0x58
 80095e2:	d149      	bne.n	8009678 <_strtol_l.constprop.0+0xe4>
 80095e4:	2310      	movs	r3, #16
 80095e6:	786c      	ldrb	r4, [r5, #1]
 80095e8:	3502      	adds	r5, #2
 80095ea:	2200      	movs	r2, #0
 80095ec:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80095f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095f4:	fbbc f9f3 	udiv	r9, ip, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80095fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009602:	2f09      	cmp	r7, #9
 8009604:	d814      	bhi.n	8009630 <_strtol_l.constprop.0+0x9c>
 8009606:	463c      	mov	r4, r7
 8009608:	42a3      	cmp	r3, r4
 800960a:	dd20      	ble.n	800964e <_strtol_l.constprop.0+0xba>
 800960c:	1c57      	adds	r7, r2, #1
 800960e:	d007      	beq.n	8009620 <_strtol_l.constprop.0+0x8c>
 8009610:	4581      	cmp	r9, r0
 8009612:	d319      	bcc.n	8009648 <_strtol_l.constprop.0+0xb4>
 8009614:	d101      	bne.n	800961a <_strtol_l.constprop.0+0x86>
 8009616:	45a2      	cmp	sl, r4
 8009618:	db16      	blt.n	8009648 <_strtol_l.constprop.0+0xb4>
 800961a:	2201      	movs	r2, #1
 800961c:	fb00 4003 	mla	r0, r0, r3, r4
 8009620:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009624:	e7eb      	b.n	80095fe <_strtol_l.constprop.0+0x6a>
 8009626:	2c2b      	cmp	r4, #43	; 0x2b
 8009628:	bf04      	itt	eq
 800962a:	782c      	ldrbeq	r4, [r5, #0]
 800962c:	1c95      	addeq	r5, r2, #2
 800962e:	e7ce      	b.n	80095ce <_strtol_l.constprop.0+0x3a>
 8009630:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009634:	2f19      	cmp	r7, #25
 8009636:	d801      	bhi.n	800963c <_strtol_l.constprop.0+0xa8>
 8009638:	3c37      	subs	r4, #55	; 0x37
 800963a:	e7e5      	b.n	8009608 <_strtol_l.constprop.0+0x74>
 800963c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009640:	2f19      	cmp	r7, #25
 8009642:	d804      	bhi.n	800964e <_strtol_l.constprop.0+0xba>
 8009644:	3c57      	subs	r4, #87	; 0x57
 8009646:	e7df      	b.n	8009608 <_strtol_l.constprop.0+0x74>
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	e7e8      	b.n	8009620 <_strtol_l.constprop.0+0x8c>
 800964e:	1c53      	adds	r3, r2, #1
 8009650:	d108      	bne.n	8009664 <_strtol_l.constprop.0+0xd0>
 8009652:	2322      	movs	r3, #34	; 0x22
 8009654:	4660      	mov	r0, ip
 8009656:	f8ce 3000 	str.w	r3, [lr]
 800965a:	f1b8 0f00 	cmp.w	r8, #0
 800965e:	d0a6      	beq.n	80095ae <_strtol_l.constprop.0+0x1a>
 8009660:	1e69      	subs	r1, r5, #1
 8009662:	e006      	b.n	8009672 <_strtol_l.constprop.0+0xde>
 8009664:	b106      	cbz	r6, 8009668 <_strtol_l.constprop.0+0xd4>
 8009666:	4240      	negs	r0, r0
 8009668:	f1b8 0f00 	cmp.w	r8, #0
 800966c:	d09f      	beq.n	80095ae <_strtol_l.constprop.0+0x1a>
 800966e:	2a00      	cmp	r2, #0
 8009670:	d1f6      	bne.n	8009660 <_strtol_l.constprop.0+0xcc>
 8009672:	f8c8 1000 	str.w	r1, [r8]
 8009676:	e79a      	b.n	80095ae <_strtol_l.constprop.0+0x1a>
 8009678:	2430      	movs	r4, #48	; 0x30
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1b5      	bne.n	80095ea <_strtol_l.constprop.0+0x56>
 800967e:	2308      	movs	r3, #8
 8009680:	e7b3      	b.n	80095ea <_strtol_l.constprop.0+0x56>
 8009682:	2c30      	cmp	r4, #48	; 0x30
 8009684:	d0a9      	beq.n	80095da <_strtol_l.constprop.0+0x46>
 8009686:	230a      	movs	r3, #10
 8009688:	e7af      	b.n	80095ea <_strtol_l.constprop.0+0x56>
 800968a:	bf00      	nop
 800968c:	0800abc1 	.word	0x0800abc1

08009690 <_strtol_r>:
 8009690:	f7ff bf80 	b.w	8009594 <_strtol_l.constprop.0>

08009694 <__ssputs_r>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	461f      	mov	r7, r3
 800969a:	688e      	ldr	r6, [r1, #8]
 800969c:	4682      	mov	sl, r0
 800969e:	42be      	cmp	r6, r7
 80096a0:	460c      	mov	r4, r1
 80096a2:	4690      	mov	r8, r2
 80096a4:	680b      	ldr	r3, [r1, #0]
 80096a6:	d82c      	bhi.n	8009702 <__ssputs_r+0x6e>
 80096a8:	898a      	ldrh	r2, [r1, #12]
 80096aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096ae:	d026      	beq.n	80096fe <__ssputs_r+0x6a>
 80096b0:	6965      	ldr	r5, [r4, #20]
 80096b2:	6909      	ldr	r1, [r1, #16]
 80096b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096b8:	eba3 0901 	sub.w	r9, r3, r1
 80096bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096c0:	1c7b      	adds	r3, r7, #1
 80096c2:	444b      	add	r3, r9
 80096c4:	106d      	asrs	r5, r5, #1
 80096c6:	429d      	cmp	r5, r3
 80096c8:	bf38      	it	cc
 80096ca:	461d      	movcc	r5, r3
 80096cc:	0553      	lsls	r3, r2, #21
 80096ce:	d527      	bpl.n	8009720 <__ssputs_r+0x8c>
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7fe fc19 	bl	8007f08 <_malloc_r>
 80096d6:	4606      	mov	r6, r0
 80096d8:	b360      	cbz	r0, 8009734 <__ssputs_r+0xa0>
 80096da:	464a      	mov	r2, r9
 80096dc:	6921      	ldr	r1, [r4, #16]
 80096de:	f000 fa17 	bl	8009b10 <memcpy>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ec:	81a3      	strh	r3, [r4, #12]
 80096ee:	6126      	str	r6, [r4, #16]
 80096f0:	444e      	add	r6, r9
 80096f2:	6026      	str	r6, [r4, #0]
 80096f4:	463e      	mov	r6, r7
 80096f6:	6165      	str	r5, [r4, #20]
 80096f8:	eba5 0509 	sub.w	r5, r5, r9
 80096fc:	60a5      	str	r5, [r4, #8]
 80096fe:	42be      	cmp	r6, r7
 8009700:	d900      	bls.n	8009704 <__ssputs_r+0x70>
 8009702:	463e      	mov	r6, r7
 8009704:	4632      	mov	r2, r6
 8009706:	4641      	mov	r1, r8
 8009708:	6820      	ldr	r0, [r4, #0]
 800970a:	f000 f9c5 	bl	8009a98 <memmove>
 800970e:	2000      	movs	r0, #0
 8009710:	68a3      	ldr	r3, [r4, #8]
 8009712:	1b9b      	subs	r3, r3, r6
 8009714:	60a3      	str	r3, [r4, #8]
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	4433      	add	r3, r6
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	462a      	mov	r2, r5
 8009722:	f000 fda6 	bl	800a272 <_realloc_r>
 8009726:	4606      	mov	r6, r0
 8009728:	2800      	cmp	r0, #0
 800972a:	d1e0      	bne.n	80096ee <__ssputs_r+0x5a>
 800972c:	4650      	mov	r0, sl
 800972e:	6921      	ldr	r1, [r4, #16]
 8009730:	f7fe fb7a 	bl	8007e28 <_free_r>
 8009734:	230c      	movs	r3, #12
 8009736:	f8ca 3000 	str.w	r3, [sl]
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	e7e9      	b.n	800971c <__ssputs_r+0x88>

08009748 <_svfiprintf_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	4698      	mov	r8, r3
 800974e:	898b      	ldrh	r3, [r1, #12]
 8009750:	4607      	mov	r7, r0
 8009752:	061b      	lsls	r3, r3, #24
 8009754:	460d      	mov	r5, r1
 8009756:	4614      	mov	r4, r2
 8009758:	b09d      	sub	sp, #116	; 0x74
 800975a:	d50e      	bpl.n	800977a <_svfiprintf_r+0x32>
 800975c:	690b      	ldr	r3, [r1, #16]
 800975e:	b963      	cbnz	r3, 800977a <_svfiprintf_r+0x32>
 8009760:	2140      	movs	r1, #64	; 0x40
 8009762:	f7fe fbd1 	bl	8007f08 <_malloc_r>
 8009766:	6028      	str	r0, [r5, #0]
 8009768:	6128      	str	r0, [r5, #16]
 800976a:	b920      	cbnz	r0, 8009776 <_svfiprintf_r+0x2e>
 800976c:	230c      	movs	r3, #12
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	e0d0      	b.n	8009918 <_svfiprintf_r+0x1d0>
 8009776:	2340      	movs	r3, #64	; 0x40
 8009778:	616b      	str	r3, [r5, #20]
 800977a:	2300      	movs	r3, #0
 800977c:	9309      	str	r3, [sp, #36]	; 0x24
 800977e:	2320      	movs	r3, #32
 8009780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009784:	2330      	movs	r3, #48	; 0x30
 8009786:	f04f 0901 	mov.w	r9, #1
 800978a:	f8cd 800c 	str.w	r8, [sp, #12]
 800978e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009930 <_svfiprintf_r+0x1e8>
 8009792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009796:	4623      	mov	r3, r4
 8009798:	469a      	mov	sl, r3
 800979a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800979e:	b10a      	cbz	r2, 80097a4 <_svfiprintf_r+0x5c>
 80097a0:	2a25      	cmp	r2, #37	; 0x25
 80097a2:	d1f9      	bne.n	8009798 <_svfiprintf_r+0x50>
 80097a4:	ebba 0b04 	subs.w	fp, sl, r4
 80097a8:	d00b      	beq.n	80097c2 <_svfiprintf_r+0x7a>
 80097aa:	465b      	mov	r3, fp
 80097ac:	4622      	mov	r2, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ff6f 	bl	8009694 <__ssputs_r>
 80097b6:	3001      	adds	r0, #1
 80097b8:	f000 80a9 	beq.w	800990e <_svfiprintf_r+0x1c6>
 80097bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097be:	445a      	add	r2, fp
 80097c0:	9209      	str	r2, [sp, #36]	; 0x24
 80097c2:	f89a 3000 	ldrb.w	r3, [sl]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 80a1 	beq.w	800990e <_svfiprintf_r+0x1c6>
 80097cc:	2300      	movs	r3, #0
 80097ce:	f04f 32ff 	mov.w	r2, #4294967295
 80097d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097d6:	f10a 0a01 	add.w	sl, sl, #1
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	9307      	str	r3, [sp, #28]
 80097de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097e2:	931a      	str	r3, [sp, #104]	; 0x68
 80097e4:	4654      	mov	r4, sl
 80097e6:	2205      	movs	r2, #5
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	4850      	ldr	r0, [pc, #320]	; (8009930 <_svfiprintf_r+0x1e8>)
 80097ee:	f7fd fc98 	bl	8007122 <memchr>
 80097f2:	9a04      	ldr	r2, [sp, #16]
 80097f4:	b9d8      	cbnz	r0, 800982e <_svfiprintf_r+0xe6>
 80097f6:	06d0      	lsls	r0, r2, #27
 80097f8:	bf44      	itt	mi
 80097fa:	2320      	movmi	r3, #32
 80097fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009800:	0711      	lsls	r1, r2, #28
 8009802:	bf44      	itt	mi
 8009804:	232b      	movmi	r3, #43	; 0x2b
 8009806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800980a:	f89a 3000 	ldrb.w	r3, [sl]
 800980e:	2b2a      	cmp	r3, #42	; 0x2a
 8009810:	d015      	beq.n	800983e <_svfiprintf_r+0xf6>
 8009812:	4654      	mov	r4, sl
 8009814:	2000      	movs	r0, #0
 8009816:	f04f 0c0a 	mov.w	ip, #10
 800981a:	9a07      	ldr	r2, [sp, #28]
 800981c:	4621      	mov	r1, r4
 800981e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009822:	3b30      	subs	r3, #48	; 0x30
 8009824:	2b09      	cmp	r3, #9
 8009826:	d94d      	bls.n	80098c4 <_svfiprintf_r+0x17c>
 8009828:	b1b0      	cbz	r0, 8009858 <_svfiprintf_r+0x110>
 800982a:	9207      	str	r2, [sp, #28]
 800982c:	e014      	b.n	8009858 <_svfiprintf_r+0x110>
 800982e:	eba0 0308 	sub.w	r3, r0, r8
 8009832:	fa09 f303 	lsl.w	r3, r9, r3
 8009836:	4313      	orrs	r3, r2
 8009838:	46a2      	mov	sl, r4
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	e7d2      	b.n	80097e4 <_svfiprintf_r+0x9c>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	1d19      	adds	r1, r3, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	9103      	str	r1, [sp, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfbb      	ittet	lt
 800984a:	425b      	neglt	r3, r3
 800984c:	f042 0202 	orrlt.w	r2, r2, #2
 8009850:	9307      	strge	r3, [sp, #28]
 8009852:	9307      	strlt	r3, [sp, #28]
 8009854:	bfb8      	it	lt
 8009856:	9204      	strlt	r2, [sp, #16]
 8009858:	7823      	ldrb	r3, [r4, #0]
 800985a:	2b2e      	cmp	r3, #46	; 0x2e
 800985c:	d10c      	bne.n	8009878 <_svfiprintf_r+0x130>
 800985e:	7863      	ldrb	r3, [r4, #1]
 8009860:	2b2a      	cmp	r3, #42	; 0x2a
 8009862:	d134      	bne.n	80098ce <_svfiprintf_r+0x186>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	3402      	adds	r4, #2
 8009868:	1d1a      	adds	r2, r3, #4
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	9203      	str	r2, [sp, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfb8      	it	lt
 8009872:	f04f 33ff 	movlt.w	r3, #4294967295
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009934 <_svfiprintf_r+0x1ec>
 800987c:	2203      	movs	r2, #3
 800987e:	4650      	mov	r0, sl
 8009880:	7821      	ldrb	r1, [r4, #0]
 8009882:	f7fd fc4e 	bl	8007122 <memchr>
 8009886:	b138      	cbz	r0, 8009898 <_svfiprintf_r+0x150>
 8009888:	2240      	movs	r2, #64	; 0x40
 800988a:	9b04      	ldr	r3, [sp, #16]
 800988c:	eba0 000a 	sub.w	r0, r0, sl
 8009890:	4082      	lsls	r2, r0
 8009892:	4313      	orrs	r3, r2
 8009894:	3401      	adds	r4, #1
 8009896:	9304      	str	r3, [sp, #16]
 8009898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989c:	2206      	movs	r2, #6
 800989e:	4826      	ldr	r0, [pc, #152]	; (8009938 <_svfiprintf_r+0x1f0>)
 80098a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098a4:	f7fd fc3d 	bl	8007122 <memchr>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d038      	beq.n	800991e <_svfiprintf_r+0x1d6>
 80098ac:	4b23      	ldr	r3, [pc, #140]	; (800993c <_svfiprintf_r+0x1f4>)
 80098ae:	bb1b      	cbnz	r3, 80098f8 <_svfiprintf_r+0x1b0>
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	3307      	adds	r3, #7
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	3308      	adds	r3, #8
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	4433      	add	r3, r6
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	e768      	b.n	8009796 <_svfiprintf_r+0x4e>
 80098c4:	460c      	mov	r4, r1
 80098c6:	2001      	movs	r0, #1
 80098c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098cc:	e7a6      	b.n	800981c <_svfiprintf_r+0xd4>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4619      	mov	r1, r3
 80098d6:	3401      	adds	r4, #1
 80098d8:	9305      	str	r3, [sp, #20]
 80098da:	4620      	mov	r0, r4
 80098dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e0:	3a30      	subs	r2, #48	; 0x30
 80098e2:	2a09      	cmp	r2, #9
 80098e4:	d903      	bls.n	80098ee <_svfiprintf_r+0x1a6>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c6      	beq.n	8009878 <_svfiprintf_r+0x130>
 80098ea:	9105      	str	r1, [sp, #20]
 80098ec:	e7c4      	b.n	8009878 <_svfiprintf_r+0x130>
 80098ee:	4604      	mov	r4, r0
 80098f0:	2301      	movs	r3, #1
 80098f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098f6:	e7f0      	b.n	80098da <_svfiprintf_r+0x192>
 80098f8:	ab03      	add	r3, sp, #12
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	462a      	mov	r2, r5
 80098fe:	4638      	mov	r0, r7
 8009900:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <_svfiprintf_r+0x1f8>)
 8009902:	a904      	add	r1, sp, #16
 8009904:	f7fc fc98 	bl	8006238 <_printf_float>
 8009908:	1c42      	adds	r2, r0, #1
 800990a:	4606      	mov	r6, r0
 800990c:	d1d6      	bne.n	80098bc <_svfiprintf_r+0x174>
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	065b      	lsls	r3, r3, #25
 8009912:	f53f af2d 	bmi.w	8009770 <_svfiprintf_r+0x28>
 8009916:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009918:	b01d      	add	sp, #116	; 0x74
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991e:	ab03      	add	r3, sp, #12
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	462a      	mov	r2, r5
 8009924:	4638      	mov	r0, r7
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <_svfiprintf_r+0x1f8>)
 8009928:	a904      	add	r1, sp, #16
 800992a:	f7fc ff25 	bl	8006778 <_printf_i>
 800992e:	e7eb      	b.n	8009908 <_svfiprintf_r+0x1c0>
 8009930:	0800acc1 	.word	0x0800acc1
 8009934:	0800acc7 	.word	0x0800acc7
 8009938:	0800accb 	.word	0x0800accb
 800993c:	08006239 	.word	0x08006239
 8009940:	08009695 	.word	0x08009695

08009944 <__sflush_r>:
 8009944:	898a      	ldrh	r2, [r1, #12]
 8009946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009948:	4605      	mov	r5, r0
 800994a:	0710      	lsls	r0, r2, #28
 800994c:	460c      	mov	r4, r1
 800994e:	d457      	bmi.n	8009a00 <__sflush_r+0xbc>
 8009950:	684b      	ldr	r3, [r1, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	dc04      	bgt.n	8009960 <__sflush_r+0x1c>
 8009956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	dc01      	bgt.n	8009960 <__sflush_r+0x1c>
 800995c:	2000      	movs	r0, #0
 800995e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009962:	2e00      	cmp	r6, #0
 8009964:	d0fa      	beq.n	800995c <__sflush_r+0x18>
 8009966:	2300      	movs	r3, #0
 8009968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800996c:	682f      	ldr	r7, [r5, #0]
 800996e:	6a21      	ldr	r1, [r4, #32]
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	d032      	beq.n	80099da <__sflush_r+0x96>
 8009974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	075a      	lsls	r2, r3, #29
 800997a:	d505      	bpl.n	8009988 <__sflush_r+0x44>
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	1ac0      	subs	r0, r0, r3
 8009980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009982:	b10b      	cbz	r3, 8009988 <__sflush_r+0x44>
 8009984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009986:	1ac0      	subs	r0, r0, r3
 8009988:	2300      	movs	r3, #0
 800998a:	4602      	mov	r2, r0
 800998c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800998e:	4628      	mov	r0, r5
 8009990:	6a21      	ldr	r1, [r4, #32]
 8009992:	47b0      	blx	r6
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	d106      	bne.n	80099a8 <__sflush_r+0x64>
 800999a:	6829      	ldr	r1, [r5, #0]
 800999c:	291d      	cmp	r1, #29
 800999e:	d82b      	bhi.n	80099f8 <__sflush_r+0xb4>
 80099a0:	4a28      	ldr	r2, [pc, #160]	; (8009a44 <__sflush_r+0x100>)
 80099a2:	410a      	asrs	r2, r1
 80099a4:	07d6      	lsls	r6, r2, #31
 80099a6:	d427      	bmi.n	80099f8 <__sflush_r+0xb4>
 80099a8:	2200      	movs	r2, #0
 80099aa:	6062      	str	r2, [r4, #4]
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	04d9      	lsls	r1, r3, #19
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	d504      	bpl.n	80099be <__sflush_r+0x7a>
 80099b4:	1c42      	adds	r2, r0, #1
 80099b6:	d101      	bne.n	80099bc <__sflush_r+0x78>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b903      	cbnz	r3, 80099be <__sflush_r+0x7a>
 80099bc:	6560      	str	r0, [r4, #84]	; 0x54
 80099be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099c0:	602f      	str	r7, [r5, #0]
 80099c2:	2900      	cmp	r1, #0
 80099c4:	d0ca      	beq.n	800995c <__sflush_r+0x18>
 80099c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ca:	4299      	cmp	r1, r3
 80099cc:	d002      	beq.n	80099d4 <__sflush_r+0x90>
 80099ce:	4628      	mov	r0, r5
 80099d0:	f7fe fa2a 	bl	8007e28 <_free_r>
 80099d4:	2000      	movs	r0, #0
 80099d6:	6360      	str	r0, [r4, #52]	; 0x34
 80099d8:	e7c1      	b.n	800995e <__sflush_r+0x1a>
 80099da:	2301      	movs	r3, #1
 80099dc:	4628      	mov	r0, r5
 80099de:	47b0      	blx	r6
 80099e0:	1c41      	adds	r1, r0, #1
 80099e2:	d1c8      	bne.n	8009976 <__sflush_r+0x32>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0c5      	beq.n	8009976 <__sflush_r+0x32>
 80099ea:	2b1d      	cmp	r3, #29
 80099ec:	d001      	beq.n	80099f2 <__sflush_r+0xae>
 80099ee:	2b16      	cmp	r3, #22
 80099f0:	d101      	bne.n	80099f6 <__sflush_r+0xb2>
 80099f2:	602f      	str	r7, [r5, #0]
 80099f4:	e7b2      	b.n	800995c <__sflush_r+0x18>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e7ae      	b.n	800995e <__sflush_r+0x1a>
 8009a00:	690f      	ldr	r7, [r1, #16]
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	d0aa      	beq.n	800995c <__sflush_r+0x18>
 8009a06:	0793      	lsls	r3, r2, #30
 8009a08:	bf18      	it	ne
 8009a0a:	2300      	movne	r3, #0
 8009a0c:	680e      	ldr	r6, [r1, #0]
 8009a0e:	bf08      	it	eq
 8009a10:	694b      	ldreq	r3, [r1, #20]
 8009a12:	1bf6      	subs	r6, r6, r7
 8009a14:	600f      	str	r7, [r1, #0]
 8009a16:	608b      	str	r3, [r1, #8]
 8009a18:	2e00      	cmp	r6, #0
 8009a1a:	dd9f      	ble.n	800995c <__sflush_r+0x18>
 8009a1c:	4633      	mov	r3, r6
 8009a1e:	463a      	mov	r2, r7
 8009a20:	4628      	mov	r0, r5
 8009a22:	6a21      	ldr	r1, [r4, #32]
 8009a24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a28:	47e0      	blx	ip
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	dc06      	bgt.n	8009a3c <__sflush_r+0xf8>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e790      	b.n	800995e <__sflush_r+0x1a>
 8009a3c:	4407      	add	r7, r0
 8009a3e:	1a36      	subs	r6, r6, r0
 8009a40:	e7ea      	b.n	8009a18 <__sflush_r+0xd4>
 8009a42:	bf00      	nop
 8009a44:	dfbffffe 	.word	0xdfbffffe

08009a48 <_fflush_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	690b      	ldr	r3, [r1, #16]
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	b913      	cbnz	r3, 8009a58 <_fflush_r+0x10>
 8009a52:	2500      	movs	r5, #0
 8009a54:	4628      	mov	r0, r5
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	b118      	cbz	r0, 8009a62 <_fflush_r+0x1a>
 8009a5a:	6a03      	ldr	r3, [r0, #32]
 8009a5c:	b90b      	cbnz	r3, 8009a62 <_fflush_r+0x1a>
 8009a5e:	f7fd fa47 	bl	8006ef0 <__sinit>
 8009a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0f3      	beq.n	8009a52 <_fflush_r+0xa>
 8009a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a6c:	07d0      	lsls	r0, r2, #31
 8009a6e:	d404      	bmi.n	8009a7a <_fflush_r+0x32>
 8009a70:	0599      	lsls	r1, r3, #22
 8009a72:	d402      	bmi.n	8009a7a <_fflush_r+0x32>
 8009a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a76:	f7fd fb52 	bl	800711e <__retarget_lock_acquire_recursive>
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	f7ff ff61 	bl	8009944 <__sflush_r>
 8009a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a84:	4605      	mov	r5, r0
 8009a86:	07da      	lsls	r2, r3, #31
 8009a88:	d4e4      	bmi.n	8009a54 <_fflush_r+0xc>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	059b      	lsls	r3, r3, #22
 8009a8e:	d4e1      	bmi.n	8009a54 <_fflush_r+0xc>
 8009a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a92:	f7fd fb45 	bl	8007120 <__retarget_lock_release_recursive>
 8009a96:	e7dd      	b.n	8009a54 <_fflush_r+0xc>

08009a98 <memmove>:
 8009a98:	4288      	cmp	r0, r1
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	eb01 0402 	add.w	r4, r1, r2
 8009aa0:	d902      	bls.n	8009aa8 <memmove+0x10>
 8009aa2:	4284      	cmp	r4, r0
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	d807      	bhi.n	8009ab8 <memmove+0x20>
 8009aa8:	1e43      	subs	r3, r0, #1
 8009aaa:	42a1      	cmp	r1, r4
 8009aac:	d008      	beq.n	8009ac0 <memmove+0x28>
 8009aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ab6:	e7f8      	b.n	8009aaa <memmove+0x12>
 8009ab8:	4601      	mov	r1, r0
 8009aba:	4402      	add	r2, r0
 8009abc:	428a      	cmp	r2, r1
 8009abe:	d100      	bne.n	8009ac2 <memmove+0x2a>
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aca:	e7f7      	b.n	8009abc <memmove+0x24>

08009acc <strncmp>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	b16a      	cbz	r2, 8009aec <strncmp+0x20>
 8009ad0:	3901      	subs	r1, #1
 8009ad2:	1884      	adds	r4, r0, r2
 8009ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d103      	bne.n	8009ae8 <strncmp+0x1c>
 8009ae0:	42a0      	cmp	r0, r4
 8009ae2:	d001      	beq.n	8009ae8 <strncmp+0x1c>
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	d1f5      	bne.n	8009ad4 <strncmp+0x8>
 8009ae8:	1ad0      	subs	r0, r2, r3
 8009aea:	bd10      	pop	{r4, pc}
 8009aec:	4610      	mov	r0, r2
 8009aee:	e7fc      	b.n	8009aea <strncmp+0x1e>

08009af0 <_sbrk_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	4d05      	ldr	r5, [pc, #20]	; (8009b0c <_sbrk_r+0x1c>)
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	f7f8 fa12 	bl	8001f24 <_sbrk>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_sbrk_r+0x1a>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_sbrk_r+0x1a>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	20000500 	.word	0x20000500

08009b10 <memcpy>:
 8009b10:	440a      	add	r2, r1
 8009b12:	4291      	cmp	r1, r2
 8009b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b18:	d100      	bne.n	8009b1c <memcpy+0xc>
 8009b1a:	4770      	bx	lr
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b22:	4291      	cmp	r1, r2
 8009b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b28:	d1f9      	bne.n	8009b1e <memcpy+0xe>
 8009b2a:	bd10      	pop	{r4, pc}

08009b2c <nan>:
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4901      	ldr	r1, [pc, #4]	; (8009b34 <nan+0x8>)
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	7ff80000 	.word	0x7ff80000

08009b38 <__assert_func>:
 8009b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b3a:	4614      	mov	r4, r2
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <__assert_func+0x2c>)
 8009b40:	4605      	mov	r5, r0
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68d8      	ldr	r0, [r3, #12]
 8009b46:	b14c      	cbz	r4, 8009b5c <__assert_func+0x24>
 8009b48:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <__assert_func+0x30>)
 8009b4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b4e:	9100      	str	r1, [sp, #0]
 8009b50:	462b      	mov	r3, r5
 8009b52:	4906      	ldr	r1, [pc, #24]	; (8009b6c <__assert_func+0x34>)
 8009b54:	f000 fbca 	bl	800a2ec <fiprintf>
 8009b58:	f000 fbda 	bl	800a310 <abort>
 8009b5c:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <__assert_func+0x38>)
 8009b5e:	461c      	mov	r4, r3
 8009b60:	e7f3      	b.n	8009b4a <__assert_func+0x12>
 8009b62:	bf00      	nop
 8009b64:	2000006c 	.word	0x2000006c
 8009b68:	0800acda 	.word	0x0800acda
 8009b6c:	0800ace7 	.word	0x0800ace7
 8009b70:	0800ad15 	.word	0x0800ad15

08009b74 <_calloc_r>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	fba1 5402 	umull	r5, r4, r1, r2
 8009b7a:	b934      	cbnz	r4, 8009b8a <_calloc_r+0x16>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	f7fe f9c3 	bl	8007f08 <_malloc_r>
 8009b82:	4606      	mov	r6, r0
 8009b84:	b928      	cbnz	r0, 8009b92 <_calloc_r+0x1e>
 8009b86:	4630      	mov	r0, r6
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	220c      	movs	r2, #12
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	6002      	str	r2, [r0, #0]
 8009b90:	e7f9      	b.n	8009b86 <_calloc_r+0x12>
 8009b92:	462a      	mov	r2, r5
 8009b94:	4621      	mov	r1, r4
 8009b96:	f7fd fa44 	bl	8007022 <memset>
 8009b9a:	e7f4      	b.n	8009b86 <_calloc_r+0x12>

08009b9c <rshift>:
 8009b9c:	6903      	ldr	r3, [r0, #16]
 8009b9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ba2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ba6:	f100 0414 	add.w	r4, r0, #20
 8009baa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bae:	dd46      	ble.n	8009c3e <rshift+0xa2>
 8009bb0:	f011 011f 	ands.w	r1, r1, #31
 8009bb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bbc:	d10c      	bne.n	8009bd8 <rshift+0x3c>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	f100 0710 	add.w	r7, r0, #16
 8009bc4:	42b1      	cmp	r1, r6
 8009bc6:	d335      	bcc.n	8009c34 <rshift+0x98>
 8009bc8:	1a9b      	subs	r3, r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	1eea      	subs	r2, r5, #3
 8009bce:	4296      	cmp	r6, r2
 8009bd0:	bf38      	it	cc
 8009bd2:	2300      	movcc	r3, #0
 8009bd4:	4423      	add	r3, r4
 8009bd6:	e015      	b.n	8009c04 <rshift+0x68>
 8009bd8:	46a1      	mov	r9, r4
 8009bda:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bde:	f1c1 0820 	rsb	r8, r1, #32
 8009be2:	40cf      	lsrs	r7, r1
 8009be4:	f105 0e04 	add.w	lr, r5, #4
 8009be8:	4576      	cmp	r6, lr
 8009bea:	46f4      	mov	ip, lr
 8009bec:	d816      	bhi.n	8009c1c <rshift+0x80>
 8009bee:	1a9a      	subs	r2, r3, r2
 8009bf0:	0092      	lsls	r2, r2, #2
 8009bf2:	3a04      	subs	r2, #4
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	42ae      	cmp	r6, r5
 8009bf8:	bf38      	it	cc
 8009bfa:	2200      	movcc	r2, #0
 8009bfc:	18a3      	adds	r3, r4, r2
 8009bfe:	50a7      	str	r7, [r4, r2]
 8009c00:	b107      	cbz	r7, 8009c04 <rshift+0x68>
 8009c02:	3304      	adds	r3, #4
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	eba3 0204 	sub.w	r2, r3, r4
 8009c0a:	bf08      	it	eq
 8009c0c:	2300      	moveq	r3, #0
 8009c0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c12:	6102      	str	r2, [r0, #16]
 8009c14:	bf08      	it	eq
 8009c16:	6143      	streq	r3, [r0, #20]
 8009c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c1c:	f8dc c000 	ldr.w	ip, [ip]
 8009c20:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c24:	ea4c 0707 	orr.w	r7, ip, r7
 8009c28:	f849 7b04 	str.w	r7, [r9], #4
 8009c2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c30:	40cf      	lsrs	r7, r1
 8009c32:	e7d9      	b.n	8009be8 <rshift+0x4c>
 8009c34:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c38:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c3c:	e7c2      	b.n	8009bc4 <rshift+0x28>
 8009c3e:	4623      	mov	r3, r4
 8009c40:	e7e0      	b.n	8009c04 <rshift+0x68>

08009c42 <__hexdig_fun>:
 8009c42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d802      	bhi.n	8009c50 <__hexdig_fun+0xe>
 8009c4a:	3820      	subs	r0, #32
 8009c4c:	b2c0      	uxtb	r0, r0
 8009c4e:	4770      	bx	lr
 8009c50:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c54:	2b05      	cmp	r3, #5
 8009c56:	d801      	bhi.n	8009c5c <__hexdig_fun+0x1a>
 8009c58:	3847      	subs	r0, #71	; 0x47
 8009c5a:	e7f7      	b.n	8009c4c <__hexdig_fun+0xa>
 8009c5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c60:	2b05      	cmp	r3, #5
 8009c62:	d801      	bhi.n	8009c68 <__hexdig_fun+0x26>
 8009c64:	3827      	subs	r0, #39	; 0x27
 8009c66:	e7f1      	b.n	8009c4c <__hexdig_fun+0xa>
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4770      	bx	lr

08009c6c <__gethex>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	4681      	mov	r9, r0
 8009c72:	468a      	mov	sl, r1
 8009c74:	4617      	mov	r7, r2
 8009c76:	680a      	ldr	r2, [r1, #0]
 8009c78:	b085      	sub	sp, #20
 8009c7a:	f102 0b02 	add.w	fp, r2, #2
 8009c7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009c82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	32fe      	adds	r2, #254	; 0xfe
 8009c8a:	eb02 030b 	add.w	r3, r2, fp
 8009c8e:	46d8      	mov	r8, fp
 8009c90:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	2830      	cmp	r0, #48	; 0x30
 8009c98:	d0f7      	beq.n	8009c8a <__gethex+0x1e>
 8009c9a:	f7ff ffd2 	bl	8009c42 <__hexdig_fun>
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d138      	bne.n	8009d16 <__gethex+0xaa>
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	49a7      	ldr	r1, [pc, #668]	; (8009f48 <__gethex+0x2dc>)
 8009caa:	f7ff ff0f 	bl	8009acc <strncmp>
 8009cae:	4606      	mov	r6, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d169      	bne.n	8009d88 <__gethex+0x11c>
 8009cb4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009cb8:	465d      	mov	r5, fp
 8009cba:	f7ff ffc2 	bl	8009c42 <__hexdig_fun>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d064      	beq.n	8009d8c <__gethex+0x120>
 8009cc2:	465a      	mov	r2, fp
 8009cc4:	7810      	ldrb	r0, [r2, #0]
 8009cc6:	4690      	mov	r8, r2
 8009cc8:	2830      	cmp	r0, #48	; 0x30
 8009cca:	f102 0201 	add.w	r2, r2, #1
 8009cce:	d0f9      	beq.n	8009cc4 <__gethex+0x58>
 8009cd0:	f7ff ffb7 	bl	8009c42 <__hexdig_fun>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	fab0 f480 	clz	r4, r0
 8009cda:	465e      	mov	r6, fp
 8009cdc:	0964      	lsrs	r4, r4, #5
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	4615      	mov	r5, r2
 8009ce4:	7828      	ldrb	r0, [r5, #0]
 8009ce6:	3201      	adds	r2, #1
 8009ce8:	f7ff ffab 	bl	8009c42 <__hexdig_fun>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d1f8      	bne.n	8009ce2 <__gethex+0x76>
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	4994      	ldr	r1, [pc, #592]	; (8009f48 <__gethex+0x2dc>)
 8009cf6:	f7ff fee9 	bl	8009acc <strncmp>
 8009cfa:	b978      	cbnz	r0, 8009d1c <__gethex+0xb0>
 8009cfc:	b946      	cbnz	r6, 8009d10 <__gethex+0xa4>
 8009cfe:	1c6e      	adds	r6, r5, #1
 8009d00:	4632      	mov	r2, r6
 8009d02:	4615      	mov	r5, r2
 8009d04:	7828      	ldrb	r0, [r5, #0]
 8009d06:	3201      	adds	r2, #1
 8009d08:	f7ff ff9b 	bl	8009c42 <__hexdig_fun>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d1f8      	bne.n	8009d02 <__gethex+0x96>
 8009d10:	1b73      	subs	r3, r6, r5
 8009d12:	009e      	lsls	r6, r3, #2
 8009d14:	e004      	b.n	8009d20 <__gethex+0xb4>
 8009d16:	2400      	movs	r4, #0
 8009d18:	4626      	mov	r6, r4
 8009d1a:	e7e1      	b.n	8009ce0 <__gethex+0x74>
 8009d1c:	2e00      	cmp	r6, #0
 8009d1e:	d1f7      	bne.n	8009d10 <__gethex+0xa4>
 8009d20:	782b      	ldrb	r3, [r5, #0]
 8009d22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d26:	2b50      	cmp	r3, #80	; 0x50
 8009d28:	d13d      	bne.n	8009da6 <__gethex+0x13a>
 8009d2a:	786b      	ldrb	r3, [r5, #1]
 8009d2c:	2b2b      	cmp	r3, #43	; 0x2b
 8009d2e:	d02f      	beq.n	8009d90 <__gethex+0x124>
 8009d30:	2b2d      	cmp	r3, #45	; 0x2d
 8009d32:	d031      	beq.n	8009d98 <__gethex+0x12c>
 8009d34:	f04f 0b00 	mov.w	fp, #0
 8009d38:	1c69      	adds	r1, r5, #1
 8009d3a:	7808      	ldrb	r0, [r1, #0]
 8009d3c:	f7ff ff81 	bl	8009c42 <__hexdig_fun>
 8009d40:	1e42      	subs	r2, r0, #1
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	2a18      	cmp	r2, #24
 8009d46:	d82e      	bhi.n	8009da6 <__gethex+0x13a>
 8009d48:	f1a0 0210 	sub.w	r2, r0, #16
 8009d4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d50:	f7ff ff77 	bl	8009c42 <__hexdig_fun>
 8009d54:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d58:	fa5f fc8c 	uxtb.w	ip, ip
 8009d5c:	f1bc 0f18 	cmp.w	ip, #24
 8009d60:	d91d      	bls.n	8009d9e <__gethex+0x132>
 8009d62:	f1bb 0f00 	cmp.w	fp, #0
 8009d66:	d000      	beq.n	8009d6a <__gethex+0xfe>
 8009d68:	4252      	negs	r2, r2
 8009d6a:	4416      	add	r6, r2
 8009d6c:	f8ca 1000 	str.w	r1, [sl]
 8009d70:	b1dc      	cbz	r4, 8009daa <__gethex+0x13e>
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bf14      	ite	ne
 8009d78:	f04f 0800 	movne.w	r8, #0
 8009d7c:	f04f 0806 	moveq.w	r8, #6
 8009d80:	4640      	mov	r0, r8
 8009d82:	b005      	add	sp, #20
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	4645      	mov	r5, r8
 8009d8a:	4626      	mov	r6, r4
 8009d8c:	2401      	movs	r4, #1
 8009d8e:	e7c7      	b.n	8009d20 <__gethex+0xb4>
 8009d90:	f04f 0b00 	mov.w	fp, #0
 8009d94:	1ca9      	adds	r1, r5, #2
 8009d96:	e7d0      	b.n	8009d3a <__gethex+0xce>
 8009d98:	f04f 0b01 	mov.w	fp, #1
 8009d9c:	e7fa      	b.n	8009d94 <__gethex+0x128>
 8009d9e:	230a      	movs	r3, #10
 8009da0:	fb03 0002 	mla	r0, r3, r2, r0
 8009da4:	e7d0      	b.n	8009d48 <__gethex+0xdc>
 8009da6:	4629      	mov	r1, r5
 8009da8:	e7e0      	b.n	8009d6c <__gethex+0x100>
 8009daa:	4621      	mov	r1, r4
 8009dac:	eba5 0308 	sub.w	r3, r5, r8
 8009db0:	3b01      	subs	r3, #1
 8009db2:	2b07      	cmp	r3, #7
 8009db4:	dc0a      	bgt.n	8009dcc <__gethex+0x160>
 8009db6:	4648      	mov	r0, r9
 8009db8:	f7fe f932 	bl	8008020 <_Balloc>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	b940      	cbnz	r0, 8009dd2 <__gethex+0x166>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	21e4      	movs	r1, #228	; 0xe4
 8009dc4:	4b61      	ldr	r3, [pc, #388]	; (8009f4c <__gethex+0x2e0>)
 8009dc6:	4862      	ldr	r0, [pc, #392]	; (8009f50 <__gethex+0x2e4>)
 8009dc8:	f7ff feb6 	bl	8009b38 <__assert_func>
 8009dcc:	3101      	adds	r1, #1
 8009dce:	105b      	asrs	r3, r3, #1
 8009dd0:	e7ef      	b.n	8009db2 <__gethex+0x146>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	469b      	mov	fp, r3
 8009dd6:	f100 0a14 	add.w	sl, r0, #20
 8009dda:	f8cd a004 	str.w	sl, [sp, #4]
 8009dde:	45a8      	cmp	r8, r5
 8009de0:	d344      	bcc.n	8009e6c <__gethex+0x200>
 8009de2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009de6:	4658      	mov	r0, fp
 8009de8:	f848 bb04 	str.w	fp, [r8], #4
 8009dec:	eba8 080a 	sub.w	r8, r8, sl
 8009df0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009df4:	6122      	str	r2, [r4, #16]
 8009df6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009dfa:	f7fe fa03 	bl	8008204 <__hi0bits>
 8009dfe:	683d      	ldr	r5, [r7, #0]
 8009e00:	eba8 0800 	sub.w	r8, r8, r0
 8009e04:	45a8      	cmp	r8, r5
 8009e06:	dd59      	ble.n	8009ebc <__gethex+0x250>
 8009e08:	eba8 0805 	sub.w	r8, r8, r5
 8009e0c:	4641      	mov	r1, r8
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7fe fd81 	bl	8008916 <__any_on>
 8009e14:	4683      	mov	fp, r0
 8009e16:	b1b8      	cbz	r0, 8009e48 <__gethex+0x1dc>
 8009e18:	f04f 0b01 	mov.w	fp, #1
 8009e1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e20:	1159      	asrs	r1, r3, #5
 8009e22:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e26:	f003 021f 	and.w	r2, r3, #31
 8009e2a:	fa0b f202 	lsl.w	r2, fp, r2
 8009e2e:	420a      	tst	r2, r1
 8009e30:	d00a      	beq.n	8009e48 <__gethex+0x1dc>
 8009e32:	455b      	cmp	r3, fp
 8009e34:	dd06      	ble.n	8009e44 <__gethex+0x1d8>
 8009e36:	4620      	mov	r0, r4
 8009e38:	f1a8 0102 	sub.w	r1, r8, #2
 8009e3c:	f7fe fd6b 	bl	8008916 <__any_on>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d138      	bne.n	8009eb6 <__gethex+0x24a>
 8009e44:	f04f 0b02 	mov.w	fp, #2
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff fea6 	bl	8009b9c <rshift>
 8009e50:	4446      	add	r6, r8
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	42b3      	cmp	r3, r6
 8009e56:	da41      	bge.n	8009edc <__gethex+0x270>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4648      	mov	r0, r9
 8009e5c:	f7fe f920 	bl	80080a0 <_Bfree>
 8009e60:	2300      	movs	r3, #0
 8009e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e64:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	e789      	b.n	8009d80 <__gethex+0x114>
 8009e6c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009e70:	2a2e      	cmp	r2, #46	; 0x2e
 8009e72:	d014      	beq.n	8009e9e <__gethex+0x232>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d106      	bne.n	8009e86 <__gethex+0x21a>
 8009e78:	9b01      	ldr	r3, [sp, #4]
 8009e7a:	f843 bb04 	str.w	fp, [r3], #4
 8009e7e:	f04f 0b00 	mov.w	fp, #0
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	465b      	mov	r3, fp
 8009e86:	7828      	ldrb	r0, [r5, #0]
 8009e88:	9303      	str	r3, [sp, #12]
 8009e8a:	f7ff feda 	bl	8009c42 <__hexdig_fun>
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	f000 000f 	and.w	r0, r0, #15
 8009e94:	4098      	lsls	r0, r3
 8009e96:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	e79f      	b.n	8009dde <__gethex+0x172>
 8009e9e:	45a8      	cmp	r8, r5
 8009ea0:	d8e8      	bhi.n	8009e74 <__gethex+0x208>
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	4928      	ldr	r1, [pc, #160]	; (8009f48 <__gethex+0x2dc>)
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	f7ff fe0f 	bl	8009acc <strncmp>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d1df      	bne.n	8009e74 <__gethex+0x208>
 8009eb4:	e793      	b.n	8009dde <__gethex+0x172>
 8009eb6:	f04f 0b03 	mov.w	fp, #3
 8009eba:	e7c5      	b.n	8009e48 <__gethex+0x1dc>
 8009ebc:	da0b      	bge.n	8009ed6 <__gethex+0x26a>
 8009ebe:	eba5 0808 	sub.w	r8, r5, r8
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f7fe fb02 	bl	80084d0 <__lshift>
 8009ecc:	4604      	mov	r4, r0
 8009ece:	eba6 0608 	sub.w	r6, r6, r8
 8009ed2:	f100 0a14 	add.w	sl, r0, #20
 8009ed6:	f04f 0b00 	mov.w	fp, #0
 8009eda:	e7ba      	b.n	8009e52 <__gethex+0x1e6>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	42b3      	cmp	r3, r6
 8009ee0:	dd74      	ble.n	8009fcc <__gethex+0x360>
 8009ee2:	1b9e      	subs	r6, r3, r6
 8009ee4:	42b5      	cmp	r5, r6
 8009ee6:	dc35      	bgt.n	8009f54 <__gethex+0x2e8>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d023      	beq.n	8009f36 <__gethex+0x2ca>
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d025      	beq.n	8009f3e <__gethex+0x2d2>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d115      	bne.n	8009f22 <__gethex+0x2b6>
 8009ef6:	42b5      	cmp	r5, r6
 8009ef8:	d113      	bne.n	8009f22 <__gethex+0x2b6>
 8009efa:	2d01      	cmp	r5, #1
 8009efc:	d10b      	bne.n	8009f16 <__gethex+0x2aa>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	9a02      	ldr	r2, [sp, #8]
 8009f02:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	2301      	movs	r3, #1
 8009f0a:	6123      	str	r3, [r4, #16]
 8009f0c:	f8ca 3000 	str.w	r3, [sl]
 8009f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f12:	601c      	str	r4, [r3, #0]
 8009f14:	e734      	b.n	8009d80 <__gethex+0x114>
 8009f16:	4620      	mov	r0, r4
 8009f18:	1e69      	subs	r1, r5, #1
 8009f1a:	f7fe fcfc 	bl	8008916 <__any_on>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d1ed      	bne.n	8009efe <__gethex+0x292>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4648      	mov	r0, r9
 8009f26:	f7fe f8bb 	bl	80080a0 <_Bfree>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f2e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	e724      	b.n	8009d80 <__gethex+0x114>
 8009f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f2      	bne.n	8009f22 <__gethex+0x2b6>
 8009f3c:	e7df      	b.n	8009efe <__gethex+0x292>
 8009f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1dc      	bne.n	8009efe <__gethex+0x292>
 8009f44:	e7ed      	b.n	8009f22 <__gethex+0x2b6>
 8009f46:	bf00      	nop
 8009f48:	0800ab6c 	.word	0x0800ab6c
 8009f4c:	0800aa03 	.word	0x0800aa03
 8009f50:	0800ad16 	.word	0x0800ad16
 8009f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8009f58:	f1bb 0f00 	cmp.w	fp, #0
 8009f5c:	d133      	bne.n	8009fc6 <__gethex+0x35a>
 8009f5e:	f1b8 0f00 	cmp.w	r8, #0
 8009f62:	d004      	beq.n	8009f6e <__gethex+0x302>
 8009f64:	4641      	mov	r1, r8
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7fe fcd5 	bl	8008916 <__any_on>
 8009f6c:	4683      	mov	fp, r0
 8009f6e:	2301      	movs	r3, #1
 8009f70:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009f74:	f008 081f 	and.w	r8, r8, #31
 8009f78:	fa03 f308 	lsl.w	r3, r3, r8
 8009f7c:	f04f 0802 	mov.w	r8, #2
 8009f80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f84:	4631      	mov	r1, r6
 8009f86:	4213      	tst	r3, r2
 8009f88:	4620      	mov	r0, r4
 8009f8a:	bf18      	it	ne
 8009f8c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009f90:	1bad      	subs	r5, r5, r6
 8009f92:	f7ff fe03 	bl	8009b9c <rshift>
 8009f96:	687e      	ldr	r6, [r7, #4]
 8009f98:	f1bb 0f00 	cmp.w	fp, #0
 8009f9c:	d04a      	beq.n	800a034 <__gethex+0x3c8>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d016      	beq.n	8009fd2 <__gethex+0x366>
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d018      	beq.n	8009fda <__gethex+0x36e>
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d109      	bne.n	8009fc0 <__gethex+0x354>
 8009fac:	f01b 0f02 	tst.w	fp, #2
 8009fb0:	d006      	beq.n	8009fc0 <__gethex+0x354>
 8009fb2:	f8da 3000 	ldr.w	r3, [sl]
 8009fb6:	ea4b 0b03 	orr.w	fp, fp, r3
 8009fba:	f01b 0f01 	tst.w	fp, #1
 8009fbe:	d10f      	bne.n	8009fe0 <__gethex+0x374>
 8009fc0:	f048 0810 	orr.w	r8, r8, #16
 8009fc4:	e036      	b.n	800a034 <__gethex+0x3c8>
 8009fc6:	f04f 0b01 	mov.w	fp, #1
 8009fca:	e7d0      	b.n	8009f6e <__gethex+0x302>
 8009fcc:	f04f 0801 	mov.w	r8, #1
 8009fd0:	e7e2      	b.n	8009f98 <__gethex+0x32c>
 8009fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd4:	f1c3 0301 	rsb	r3, r3, #1
 8009fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0ef      	beq.n	8009fc0 <__gethex+0x354>
 8009fe0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fe4:	f104 0214 	add.w	r2, r4, #20
 8009fe8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009ff4:	4694      	mov	ip, r2
 8009ff6:	f852 1b04 	ldr.w	r1, [r2], #4
 8009ffa:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009ffe:	d01e      	beq.n	800a03e <__gethex+0x3d2>
 800a000:	3101      	adds	r1, #1
 800a002:	f8cc 1000 	str.w	r1, [ip]
 800a006:	f1b8 0f02 	cmp.w	r8, #2
 800a00a:	f104 0214 	add.w	r2, r4, #20
 800a00e:	d13d      	bne.n	800a08c <__gethex+0x420>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	3b01      	subs	r3, #1
 800a014:	42ab      	cmp	r3, r5
 800a016:	d10b      	bne.n	800a030 <__gethex+0x3c4>
 800a018:	2301      	movs	r3, #1
 800a01a:	1169      	asrs	r1, r5, #5
 800a01c:	f005 051f 	and.w	r5, r5, #31
 800a020:	fa03 f505 	lsl.w	r5, r3, r5
 800a024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a028:	421d      	tst	r5, r3
 800a02a:	bf18      	it	ne
 800a02c:	f04f 0801 	movne.w	r8, #1
 800a030:	f048 0820 	orr.w	r8, r8, #32
 800a034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a036:	601c      	str	r4, [r3, #0]
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	601e      	str	r6, [r3, #0]
 800a03c:	e6a0      	b.n	8009d80 <__gethex+0x114>
 800a03e:	4290      	cmp	r0, r2
 800a040:	f842 3c04 	str.w	r3, [r2, #-4]
 800a044:	d8d6      	bhi.n	8009ff4 <__gethex+0x388>
 800a046:	68a2      	ldr	r2, [r4, #8]
 800a048:	4593      	cmp	fp, r2
 800a04a:	db17      	blt.n	800a07c <__gethex+0x410>
 800a04c:	6861      	ldr	r1, [r4, #4]
 800a04e:	4648      	mov	r0, r9
 800a050:	3101      	adds	r1, #1
 800a052:	f7fd ffe5 	bl	8008020 <_Balloc>
 800a056:	4682      	mov	sl, r0
 800a058:	b918      	cbnz	r0, 800a062 <__gethex+0x3f6>
 800a05a:	4602      	mov	r2, r0
 800a05c:	2184      	movs	r1, #132	; 0x84
 800a05e:	4b1a      	ldr	r3, [pc, #104]	; (800a0c8 <__gethex+0x45c>)
 800a060:	e6b1      	b.n	8009dc6 <__gethex+0x15a>
 800a062:	6922      	ldr	r2, [r4, #16]
 800a064:	f104 010c 	add.w	r1, r4, #12
 800a068:	3202      	adds	r2, #2
 800a06a:	0092      	lsls	r2, r2, #2
 800a06c:	300c      	adds	r0, #12
 800a06e:	f7ff fd4f 	bl	8009b10 <memcpy>
 800a072:	4621      	mov	r1, r4
 800a074:	4648      	mov	r0, r9
 800a076:	f7fe f813 	bl	80080a0 <_Bfree>
 800a07a:	4654      	mov	r4, sl
 800a07c:	6922      	ldr	r2, [r4, #16]
 800a07e:	1c51      	adds	r1, r2, #1
 800a080:	6121      	str	r1, [r4, #16]
 800a082:	2101      	movs	r1, #1
 800a084:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a088:	6151      	str	r1, [r2, #20]
 800a08a:	e7bc      	b.n	800a006 <__gethex+0x39a>
 800a08c:	6921      	ldr	r1, [r4, #16]
 800a08e:	4559      	cmp	r1, fp
 800a090:	dd0b      	ble.n	800a0aa <__gethex+0x43e>
 800a092:	2101      	movs	r1, #1
 800a094:	4620      	mov	r0, r4
 800a096:	f7ff fd81 	bl	8009b9c <rshift>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	3601      	adds	r6, #1
 800a09e:	42b3      	cmp	r3, r6
 800a0a0:	f6ff aeda 	blt.w	8009e58 <__gethex+0x1ec>
 800a0a4:	f04f 0801 	mov.w	r8, #1
 800a0a8:	e7c2      	b.n	800a030 <__gethex+0x3c4>
 800a0aa:	f015 051f 	ands.w	r5, r5, #31
 800a0ae:	d0f9      	beq.n	800a0a4 <__gethex+0x438>
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	f1c5 0520 	rsb	r5, r5, #32
 800a0b6:	441a      	add	r2, r3
 800a0b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a0bc:	f7fe f8a2 	bl	8008204 <__hi0bits>
 800a0c0:	42a8      	cmp	r0, r5
 800a0c2:	dbe6      	blt.n	800a092 <__gethex+0x426>
 800a0c4:	e7ee      	b.n	800a0a4 <__gethex+0x438>
 800a0c6:	bf00      	nop
 800a0c8:	0800aa03 	.word	0x0800aa03

0800a0cc <L_shift>:
 800a0cc:	f1c2 0208 	rsb	r2, r2, #8
 800a0d0:	0092      	lsls	r2, r2, #2
 800a0d2:	b570      	push	{r4, r5, r6, lr}
 800a0d4:	f1c2 0620 	rsb	r6, r2, #32
 800a0d8:	6843      	ldr	r3, [r0, #4]
 800a0da:	6804      	ldr	r4, [r0, #0]
 800a0dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a0e0:	432c      	orrs	r4, r5
 800a0e2:	40d3      	lsrs	r3, r2
 800a0e4:	6004      	str	r4, [r0, #0]
 800a0e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0ea:	4288      	cmp	r0, r1
 800a0ec:	d3f4      	bcc.n	800a0d8 <L_shift+0xc>
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}

0800a0f0 <__match>:
 800a0f0:	b530      	push	{r4, r5, lr}
 800a0f2:	6803      	ldr	r3, [r0, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0fa:	b914      	cbnz	r4, 800a102 <__match+0x12>
 800a0fc:	6003      	str	r3, [r0, #0]
 800a0fe:	2001      	movs	r0, #1
 800a100:	bd30      	pop	{r4, r5, pc}
 800a102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a106:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a10a:	2d19      	cmp	r5, #25
 800a10c:	bf98      	it	ls
 800a10e:	3220      	addls	r2, #32
 800a110:	42a2      	cmp	r2, r4
 800a112:	d0f0      	beq.n	800a0f6 <__match+0x6>
 800a114:	2000      	movs	r0, #0
 800a116:	e7f3      	b.n	800a100 <__match+0x10>

0800a118 <__hexnan>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	2500      	movs	r5, #0
 800a11e:	680b      	ldr	r3, [r1, #0]
 800a120:	4682      	mov	sl, r0
 800a122:	115e      	asrs	r6, r3, #5
 800a124:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a128:	f013 031f 	ands.w	r3, r3, #31
 800a12c:	bf18      	it	ne
 800a12e:	3604      	addne	r6, #4
 800a130:	1f37      	subs	r7, r6, #4
 800a132:	4690      	mov	r8, r2
 800a134:	46b9      	mov	r9, r7
 800a136:	463c      	mov	r4, r7
 800a138:	46ab      	mov	fp, r5
 800a13a:	b087      	sub	sp, #28
 800a13c:	6801      	ldr	r1, [r0, #0]
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	f846 5c04 	str.w	r5, [r6, #-4]
 800a144:	9502      	str	r5, [sp, #8]
 800a146:	784a      	ldrb	r2, [r1, #1]
 800a148:	1c4b      	adds	r3, r1, #1
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	b342      	cbz	r2, 800a1a0 <__hexnan+0x88>
 800a14e:	4610      	mov	r0, r2
 800a150:	9105      	str	r1, [sp, #20]
 800a152:	9204      	str	r2, [sp, #16]
 800a154:	f7ff fd75 	bl	8009c42 <__hexdig_fun>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d14f      	bne.n	800a1fc <__hexnan+0xe4>
 800a15c:	9a04      	ldr	r2, [sp, #16]
 800a15e:	9905      	ldr	r1, [sp, #20]
 800a160:	2a20      	cmp	r2, #32
 800a162:	d818      	bhi.n	800a196 <__hexnan+0x7e>
 800a164:	9b02      	ldr	r3, [sp, #8]
 800a166:	459b      	cmp	fp, r3
 800a168:	dd13      	ble.n	800a192 <__hexnan+0x7a>
 800a16a:	454c      	cmp	r4, r9
 800a16c:	d206      	bcs.n	800a17c <__hexnan+0x64>
 800a16e:	2d07      	cmp	r5, #7
 800a170:	dc04      	bgt.n	800a17c <__hexnan+0x64>
 800a172:	462a      	mov	r2, r5
 800a174:	4649      	mov	r1, r9
 800a176:	4620      	mov	r0, r4
 800a178:	f7ff ffa8 	bl	800a0cc <L_shift>
 800a17c:	4544      	cmp	r4, r8
 800a17e:	d950      	bls.n	800a222 <__hexnan+0x10a>
 800a180:	2300      	movs	r3, #0
 800a182:	f1a4 0904 	sub.w	r9, r4, #4
 800a186:	f844 3c04 	str.w	r3, [r4, #-4]
 800a18a:	461d      	mov	r5, r3
 800a18c:	464c      	mov	r4, r9
 800a18e:	f8cd b008 	str.w	fp, [sp, #8]
 800a192:	9903      	ldr	r1, [sp, #12]
 800a194:	e7d7      	b.n	800a146 <__hexnan+0x2e>
 800a196:	2a29      	cmp	r2, #41	; 0x29
 800a198:	d155      	bne.n	800a246 <__hexnan+0x12e>
 800a19a:	3102      	adds	r1, #2
 800a19c:	f8ca 1000 	str.w	r1, [sl]
 800a1a0:	f1bb 0f00 	cmp.w	fp, #0
 800a1a4:	d04f      	beq.n	800a246 <__hexnan+0x12e>
 800a1a6:	454c      	cmp	r4, r9
 800a1a8:	d206      	bcs.n	800a1b8 <__hexnan+0xa0>
 800a1aa:	2d07      	cmp	r5, #7
 800a1ac:	dc04      	bgt.n	800a1b8 <__hexnan+0xa0>
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f7ff ff8a 	bl	800a0cc <L_shift>
 800a1b8:	4544      	cmp	r4, r8
 800a1ba:	d934      	bls.n	800a226 <__hexnan+0x10e>
 800a1bc:	4623      	mov	r3, r4
 800a1be:	f1a8 0204 	sub.w	r2, r8, #4
 800a1c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1c6:	429f      	cmp	r7, r3
 800a1c8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1cc:	d2f9      	bcs.n	800a1c2 <__hexnan+0xaa>
 800a1ce:	1b3b      	subs	r3, r7, r4
 800a1d0:	f023 0303 	bic.w	r3, r3, #3
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	3e03      	subs	r6, #3
 800a1d8:	3401      	adds	r4, #1
 800a1da:	42a6      	cmp	r6, r4
 800a1dc:	bf38      	it	cc
 800a1de:	2304      	movcc	r3, #4
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4443      	add	r3, r8
 800a1e4:	f843 2b04 	str.w	r2, [r3], #4
 800a1e8:	429f      	cmp	r7, r3
 800a1ea:	d2fb      	bcs.n	800a1e4 <__hexnan+0xcc>
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	b91b      	cbnz	r3, 800a1f8 <__hexnan+0xe0>
 800a1f0:	4547      	cmp	r7, r8
 800a1f2:	d126      	bne.n	800a242 <__hexnan+0x12a>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	2005      	movs	r0, #5
 800a1fa:	e025      	b.n	800a248 <__hexnan+0x130>
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	2d08      	cmp	r5, #8
 800a200:	f10b 0b01 	add.w	fp, fp, #1
 800a204:	dd06      	ble.n	800a214 <__hexnan+0xfc>
 800a206:	4544      	cmp	r4, r8
 800a208:	d9c3      	bls.n	800a192 <__hexnan+0x7a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	2501      	movs	r5, #1
 800a20e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a212:	3c04      	subs	r4, #4
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	f000 000f 	and.w	r0, r0, #15
 800a21a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a21e:	6020      	str	r0, [r4, #0]
 800a220:	e7b7      	b.n	800a192 <__hexnan+0x7a>
 800a222:	2508      	movs	r5, #8
 800a224:	e7b5      	b.n	800a192 <__hexnan+0x7a>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d0df      	beq.n	800a1ec <__hexnan+0xd4>
 800a22c:	f04f 32ff 	mov.w	r2, #4294967295
 800a230:	f1c3 0320 	rsb	r3, r3, #32
 800a234:	40da      	lsrs	r2, r3
 800a236:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a23a:	4013      	ands	r3, r2
 800a23c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a240:	e7d4      	b.n	800a1ec <__hexnan+0xd4>
 800a242:	3f04      	subs	r7, #4
 800a244:	e7d2      	b.n	800a1ec <__hexnan+0xd4>
 800a246:	2004      	movs	r0, #4
 800a248:	b007      	add	sp, #28
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a24e <__ascii_mbtowc>:
 800a24e:	b082      	sub	sp, #8
 800a250:	b901      	cbnz	r1, 800a254 <__ascii_mbtowc+0x6>
 800a252:	a901      	add	r1, sp, #4
 800a254:	b142      	cbz	r2, 800a268 <__ascii_mbtowc+0x1a>
 800a256:	b14b      	cbz	r3, 800a26c <__ascii_mbtowc+0x1e>
 800a258:	7813      	ldrb	r3, [r2, #0]
 800a25a:	600b      	str	r3, [r1, #0]
 800a25c:	7812      	ldrb	r2, [r2, #0]
 800a25e:	1e10      	subs	r0, r2, #0
 800a260:	bf18      	it	ne
 800a262:	2001      	movne	r0, #1
 800a264:	b002      	add	sp, #8
 800a266:	4770      	bx	lr
 800a268:	4610      	mov	r0, r2
 800a26a:	e7fb      	b.n	800a264 <__ascii_mbtowc+0x16>
 800a26c:	f06f 0001 	mvn.w	r0, #1
 800a270:	e7f8      	b.n	800a264 <__ascii_mbtowc+0x16>

0800a272 <_realloc_r>:
 800a272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a276:	4680      	mov	r8, r0
 800a278:	4614      	mov	r4, r2
 800a27a:	460e      	mov	r6, r1
 800a27c:	b921      	cbnz	r1, 800a288 <_realloc_r+0x16>
 800a27e:	4611      	mov	r1, r2
 800a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a284:	f7fd be40 	b.w	8007f08 <_malloc_r>
 800a288:	b92a      	cbnz	r2, 800a296 <_realloc_r+0x24>
 800a28a:	f7fd fdcd 	bl	8007e28 <_free_r>
 800a28e:	4625      	mov	r5, r4
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a296:	f000 f842 	bl	800a31e <_malloc_usable_size_r>
 800a29a:	4284      	cmp	r4, r0
 800a29c:	4607      	mov	r7, r0
 800a29e:	d802      	bhi.n	800a2a6 <_realloc_r+0x34>
 800a2a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a4:	d812      	bhi.n	800a2cc <_realloc_r+0x5a>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	f7fd fe2d 	bl	8007f08 <_malloc_r>
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d0ed      	beq.n	800a290 <_realloc_r+0x1e>
 800a2b4:	42bc      	cmp	r4, r7
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	bf28      	it	cs
 800a2bc:	463a      	movcs	r2, r7
 800a2be:	f7ff fc27 	bl	8009b10 <memcpy>
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	f7fd fdaf 	bl	8007e28 <_free_r>
 800a2ca:	e7e1      	b.n	800a290 <_realloc_r+0x1e>
 800a2cc:	4635      	mov	r5, r6
 800a2ce:	e7df      	b.n	800a290 <_realloc_r+0x1e>

0800a2d0 <__ascii_wctomb>:
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	b141      	cbz	r1, 800a2e8 <__ascii_wctomb+0x18>
 800a2d6:	2aff      	cmp	r2, #255	; 0xff
 800a2d8:	d904      	bls.n	800a2e4 <__ascii_wctomb+0x14>
 800a2da:	228a      	movs	r2, #138	; 0x8a
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	4770      	bx	lr
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	700a      	strb	r2, [r1, #0]
 800a2e8:	4770      	bx	lr
	...

0800a2ec <fiprintf>:
 800a2ec:	b40e      	push	{r1, r2, r3}
 800a2ee:	b503      	push	{r0, r1, lr}
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	ab03      	add	r3, sp, #12
 800a2f4:	4805      	ldr	r0, [pc, #20]	; (800a30c <fiprintf+0x20>)
 800a2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fa:	6800      	ldr	r0, [r0, #0]
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	f000 f83d 	bl	800a37c <_vfiprintf_r>
 800a302:	b002      	add	sp, #8
 800a304:	f85d eb04 	ldr.w	lr, [sp], #4
 800a308:	b003      	add	sp, #12
 800a30a:	4770      	bx	lr
 800a30c:	2000006c 	.word	0x2000006c

0800a310 <abort>:
 800a310:	2006      	movs	r0, #6
 800a312:	b508      	push	{r3, lr}
 800a314:	f000 fa0a 	bl	800a72c <raise>
 800a318:	2001      	movs	r0, #1
 800a31a:	f7f7 fd90 	bl	8001e3e <_exit>

0800a31e <_malloc_usable_size_r>:
 800a31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a322:	1f18      	subs	r0, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	bfbc      	itt	lt
 800a328:	580b      	ldrlt	r3, [r1, r0]
 800a32a:	18c0      	addlt	r0, r0, r3
 800a32c:	4770      	bx	lr

0800a32e <__sfputc_r>:
 800a32e:	6893      	ldr	r3, [r2, #8]
 800a330:	b410      	push	{r4}
 800a332:	3b01      	subs	r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	6093      	str	r3, [r2, #8]
 800a338:	da07      	bge.n	800a34a <__sfputc_r+0x1c>
 800a33a:	6994      	ldr	r4, [r2, #24]
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	db01      	blt.n	800a344 <__sfputc_r+0x16>
 800a340:	290a      	cmp	r1, #10
 800a342:	d102      	bne.n	800a34a <__sfputc_r+0x1c>
 800a344:	bc10      	pop	{r4}
 800a346:	f000 b933 	b.w	800a5b0 <__swbuf_r>
 800a34a:	6813      	ldr	r3, [r2, #0]
 800a34c:	1c58      	adds	r0, r3, #1
 800a34e:	6010      	str	r0, [r2, #0]
 800a350:	7019      	strb	r1, [r3, #0]
 800a352:	4608      	mov	r0, r1
 800a354:	bc10      	pop	{r4}
 800a356:	4770      	bx	lr

0800a358 <__sfputs_r>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	4606      	mov	r6, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	4614      	mov	r4, r2
 800a360:	18d5      	adds	r5, r2, r3
 800a362:	42ac      	cmp	r4, r5
 800a364:	d101      	bne.n	800a36a <__sfputs_r+0x12>
 800a366:	2000      	movs	r0, #0
 800a368:	e007      	b.n	800a37a <__sfputs_r+0x22>
 800a36a:	463a      	mov	r2, r7
 800a36c:	4630      	mov	r0, r6
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	f7ff ffdc 	bl	800a32e <__sfputc_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d1f3      	bne.n	800a362 <__sfputs_r+0xa>
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a37c <_vfiprintf_r>:
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	460d      	mov	r5, r1
 800a382:	4614      	mov	r4, r2
 800a384:	4698      	mov	r8, r3
 800a386:	4606      	mov	r6, r0
 800a388:	b09d      	sub	sp, #116	; 0x74
 800a38a:	b118      	cbz	r0, 800a394 <_vfiprintf_r+0x18>
 800a38c:	6a03      	ldr	r3, [r0, #32]
 800a38e:	b90b      	cbnz	r3, 800a394 <_vfiprintf_r+0x18>
 800a390:	f7fc fdae 	bl	8006ef0 <__sinit>
 800a394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a396:	07d9      	lsls	r1, r3, #31
 800a398:	d405      	bmi.n	800a3a6 <_vfiprintf_r+0x2a>
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	059a      	lsls	r2, r3, #22
 800a39e:	d402      	bmi.n	800a3a6 <_vfiprintf_r+0x2a>
 800a3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a2:	f7fc febc 	bl	800711e <__retarget_lock_acquire_recursive>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	071b      	lsls	r3, r3, #28
 800a3aa:	d501      	bpl.n	800a3b0 <_vfiprintf_r+0x34>
 800a3ac:	692b      	ldr	r3, [r5, #16]
 800a3ae:	b99b      	cbnz	r3, 800a3d8 <_vfiprintf_r+0x5c>
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f000 f93a 	bl	800a62c <__swsetup_r>
 800a3b8:	b170      	cbz	r0, 800a3d8 <_vfiprintf_r+0x5c>
 800a3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3bc:	07dc      	lsls	r4, r3, #31
 800a3be:	d504      	bpl.n	800a3ca <_vfiprintf_r+0x4e>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	b01d      	add	sp, #116	; 0x74
 800a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	0598      	lsls	r0, r3, #22
 800a3ce:	d4f7      	bmi.n	800a3c0 <_vfiprintf_r+0x44>
 800a3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3d2:	f7fc fea5 	bl	8007120 <__retarget_lock_release_recursive>
 800a3d6:	e7f3      	b.n	800a3c0 <_vfiprintf_r+0x44>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9309      	str	r3, [sp, #36]	; 0x24
 800a3dc:	2320      	movs	r3, #32
 800a3de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e2:	2330      	movs	r3, #48	; 0x30
 800a3e4:	f04f 0901 	mov.w	r9, #1
 800a3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a59c <_vfiprintf_r+0x220>
 800a3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	469a      	mov	sl, r3
 800a3f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fc:	b10a      	cbz	r2, 800a402 <_vfiprintf_r+0x86>
 800a3fe:	2a25      	cmp	r2, #37	; 0x25
 800a400:	d1f9      	bne.n	800a3f6 <_vfiprintf_r+0x7a>
 800a402:	ebba 0b04 	subs.w	fp, sl, r4
 800a406:	d00b      	beq.n	800a420 <_vfiprintf_r+0xa4>
 800a408:	465b      	mov	r3, fp
 800a40a:	4622      	mov	r2, r4
 800a40c:	4629      	mov	r1, r5
 800a40e:	4630      	mov	r0, r6
 800a410:	f7ff ffa2 	bl	800a358 <__sfputs_r>
 800a414:	3001      	adds	r0, #1
 800a416:	f000 80a9 	beq.w	800a56c <_vfiprintf_r+0x1f0>
 800a41a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a41c:	445a      	add	r2, fp
 800a41e:	9209      	str	r2, [sp, #36]	; 0x24
 800a420:	f89a 3000 	ldrb.w	r3, [sl]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 80a1 	beq.w	800a56c <_vfiprintf_r+0x1f0>
 800a42a:	2300      	movs	r3, #0
 800a42c:	f04f 32ff 	mov.w	r2, #4294967295
 800a430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a434:	f10a 0a01 	add.w	sl, sl, #1
 800a438:	9304      	str	r3, [sp, #16]
 800a43a:	9307      	str	r3, [sp, #28]
 800a43c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a440:	931a      	str	r3, [sp, #104]	; 0x68
 800a442:	4654      	mov	r4, sl
 800a444:	2205      	movs	r2, #5
 800a446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44a:	4854      	ldr	r0, [pc, #336]	; (800a59c <_vfiprintf_r+0x220>)
 800a44c:	f7fc fe69 	bl	8007122 <memchr>
 800a450:	9a04      	ldr	r2, [sp, #16]
 800a452:	b9d8      	cbnz	r0, 800a48c <_vfiprintf_r+0x110>
 800a454:	06d1      	lsls	r1, r2, #27
 800a456:	bf44      	itt	mi
 800a458:	2320      	movmi	r3, #32
 800a45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45e:	0713      	lsls	r3, r2, #28
 800a460:	bf44      	itt	mi
 800a462:	232b      	movmi	r3, #43	; 0x2b
 800a464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a468:	f89a 3000 	ldrb.w	r3, [sl]
 800a46c:	2b2a      	cmp	r3, #42	; 0x2a
 800a46e:	d015      	beq.n	800a49c <_vfiprintf_r+0x120>
 800a470:	4654      	mov	r4, sl
 800a472:	2000      	movs	r0, #0
 800a474:	f04f 0c0a 	mov.w	ip, #10
 800a478:	9a07      	ldr	r2, [sp, #28]
 800a47a:	4621      	mov	r1, r4
 800a47c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a480:	3b30      	subs	r3, #48	; 0x30
 800a482:	2b09      	cmp	r3, #9
 800a484:	d94d      	bls.n	800a522 <_vfiprintf_r+0x1a6>
 800a486:	b1b0      	cbz	r0, 800a4b6 <_vfiprintf_r+0x13a>
 800a488:	9207      	str	r2, [sp, #28]
 800a48a:	e014      	b.n	800a4b6 <_vfiprintf_r+0x13a>
 800a48c:	eba0 0308 	sub.w	r3, r0, r8
 800a490:	fa09 f303 	lsl.w	r3, r9, r3
 800a494:	4313      	orrs	r3, r2
 800a496:	46a2      	mov	sl, r4
 800a498:	9304      	str	r3, [sp, #16]
 800a49a:	e7d2      	b.n	800a442 <_vfiprintf_r+0xc6>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1d19      	adds	r1, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	9103      	str	r1, [sp, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bfbb      	ittet	lt
 800a4a8:	425b      	neglt	r3, r3
 800a4aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ae:	9307      	strge	r3, [sp, #28]
 800a4b0:	9307      	strlt	r3, [sp, #28]
 800a4b2:	bfb8      	it	lt
 800a4b4:	9204      	strlt	r2, [sp, #16]
 800a4b6:	7823      	ldrb	r3, [r4, #0]
 800a4b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ba:	d10c      	bne.n	800a4d6 <_vfiprintf_r+0x15a>
 800a4bc:	7863      	ldrb	r3, [r4, #1]
 800a4be:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c0:	d134      	bne.n	800a52c <_vfiprintf_r+0x1b0>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	3402      	adds	r4, #2
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	9203      	str	r2, [sp, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bfb8      	it	lt
 800a4d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5a0 <_vfiprintf_r+0x224>
 800a4da:	2203      	movs	r2, #3
 800a4dc:	4650      	mov	r0, sl
 800a4de:	7821      	ldrb	r1, [r4, #0]
 800a4e0:	f7fc fe1f 	bl	8007122 <memchr>
 800a4e4:	b138      	cbz	r0, 800a4f6 <_vfiprintf_r+0x17a>
 800a4e6:	2240      	movs	r2, #64	; 0x40
 800a4e8:	9b04      	ldr	r3, [sp, #16]
 800a4ea:	eba0 000a 	sub.w	r0, r0, sl
 800a4ee:	4082      	lsls	r2, r0
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fa:	2206      	movs	r2, #6
 800a4fc:	4829      	ldr	r0, [pc, #164]	; (800a5a4 <_vfiprintf_r+0x228>)
 800a4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a502:	f7fc fe0e 	bl	8007122 <memchr>
 800a506:	2800      	cmp	r0, #0
 800a508:	d03f      	beq.n	800a58a <_vfiprintf_r+0x20e>
 800a50a:	4b27      	ldr	r3, [pc, #156]	; (800a5a8 <_vfiprintf_r+0x22c>)
 800a50c:	bb1b      	cbnz	r3, 800a556 <_vfiprintf_r+0x1da>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	3307      	adds	r3, #7
 800a512:	f023 0307 	bic.w	r3, r3, #7
 800a516:	3308      	adds	r3, #8
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51c:	443b      	add	r3, r7
 800a51e:	9309      	str	r3, [sp, #36]	; 0x24
 800a520:	e768      	b.n	800a3f4 <_vfiprintf_r+0x78>
 800a522:	460c      	mov	r4, r1
 800a524:	2001      	movs	r0, #1
 800a526:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52a:	e7a6      	b.n	800a47a <_vfiprintf_r+0xfe>
 800a52c:	2300      	movs	r3, #0
 800a52e:	f04f 0c0a 	mov.w	ip, #10
 800a532:	4619      	mov	r1, r3
 800a534:	3401      	adds	r4, #1
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4620      	mov	r0, r4
 800a53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a53e:	3a30      	subs	r2, #48	; 0x30
 800a540:	2a09      	cmp	r2, #9
 800a542:	d903      	bls.n	800a54c <_vfiprintf_r+0x1d0>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0c6      	beq.n	800a4d6 <_vfiprintf_r+0x15a>
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	e7c4      	b.n	800a4d6 <_vfiprintf_r+0x15a>
 800a54c:	4604      	mov	r4, r0
 800a54e:	2301      	movs	r3, #1
 800a550:	fb0c 2101 	mla	r1, ip, r1, r2
 800a554:	e7f0      	b.n	800a538 <_vfiprintf_r+0x1bc>
 800a556:	ab03      	add	r3, sp, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4630      	mov	r0, r6
 800a55e:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <_vfiprintf_r+0x230>)
 800a560:	a904      	add	r1, sp, #16
 800a562:	f7fb fe69 	bl	8006238 <_printf_float>
 800a566:	4607      	mov	r7, r0
 800a568:	1c78      	adds	r0, r7, #1
 800a56a:	d1d6      	bne.n	800a51a <_vfiprintf_r+0x19e>
 800a56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d405      	bmi.n	800a57e <_vfiprintf_r+0x202>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d402      	bmi.n	800a57e <_vfiprintf_r+0x202>
 800a578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a57a:	f7fc fdd1 	bl	8007120 <__retarget_lock_release_recursive>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	065b      	lsls	r3, r3, #25
 800a582:	f53f af1d 	bmi.w	800a3c0 <_vfiprintf_r+0x44>
 800a586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a588:	e71c      	b.n	800a3c4 <_vfiprintf_r+0x48>
 800a58a:	ab03      	add	r3, sp, #12
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	462a      	mov	r2, r5
 800a590:	4630      	mov	r0, r6
 800a592:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <_vfiprintf_r+0x230>)
 800a594:	a904      	add	r1, sp, #16
 800a596:	f7fc f8ef 	bl	8006778 <_printf_i>
 800a59a:	e7e4      	b.n	800a566 <_vfiprintf_r+0x1ea>
 800a59c:	0800acc1 	.word	0x0800acc1
 800a5a0:	0800acc7 	.word	0x0800acc7
 800a5a4:	0800accb 	.word	0x0800accb
 800a5a8:	08006239 	.word	0x08006239
 800a5ac:	0800a359 	.word	0x0800a359

0800a5b0 <__swbuf_r>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	460e      	mov	r6, r1
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b118      	cbz	r0, 800a5c2 <__swbuf_r+0x12>
 800a5ba:	6a03      	ldr	r3, [r0, #32]
 800a5bc:	b90b      	cbnz	r3, 800a5c2 <__swbuf_r+0x12>
 800a5be:	f7fc fc97 	bl	8006ef0 <__sinit>
 800a5c2:	69a3      	ldr	r3, [r4, #24]
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	071a      	lsls	r2, r3, #28
 800a5ca:	d525      	bpl.n	800a618 <__swbuf_r+0x68>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	b31b      	cbz	r3, 800a618 <__swbuf_r+0x68>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	6922      	ldr	r2, [r4, #16]
 800a5d4:	b2f6      	uxtb	r6, r6
 800a5d6:	1a98      	subs	r0, r3, r2
 800a5d8:	6963      	ldr	r3, [r4, #20]
 800a5da:	4637      	mov	r7, r6
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	dc04      	bgt.n	800a5ea <__swbuf_r+0x3a>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f7ff fa30 	bl	8009a48 <_fflush_r>
 800a5e8:	b9e0      	cbnz	r0, 800a624 <__swbuf_r+0x74>
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	6022      	str	r2, [r4, #0]
 800a5f6:	701e      	strb	r6, [r3, #0]
 800a5f8:	6962      	ldr	r2, [r4, #20]
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d004      	beq.n	800a60a <__swbuf_r+0x5a>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	07db      	lsls	r3, r3, #31
 800a604:	d506      	bpl.n	800a614 <__swbuf_r+0x64>
 800a606:	2e0a      	cmp	r6, #10
 800a608:	d104      	bne.n	800a614 <__swbuf_r+0x64>
 800a60a:	4621      	mov	r1, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	f7ff fa1b 	bl	8009a48 <_fflush_r>
 800a612:	b938      	cbnz	r0, 800a624 <__swbuf_r+0x74>
 800a614:	4638      	mov	r0, r7
 800a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 f806 	bl	800a62c <__swsetup_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	d0d5      	beq.n	800a5d0 <__swbuf_r+0x20>
 800a624:	f04f 37ff 	mov.w	r7, #4294967295
 800a628:	e7f4      	b.n	800a614 <__swbuf_r+0x64>
	...

0800a62c <__swsetup_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4b2a      	ldr	r3, [pc, #168]	; (800a6d8 <__swsetup_r+0xac>)
 800a630:	4605      	mov	r5, r0
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	460c      	mov	r4, r1
 800a636:	b118      	cbz	r0, 800a640 <__swsetup_r+0x14>
 800a638:	6a03      	ldr	r3, [r0, #32]
 800a63a:	b90b      	cbnz	r3, 800a640 <__swsetup_r+0x14>
 800a63c:	f7fc fc58 	bl	8006ef0 <__sinit>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a646:	0718      	lsls	r0, r3, #28
 800a648:	d422      	bmi.n	800a690 <__swsetup_r+0x64>
 800a64a:	06d9      	lsls	r1, r3, #27
 800a64c:	d407      	bmi.n	800a65e <__swsetup_r+0x32>
 800a64e:	2309      	movs	r3, #9
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	e034      	b.n	800a6c8 <__swsetup_r+0x9c>
 800a65e:	0758      	lsls	r0, r3, #29
 800a660:	d512      	bpl.n	800a688 <__swsetup_r+0x5c>
 800a662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a664:	b141      	cbz	r1, 800a678 <__swsetup_r+0x4c>
 800a666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a66a:	4299      	cmp	r1, r3
 800a66c:	d002      	beq.n	800a674 <__swsetup_r+0x48>
 800a66e:	4628      	mov	r0, r5
 800a670:	f7fd fbda 	bl	8007e28 <_free_r>
 800a674:	2300      	movs	r3, #0
 800a676:	6363      	str	r3, [r4, #52]	; 0x34
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	2300      	movs	r3, #0
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	f043 0308 	orr.w	r3, r3, #8
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	b94b      	cbnz	r3, 800a6a8 <__swsetup_r+0x7c>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a69a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69e:	d003      	beq.n	800a6a8 <__swsetup_r+0x7c>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 f883 	bl	800a7ae <__smakebuf_r>
 800a6a8:	89a0      	ldrh	r0, [r4, #12]
 800a6aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6ae:	f010 0301 	ands.w	r3, r0, #1
 800a6b2:	d00a      	beq.n	800a6ca <__swsetup_r+0x9e>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60a3      	str	r3, [r4, #8]
 800a6b8:	6963      	ldr	r3, [r4, #20]
 800a6ba:	425b      	negs	r3, r3
 800a6bc:	61a3      	str	r3, [r4, #24]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	b943      	cbnz	r3, 800a6d4 <__swsetup_r+0xa8>
 800a6c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6c6:	d1c4      	bne.n	800a652 <__swsetup_r+0x26>
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	0781      	lsls	r1, r0, #30
 800a6cc:	bf58      	it	pl
 800a6ce:	6963      	ldrpl	r3, [r4, #20]
 800a6d0:	60a3      	str	r3, [r4, #8]
 800a6d2:	e7f4      	b.n	800a6be <__swsetup_r+0x92>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7f7      	b.n	800a6c8 <__swsetup_r+0x9c>
 800a6d8:	2000006c 	.word	0x2000006c

0800a6dc <_raise_r>:
 800a6dc:	291f      	cmp	r1, #31
 800a6de:	b538      	push	{r3, r4, r5, lr}
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	d904      	bls.n	800a6f0 <_raise_r+0x14>
 800a6e6:	2316      	movs	r3, #22
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6f2:	b112      	cbz	r2, 800a6fa <_raise_r+0x1e>
 800a6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6f8:	b94b      	cbnz	r3, 800a70e <_raise_r+0x32>
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 f830 	bl	800a760 <_getpid_r>
 800a700:	462a      	mov	r2, r5
 800a702:	4601      	mov	r1, r0
 800a704:	4620      	mov	r0, r4
 800a706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70a:	f000 b817 	b.w	800a73c <_kill_r>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d00a      	beq.n	800a728 <_raise_r+0x4c>
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	d103      	bne.n	800a71e <_raise_r+0x42>
 800a716:	2316      	movs	r3, #22
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7e7      	b.n	800a6ee <_raise_r+0x12>
 800a71e:	2400      	movs	r4, #0
 800a720:	4628      	mov	r0, r5
 800a722:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a726:	4798      	blx	r3
 800a728:	2000      	movs	r0, #0
 800a72a:	e7e0      	b.n	800a6ee <_raise_r+0x12>

0800a72c <raise>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <raise+0xc>)
 800a72e:	4601      	mov	r1, r0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f7ff bfd3 	b.w	800a6dc <_raise_r>
 800a736:	bf00      	nop
 800a738:	2000006c 	.word	0x2000006c

0800a73c <_kill_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	2300      	movs	r3, #0
 800a740:	4d06      	ldr	r5, [pc, #24]	; (800a75c <_kill_r+0x20>)
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f7f7 fb68 	bl	8001e1e <_kill>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d102      	bne.n	800a758 <_kill_r+0x1c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	b103      	cbz	r3, 800a758 <_kill_r+0x1c>
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	20000500 	.word	0x20000500

0800a760 <_getpid_r>:
 800a760:	f7f7 bb56 	b.w	8001e10 <_getpid>

0800a764 <__swhatbuf_r>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	4615      	mov	r5, r2
 800a76e:	2900      	cmp	r1, #0
 800a770:	461e      	mov	r6, r3
 800a772:	b096      	sub	sp, #88	; 0x58
 800a774:	da0c      	bge.n	800a790 <__swhatbuf_r+0x2c>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	2100      	movs	r1, #0
 800a77a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a77e:	bf0c      	ite	eq
 800a780:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a784:	2340      	movne	r3, #64	; 0x40
 800a786:	2000      	movs	r0, #0
 800a788:	6031      	str	r1, [r6, #0]
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	b016      	add	sp, #88	; 0x58
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	466a      	mov	r2, sp
 800a792:	f000 f849 	bl	800a828 <_fstat_r>
 800a796:	2800      	cmp	r0, #0
 800a798:	dbed      	blt.n	800a776 <__swhatbuf_r+0x12>
 800a79a:	9901      	ldr	r1, [sp, #4]
 800a79c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7a4:	4259      	negs	r1, r3
 800a7a6:	4159      	adcs	r1, r3
 800a7a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ac:	e7eb      	b.n	800a786 <__swhatbuf_r+0x22>

0800a7ae <__smakebuf_r>:
 800a7ae:	898b      	ldrh	r3, [r1, #12]
 800a7b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7b2:	079d      	lsls	r5, r3, #30
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	d507      	bpl.n	800a7ca <__smakebuf_r+0x1c>
 800a7ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	6123      	str	r3, [r4, #16]
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	6163      	str	r3, [r4, #20]
 800a7c6:	b002      	add	sp, #8
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	466a      	mov	r2, sp
 800a7cc:	ab01      	add	r3, sp, #4
 800a7ce:	f7ff ffc9 	bl	800a764 <__swhatbuf_r>
 800a7d2:	9900      	ldr	r1, [sp, #0]
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7fd fb96 	bl	8007f08 <_malloc_r>
 800a7dc:	b948      	cbnz	r0, 800a7f2 <__smakebuf_r+0x44>
 800a7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e2:	059a      	lsls	r2, r3, #22
 800a7e4:	d4ef      	bmi.n	800a7c6 <__smakebuf_r+0x18>
 800a7e6:	f023 0303 	bic.w	r3, r3, #3
 800a7ea:	f043 0302 	orr.w	r3, r3, #2
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	e7e3      	b.n	800a7ba <__smakebuf_r+0xc>
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	6020      	str	r0, [r4, #0]
 800a7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7fa:	81a3      	strh	r3, [r4, #12]
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	6120      	str	r0, [r4, #16]
 800a800:	6163      	str	r3, [r4, #20]
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	b15b      	cbz	r3, 800a81e <__smakebuf_r+0x70>
 800a806:	4630      	mov	r0, r6
 800a808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a80c:	f000 f81e 	bl	800a84c <_isatty_r>
 800a810:	b128      	cbz	r0, 800a81e <__smakebuf_r+0x70>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	f023 0303 	bic.w	r3, r3, #3
 800a818:	f043 0301 	orr.w	r3, r3, #1
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	431d      	orrs	r5, r3
 800a822:	81a5      	strh	r5, [r4, #12]
 800a824:	e7cf      	b.n	800a7c6 <__smakebuf_r+0x18>
	...

0800a828 <_fstat_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	2300      	movs	r3, #0
 800a82c:	4d06      	ldr	r5, [pc, #24]	; (800a848 <_fstat_r+0x20>)
 800a82e:	4604      	mov	r4, r0
 800a830:	4608      	mov	r0, r1
 800a832:	4611      	mov	r1, r2
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f7f7 fb50 	bl	8001eda <_fstat>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	d102      	bne.n	800a844 <_fstat_r+0x1c>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	b103      	cbz	r3, 800a844 <_fstat_r+0x1c>
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	bd38      	pop	{r3, r4, r5, pc}
 800a846:	bf00      	nop
 800a848:	20000500 	.word	0x20000500

0800a84c <_isatty_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	2300      	movs	r3, #0
 800a850:	4d05      	ldr	r5, [pc, #20]	; (800a868 <_isatty_r+0x1c>)
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	f7f7 fb4e 	bl	8001ef8 <_isatty>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_isatty_r+0x1a>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_isatty_r+0x1a>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	20000500 	.word	0x20000500

0800a86c <_init>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr

0800a878 <_fini>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr
