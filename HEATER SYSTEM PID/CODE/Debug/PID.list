
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800664c  0800664c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800664c  0800664c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000060  080066b4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080066b4  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013393  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aea  00000000  00000000  0003345f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2a  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001993b  00000000  00000000  000381ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001713f  00000000  00000000  00051b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000910b2  00000000  00000000  00068c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057d0  00000000  00000000  000f9cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ff4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006568 	.word	0x08006568

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006568 	.word	0x08006568

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_d2f>:
 800076c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000770:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000774:	bf24      	itt	cs
 8000776:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800077a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800077e:	d90d      	bls.n	800079c <__aeabi_d2f+0x30>
 8000780:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000784:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000788:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800078c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000790:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000794:	bf08      	it	eq
 8000796:	f020 0001 	biceq.w	r0, r0, #1
 800079a:	4770      	bx	lr
 800079c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007a0:	d121      	bne.n	80007e6 <__aeabi_d2f+0x7a>
 80007a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007a6:	bfbc      	itt	lt
 80007a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ac:	4770      	bxlt	lr
 80007ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007b6:	f1c2 0218 	rsb	r2, r2, #24
 80007ba:	f1c2 0c20 	rsb	ip, r2, #32
 80007be:	fa10 f30c 	lsls.w	r3, r0, ip
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	bf18      	it	ne
 80007c8:	f040 0001 	orrne.w	r0, r0, #1
 80007cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007d8:	ea40 000c 	orr.w	r0, r0, ip
 80007dc:	fa23 f302 	lsr.w	r3, r3, r2
 80007e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007e4:	e7cc      	b.n	8000780 <__aeabi_d2f+0x14>
 80007e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ea:	d107      	bne.n	80007fc <__aeabi_d2f+0x90>
 80007ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007f0:	bf1e      	ittt	ne
 80007f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007fa:	4770      	bxne	lr
 80007fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000800:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000804:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <__aeabi_f2uiz>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	d20e      	bcs.n	800082e <__aeabi_f2uiz+0x22>
 8000810:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000814:	d30b      	bcc.n	800082e <__aeabi_f2uiz+0x22>
 8000816:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800081a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800081e:	d409      	bmi.n	8000834 <__aeabi_f2uiz+0x28>
 8000820:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000828:	fa23 f002 	lsr.w	r0, r3, r2
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr
 8000834:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000838:	d101      	bne.n	800083e <__aeabi_f2uiz+0x32>
 800083a:	0242      	lsls	r2, r0, #9
 800083c:	d102      	bne.n	8000844 <__aeabi_f2uiz+0x38>
 800083e:	f04f 30ff 	mov.w	r0, #4294967295
 8000842:	4770      	bx	lr
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	0000      	movs	r0, r0
	...

08000850 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000854:	b090      	sub	sp, #64	; 0x40
 8000856:	af06      	add	r7, sp, #24
 8000858:	4603      	mov	r3, r0
 800085a:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (GPIO_Pin == GPIO_PIN_2 && (HAL_GetTick() - sw_timestap) > 1000) {
 800085c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800085e:	2b04      	cmp	r3, #4
 8000860:	d143      	bne.n	80008ea <HAL_GPIO_EXTI_Callback+0x9a>
 8000862:	f000 ff15 	bl	8001690 <HAL_GetTick>
 8000866:	4603      	mov	r3, r0
 8000868:	2200      	movs	r2, #0
 800086a:	469a      	mov	sl, r3
 800086c:	4693      	mov	fp, r2
 800086e:	4b72      	ldr	r3, [pc, #456]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000874:	ebba 0402 	subs.w	r4, sl, r2
 8000878:	eb6b 0503 	sbc.w	r5, fp, r3
 800087c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8000880:	429c      	cmp	r4, r3
 8000882:	f175 0300 	sbcs.w	r3, r5, #0
 8000886:	d330      	bcc.n	80008ea <HAL_GPIO_EXTI_Callback+0x9a>
		if (status == 0) {
 8000888:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d11e      	bne.n	80008ce <HAL_GPIO_EXTI_Callback+0x7e>
			status = 1;
 8000890:	4b6a      	ldr	r3, [pc, #424]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
			initTime();
 8000896:	f005 f847 	bl	8005928 <initTime>
			PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 800089a:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fec2 	bl	8000628 <__aeabi_ui2d>
 80008a4:	4602      	mov	r2, r0
 80008a6:	460b      	mov	r3, r1
 80008a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80008ac:	a35e      	add	r3, pc, #376	; (adr r3, 8000a28 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80008ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80008b6:	a35e      	add	r3, pc, #376	; (adr r3, 8000a30 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008bc:	e9cd 2300 	strd	r2, r3, [sp]
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	4b5f      	ldr	r3, [pc, #380]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80008c6:	4860      	ldr	r0, [pc, #384]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80008c8:	f005 f90c 	bl	8005ae4 <PID_Init>
 80008cc:	e002      	b.n	80008d4 <HAL_GPIO_EXTI_Callback+0x84>
		} else {
			status = 0;
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
		}
		sw_timestap = HAL_GetTick();
 80008d4:	f000 fedc 	bl	8001690 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	2200      	movs	r2, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	61fa      	str	r2, [r7, #28]
 80008e0:	4b55      	ldr	r3, [pc, #340]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80008e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80008e6:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if ((HAL_GetTick() - timestap) > 100)
 80008ea:	f000 fed1 	bl	8001690 <HAL_GetTick>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2200      	movs	r2, #0
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	617a      	str	r2, [r7, #20]
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80008f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000900:	4604      	mov	r4, r0
 8000902:	ebb4 0802 	subs.w	r8, r4, r2
 8000906:	eb61 0903 	sbc.w	r9, r1, r3
 800090a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800090e:	f179 0300 	sbcs.w	r3, r9, #0
 8000912:	d302      	bcc.n	800091a <HAL_GPIO_EXTI_Callback+0xca>
		dir = 0;
 8000914:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_1 && dir == 0
 800091a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800091c:	2b02      	cmp	r3, #2
 800091e:	d103      	bne.n	8000928 <HAL_GPIO_EXTI_Callback+0xd8>
 8000920:	4b4b      	ldr	r3, [pc, #300]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <HAL_GPIO_EXTI_Callback+0xe6>
			|| GPIO_Pin == GPIO_PIN_1 && dir == 1) {
 8000928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800092a:	2b02      	cmp	r3, #2
 800092c:	d133      	bne.n	8000996 <HAL_GPIO_EXTI_Callback+0x146>
 800092e:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d12f      	bne.n	8000996 <HAL_GPIO_EXTI_Callback+0x146>
		encoderCount++;
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a40      	ldr	r2, [pc, #256]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800093e:	6013      	str	r3, [r2, #0]
		PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe6f 	bl	8000628 <__aeabi_ui2d>
 800094a:	4602      	mov	r2, r0
 800094c:	460b      	mov	r3, r1
 800094e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000952:	a335      	add	r3, pc, #212	; (adr r3, 8000a28 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800095c:	a334      	add	r3, pc, #208	; (adr r3, 8000a30 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000962:	e9cd 2300 	strd	r2, r3, [sp]
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800096c:	4836      	ldr	r0, [pc, #216]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800096e:	f005 f8b9 	bl	8005ae4 <PID_Init>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	4837      	ldr	r0, [pc, #220]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x204>)
 8000976:	f001 f963 	bl	8001c40 <HAL_GPIO_TogglePin>
		dir = 1;
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
		timestap = HAL_GetTick();
 8000980:	f000 fe86 	bl	8001690 <HAL_GetTick>
 8000984:	4603      	mov	r3, r0
 8000986:	2200      	movs	r2, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	60fa      	str	r2, [r7, #12]
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800098e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000992:	e9c3 1200 	strd	r1, r2, [r3]
	}
	if (GPIO_Pin == GPIO_PIN_0 && dir == 0
 8000996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000998:	2b01      	cmp	r3, #1
 800099a:	d103      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x154>
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <HAL_GPIO_EXTI_Callback+0x162>
			|| GPIO_Pin == GPIO_PIN_0 && dir == 2) {
 80009a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d137      	bne.n	8000a1a <HAL_GPIO_EXTI_Callback+0x1ca>
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d133      	bne.n	8000a1a <HAL_GPIO_EXTI_Callback+0x1ca>
		if (encoderCount > 0) {
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d01d      	beq.n	80009f6 <HAL_GPIO_EXTI_Callback+0x1a6>
			encoderCount--;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3b01      	subs	r3, #1
 80009c0:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80009c2:	6013      	str	r3, [r2, #0]
			PID_Init(&pid, 1.0, 0.1, 0.01, encoderCount);
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fe2d 	bl	8000628 <__aeabi_ui2d>
 80009ce:	4602      	mov	r2, r0
 80009d0:	460b      	mov	r3, r1
 80009d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80009d6:	a314      	add	r3, pc, #80	; (adr r3, 8000a28 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80009d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80009e0:	a313      	add	r3, pc, #76	; (adr r3, 8000a30 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80009e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e6:	e9cd 2300 	strd	r2, r3, [sp]
 80009ea:	f04f 0200 	mov.w	r2, #0
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80009f2:	f005 f877 	bl	8005ae4 <PID_Init>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009f6:	2120      	movs	r1, #32
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x204>)
 80009fa:	f001 f921 	bl	8001c40 <HAL_GPIO_TogglePin>
		dir = 2;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x200>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	701a      	strb	r2, [r3, #0]
		timestap = HAL_GetTick();
 8000a04:	f000 fe44 	bl	8001690 <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000a12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000a16:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a24:	f3af 8000 	nop.w
 8000a28:	47ae147b 	.word	0x47ae147b
 8000a2c:	3f847ae1 	.word	0x3f847ae1
 8000a30:	9999999a 	.word	0x9999999a
 8000a34:	3fb99999 	.word	0x3fb99999
 8000a38:	20000260 	.word	0x20000260
 8000a3c:	20000268 	.word	0x20000268
 8000a40:	20000000 	.word	0x20000000
 8000a44:	3ff00000 	.word	0x3ff00000
 8000a48:	20000220 	.word	0x20000220
 8000a4c:	20000258 	.word	0x20000258
 8000a50:	20000254 	.word	0x20000254
 8000a54:	40010800 	.word	0x40010800

08000a58 <pwm_output>:

uint8_t pwmtime;
void pwm_output(int pwm) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if (pwm <= 0) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dc08      	bgt.n	8000a78 <pwm_output+0x20>
		HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4820      	ldr	r0, [pc, #128]	; (8000aec <pwm_output+0x94>)
 8000a6c:	f001 f8d0 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000a70:	20fa      	movs	r0, #250	; 0xfa
 8000a72:	f000 fe17 	bl	80016a4 <HAL_Delay>
		return;
 8000a76:	e036      	b.n	8000ae6 <pwm_output+0x8e>
	} else if (pwm > 150) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b96      	cmp	r3, #150	; 0x96
 8000a7c:	dd08      	ble.n	8000a90 <pwm_output+0x38>
		HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <pwm_output+0x94>)
 8000a84:	f001 f8c4 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000a88:	20fa      	movs	r0, #250	; 0xfa
 8000a8a:	f000 fe0b 	bl	80016a4 <HAL_Delay>
		return;
 8000a8e:	e02a      	b.n	8000ae6 <pwm_output+0x8e>
	} else {
		pwmtime = 150 - pwm;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8000a98:	1a9b      	subs	r3, r3, r2
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <pwm_output+0x98>)
 8000a9e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (200 / pwmtime) + 1; i++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	e016      	b.n	8000ad4 <pwm_output+0x7c>
			HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4810      	ldr	r0, [pc, #64]	; (8000aec <pwm_output+0x94>)
 8000aac:	f001 f8b0 	bl	8001c10 <HAL_GPIO_WritePin>
			HAL_Delay(pwmtime);
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <pwm_output+0x98>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fdf5 	bl	80016a4 <HAL_Delay>
			HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2102      	movs	r1, #2
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <pwm_output+0x94>)
 8000ac0:	f001 f8a6 	bl	8001c10 <HAL_GPIO_WritePin>
			HAL_Delay(pwmtime);
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <pwm_output+0x98>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fdeb 	bl	80016a4 <HAL_Delay>
		for (int i = 0; i < (200 / pwmtime) + 1; i++) {
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <pwm_output+0x98>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	23c8      	movs	r3, #200	; 0xc8
 8000adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dddf      	ble.n	8000aa6 <pwm_output+0x4e>
		}
	}

}
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40010800 	.word	0x40010800
 8000af0:	20000278 	.word	0x20000278

08000af4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000af8:	f000 fd72 	bl	80015e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000afc:	f000 f880 	bl	8000c00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b00:	f000 fa80 	bl	8001004 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b04:	f000 f8d4 	bl	8000cb0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000b08:	f000 fa52 	bl	8000fb0 <MX_USART1_UART_Init>
	MX_SPI2_Init();
 8000b0c:	f000 f948 	bl	8000da0 <MX_SPI2_Init>
	MX_RTC_Init();
 8000b10:	f000 f8fc 	bl	8000d0c <MX_RTC_Init>
	MX_TIM2_Init();
 8000b14:	f000 fa00 	bl	8000f18 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000b18:	f000 f97a 	bl	8000e10 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4831      	ldr	r0, [pc, #196]	; (8000be8 <main+0xf4>)
 8000b22:	f001 f875 	bl	8001c10 <HAL_GPIO_WritePin>

	initApp();
 8000b26:	f004 fe4b 	bl	80057c0 <initApp>
	MAX6675_Init();
 8000b2a:	f004 ff6b 	bl	8005a04 <MAX6675_Init>

	mainMenu();
 8000b2e:	f004 fe67 	bl	8005800 <mainMenu>
	initTime();
 8000b32:	f004 fef9 	bl	8005928 <initTime>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b36:	2110      	movs	r1, #16
 8000b38:	482b      	ldr	r0, [pc, #172]	; (8000be8 <main+0xf4>)
 8000b3a:	f001 f881 	bl	8001c40 <HAL_GPIO_TogglePin>

		if (status == 1) {
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <main+0xf8>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d132      	bne.n	8000bac <main+0xb8>
			updateSetpoint(encoderCount);
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <main+0xfc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fe89 	bl	8005864 <updateSetpoint>
			updateStatus(status);
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <main+0xf8>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fec4 	bl	80058e4 <updateStatus>

			/* Functions */
			realValue = getTem();
 8000b5c:	f004 ff78 	bl	8005a50 <getTem>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <main+0x100>)
 8000b64:	6013      	str	r3, [r2, #0]
			updateRealValue(realValue);
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <main+0x100>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fe99 	bl	80058a4 <updateRealValue>
			control_signal = PID_Update(&pid, realValue);
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <main+0x100>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fd56 	bl	8000628 <__aeabi_ui2d>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	460b      	mov	r3, r1
 8000b80:	481d      	ldr	r0, [pc, #116]	; (8000bf8 <main+0x104>)
 8000b82:	f004 ffdc 	bl	8005b3e <PID_Update>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	491c      	ldr	r1, [pc, #112]	; (8000bfc <main+0x108>)
 8000b8c:	e9c1 2300 	strd	r2, r3, [r1]
			pwm_output(control_signal);
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <main+0x108>)
 8000b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b96:	4610      	mov	r0, r2
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f7ff fdbf 	bl	800071c <__aeabi_d2iz>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff59 	bl	8000a58 <pwm_output>
			updateTime();
 8000ba6:	f004 fed9 	bl	800595c <updateTime>
 8000baa:	e7c4      	b.n	8000b36 <main+0x42>
		} else {
			pwm_output(-1);
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff52 	bl	8000a58 <pwm_output>
			updateSetpoint(encoderCount);
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <main+0xfc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 fe52 	bl	8005864 <updateSetpoint>
			updateStatus(status);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <main+0xf8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fe8d 	bl	80058e4 <updateStatus>

			/* Functions */
			realValue = getTem();
 8000bca:	f004 ff41 	bl	8005a50 <getTem>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <main+0x100>)
 8000bd2:	6013      	str	r3, [r2, #0]
			updateRealValue(realValue);
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <main+0x100>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fe62 	bl	80058a4 <updateRealValue>
			HAL_Delay(200);
 8000be0:	20c8      	movs	r0, #200	; 0xc8
 8000be2:	f000 fd5f 	bl	80016a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000be6:	e7a6      	b.n	8000b36 <main+0x42>
 8000be8:	40010800 	.word	0x40010800
 8000bec:	20000268 	.word	0x20000268
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000250 	.word	0x20000250
 8000bf8:	20000220 	.word	0x20000220
 8000bfc:	20000270 	.word	0x20000270

08000c00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 f818 	bl	8005c44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000c30:	230a      	movs	r3, #10
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	2302      	movs	r3, #2
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c44:	2300      	movs	r3, #0
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fccf 	bl	80025f4 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x60>
		Error_Handler();
 8000c5c:	f000 fa70 	bl	8001140 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 ff3c 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x8a>
		Error_Handler();
 8000c86:	f000 fa5b 	bl	8001140 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c92:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 f8bc 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xa6>
		Error_Handler();
 8000ca2:	f000 fa4d 	bl	8001140 <Error_Handler>
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <MX_I2C1_Init+0x54>)
 8000cb8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x58>)
 8000cbe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cee:	f000 ffd9 	bl	8001ca4 <HAL_I2C_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000cf8:	f000 fa22 	bl	8001140 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000007c 	.word	0x2000007c
 8000d04:	40005400 	.word	0x40005400
 8000d08:	000186a0 	.word	0x000186a0

08000d0c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2100      	movs	r1, #0
 8000d16:	460a      	mov	r2, r1
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_RTC_Init+0x8c>)
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <MX_RTC_Init+0x90>)
 8000d26:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_RTC_Init+0x8c>)
 8000d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2e:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_RTC_Init+0x8c>)
 8000d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d36:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000d38:	4817      	ldr	r0, [pc, #92]	; (8000d98 <MX_RTC_Init+0x8c>)
 8000d3a:	f002 f9d7 	bl	80030ec <HAL_RTC_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_RTC_Init+0x3c>
		Error_Handler();
 8000d44:	f000 f9fc 	bl	8001140 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <MX_RTC_Init+0x8c>)
 8000d5c:	f002 fa52 	bl	8003204 <HAL_RTC_SetTime>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_RTC_Init+0x5e>
		Error_Handler();
 8000d66:	f000 f9eb 	bl	8001140 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_RTC_Init+0x8c>)
 8000d82:	f002 fbaf 	bl	80034e4 <HAL_RTC_SetDate>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_RTC_Init+0x84>
		Error_Handler();
 8000d8c:	f000 f9d8 	bl	8001140 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000d0 	.word	0x200000d0
 8000d9c:	40002800 	.word	0x40002800

08000da0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_SPI2_Init+0x6c>)
 8000da8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dd8:	2230      	movs	r2, #48	; 0x30
 8000dda:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000df0:	220a      	movs	r2, #10
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_SPI2_Init+0x68>)
 8000df6:	f002 ff21 	bl	8003c3c <HAL_SPI_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_SPI2_Init+0x64>
		Error_Handler();
 8000e00:	f000 f99e 	bl	8001140 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000e4 	.word	0x200000e4
 8000e0c:	40003800 	.word	0x40003800

08000e10 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b092      	sub	sp, #72	; 0x48
 8000e14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2220      	movs	r2, #32
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 ff02 	bl	8005c44 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000e40:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e42:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <MX_TIM1_Init+0x104>)
 8000e44:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e58:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000e6c:	4828      	ldr	r0, [pc, #160]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e6e:	f003 fcbc 	bl	80047ea <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8000e78:	f000 f962 	bl	8001140 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000e84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4821      	ldr	r0, [pc, #132]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000e8c:	f004 f9cc 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000e96:	f000 f953 	bl	8001140 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4814      	ldr	r0, [pc, #80]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000ec0:	f003 fd84 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8000eca:	f000 f939 	bl	8001140 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000ef2:	f004 f9f7 	bl	80052e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8000efc:	f000 f920 	bl	8001140 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <MX_TIM1_Init+0x100>)
 8000f02:	f000 fa3d 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8000f06:	bf00      	nop
 8000f08:	3748      	adds	r7, #72	; 0x48
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000013c 	.word	0x2000013c
 8000f14:	40012c00 	.word	0x40012c00

08000f18 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f5e:	f003 fbf5 	bl	800474c <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000f68:	f000 f8ea 	bl	8001140 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f7a:	f003 fde9 	bl	8004b50 <HAL_TIM_ConfigClockSource>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000f84:	f000 f8dc 	bl	8001140 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f96:	f004 f947 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000fa0:	f000 f8ce 	bl	8001140 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000184 	.word	0x20000184

08000fb0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <MX_USART1_UART_Init+0x50>)
 8000fb8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fe8:	f004 f9cd 	bl	8005386 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000ff2:	f000 f8a5 	bl	8001140 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001cc 	.word	0x200001cc
 8001000:	40013800 	.word	0x40013800

08001004 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <MX_GPIO_Init+0x12c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a44      	ldr	r2, [pc, #272]	; (8001130 <MX_GPIO_Init+0x12c>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b42      	ldr	r3, [pc, #264]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a3e      	ldr	r2, [pc, #248]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <MX_GPIO_Init+0x12c>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <MX_GPIO_Init+0x12c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a38      	ldr	r2, [pc, #224]	; (8001130 <MX_GPIO_Init+0x12c>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_GPIO_Init+0x12c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, PWM_Pin | LD1_Pin | LD2_Pin | LD3_Pin,
 8001078:	2200      	movs	r2, #0
 800107a:	2172      	movs	r1, #114	; 0x72
 800107c:	482d      	ldr	r0, [pc, #180]	; (8001134 <MX_GPIO_Init+0x130>)
 800107e:	f000 fdc7 	bl	8001c10 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_Pin | LED_LCD_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <MX_GPIO_Init+0x134>)
 800108a:	f000 fdc1 	bl	8001c10 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PWM_Pin LD1_Pin LD2_Pin LD3_Pin */
	GPIO_InitStruct.Pin = PWM_Pin | LD1_Pin | LD2_Pin | LD3_Pin;
 800108e:	2372      	movs	r3, #114	; 0x72
 8001090:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2302      	movs	r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <MX_GPIO_Init+0x130>)
 80010a6:	f000 fc2f 	bl	8001908 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_GPIO_Init+0x138>)
 80010b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <MX_GPIO_Init+0x134>)
 80010be:	f000 fc23 	bl	8001908 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin LED_LCD_Pin */
	GPIO_InitStruct.Pin = CS_Pin | LED_LCD_Pin;
 80010c2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80010c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4817      	ldr	r0, [pc, #92]	; (8001138 <MX_GPIO_Init+0x134>)
 80010dc:	f000 fc14 	bl	8001908 <HAL_GPIO_Init>

	/*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin */
	GPIO_InitStruct.Pin = BT1_Pin | BT2_Pin | BT3_Pin;
 80010e0:	2338      	movs	r3, #56	; 0x38
 80010e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_GPIO_Init+0x134>)
 80010f4:	f000 fc08 	bl	8001908 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2006      	movs	r0, #6
 80010fe:	f000 fbcc 	bl	800189a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001102:	2006      	movs	r0, #6
 8001104:	f000 fbe5 	bl	80018d2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2007      	movs	r0, #7
 800110e:	f000 fbc4 	bl	800189a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001112:	2007      	movs	r0, #7
 8001114:	f000 fbdd 	bl	80018d2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2008      	movs	r0, #8
 800111e:	f000 fbbc 	bl	800189a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001122:	2008      	movs	r0, #8
 8001124:	f000 fbd5 	bl	80018d2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001128:	bf00      	nop
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	40010800 	.word	0x40010800
 8001138:	40010c00 	.word	0x40010c00
 800113c:	10210000 	.word	0x10210000

08001140 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_MspInit+0x5c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_MspInit+0x5c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_MspInit+0x5c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_MspInit+0x5c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_MspInit+0x5c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_MspInit+0x5c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_MspInit+0x60>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_MspInit+0x60>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000

080011b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <HAL_I2C_MspInit+0x70>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d123      	bne.n	8001218 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_I2C_MspInit+0x74>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a13      	ldr	r2, [pc, #76]	; (8001224 <HAL_I2C_MspInit+0x74>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_I2C_MspInit+0x74>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e8:	23c0      	movs	r3, #192	; 0xc0
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	480b      	ldr	r0, [pc, #44]	; (8001228 <HAL_I2C_MspInit+0x78>)
 80011fc:	f000 fb84 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_I2C_MspInit+0x74>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_I2C_MspInit+0x74>)
 8001206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120a:	61d3      	str	r3, [r2, #28]
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_I2C_MspInit+0x74>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40005400 	.word	0x40005400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010c00 	.word	0x40010c00

0800122c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_RTC_MspInit+0x3c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d110      	bne.n	8001260 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800123e:	f001 f9cd 	bl	80025dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_RTC_MspInit+0x40>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_RTC_MspInit+0x40>)
 8001248:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_RTC_MspInit+0x40>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_RTC_MspInit+0x44>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40002800 	.word	0x40002800
 800126c:	40021000 	.word	0x40021000
 8001270:	4242043c 	.word	0x4242043c

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d131      	bne.n	80012f8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_SPI_MspInit+0x90>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <HAL_SPI_MspInit+0x90>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	61d3      	str	r3, [r2, #28]
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_SPI_MspInit+0x94>)
 80012da:	f000 fb15 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_SPI_MspInit+0x94>)
 80012f4:	f000 fb08 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40003800 	.word	0x40003800
 8001304:	40021000 	.word	0x40021000
 8001308:	40010c00 	.word	0x40010c00

0800130c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_TIM_PWM_MspInit+0x34>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10b      	bne.n	8001336 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_PWM_MspInit+0x38>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_TIM_PWM_MspInit+0x38>)
 8001324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_TIM_PWM_MspInit+0x38>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40012c00 	.word	0x40012c00
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d10b      	bne.n	8001372 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_TIM_Base_MspInit+0x34>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_TIM_Base_MspInit+0x34>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_TIM_Base_MspInit+0x34>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_TIM_MspPostInit+0x7c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d129      	bne.n	80013f4 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_TIM_MspPostInit+0x80>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_TIM_MspPostInit+0x80>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_TIM_MspPostInit+0x80>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	480e      	ldr	r0, [pc, #56]	; (8001404 <HAL_TIM_MspPostInit+0x84>)
 80013cc:	f000 fa9c 	bl	8001908 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_TIM_MspPostInit+0x88>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_TIM_MspPostInit+0x88>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800
 8001408:	40010000 	.word	0x40010000

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d131      	bne.n	8001490 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_UART_MspInit+0x90>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_UART_MspInit+0x90>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_UART_MspInit+0x90>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0x90>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_UART_MspInit+0x90>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_UART_MspInit+0x90>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <HAL_UART_MspInit+0x94>)
 8001472:	f000 fa49 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_UART_MspInit+0x94>)
 800148c:	f000 fa3c 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40013800 	.word	0x40013800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010800 	.word	0x40010800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ea:	f000 f8bf 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f000 fbbc 	bl	8001c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001504:	2002      	movs	r0, #2
 8001506:	f000 fbb5 	bl	8001c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001512:	2004      	movs	r0, #4
 8001514:	f000 fbae 	bl	8001c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f004 fb82 	bl	8005c54 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20005000 	.word	0x20005000
 800157c:	00000400 	.word	0x00000400
 8001580:	2000027c 	.word	0x2000027c
 8001584:	200003d8 	.word	0x200003d8

08001588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <Reset_Handler>:
 8001594:	f7ff fff8 	bl	8001588 <SystemInit>
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <LoopFillZerobss+0xe>)
 800159a:	490c      	ldr	r1, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <LoopFillZerobss+0x16>)
 800159e:	2300      	movs	r3, #0
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:
 80015a2:	58d4      	ldr	r4, [r2, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:
 80015a8:	18c4      	adds	r4, r0, r3
 80015aa:	428c      	cmp	r4, r1
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <LoopFillZerobss+0x1a>)
 80015b0:	4c09      	ldr	r4, [pc, #36]	; (80015d8 <LoopFillZerobss+0x1e>)
 80015b2:	2300      	movs	r3, #0
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:
 80015ba:	42a2      	cmp	r2, r4
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>
 80015be:	f004 fb4f 	bl	8005c60 <__libc_init_array>
 80015c2:	f7ff fa97 	bl	8000af4 <main>
 80015c6:	4770      	bx	lr
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000060 	.word	0x20000060
 80015d0:	08006654 	.word	0x08006654
 80015d4:	20000060 	.word	0x20000060
 80015d8:	200003d4 	.word	0x200003d4

080015dc <ADC1_2_IRQHandler>:
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f947 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	200f      	movs	r0, #15
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fda6 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f95f 	bl	80018ee <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f927 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000004 	.word	0x20000004
 8001664:	2000000c 	.word	0x2000000c
 8001668:	20000008 	.word	0x20000008

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x1c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x20>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <HAL_IncTick+0x20>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20000280 	.word	0x20000280

08001690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_GetTick+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000280 	.word	0x20000280

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff fff0 	bl	8001690 <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffe0 	bl	8001690 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000000c 	.word	0x2000000c

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff90 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff2d 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff42 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff35 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	; 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e169      	b.n	8001bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8158 	bne.w	8001bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a9a      	ldr	r2, [pc, #616]	; (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d05e      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001944:	4a98      	ldr	r2, [pc, #608]	; (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d875      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800194a:	4a98      	ldr	r2, [pc, #608]	; (8001bac <HAL_GPIO_Init+0x2a4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d058      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001950:	4a96      	ldr	r2, [pc, #600]	; (8001bac <HAL_GPIO_Init+0x2a4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d86f      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001956:	4a96      	ldr	r2, [pc, #600]	; (8001bb0 <HAL_GPIO_Init+0x2a8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d052      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 800195c:	4a94      	ldr	r2, [pc, #592]	; (8001bb0 <HAL_GPIO_Init+0x2a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d869      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001962:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <HAL_GPIO_Init+0x2ac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04c      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001968:	4a92      	ldr	r2, [pc, #584]	; (8001bb4 <HAL_GPIO_Init+0x2ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d863      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800196e:	4a92      	ldr	r2, [pc, #584]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d046      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001974:	4a90      	ldr	r2, [pc, #576]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d85d      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d82a      	bhi.n	80019d4 <HAL_GPIO_Init+0xcc>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d859      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001982:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <HAL_GPIO_Init+0x80>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	08001a03 	.word	0x08001a03
 800198c:	080019dd 	.word	0x080019dd
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a37 	.word	0x08001a37
 800199c:	08001a37 	.word	0x08001a37
 80019a0:	08001a37 	.word	0x08001a37
 80019a4:	08001a37 	.word	0x08001a37
 80019a8:	08001a37 	.word	0x08001a37
 80019ac:	08001a37 	.word	0x08001a37
 80019b0:	08001a37 	.word	0x08001a37
 80019b4:	08001a37 	.word	0x08001a37
 80019b8:	08001a37 	.word	0x08001a37
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a37 	.word	0x08001a37
 80019c4:	08001a37 	.word	0x08001a37
 80019c8:	08001a37 	.word	0x08001a37
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	4a79      	ldr	r2, [pc, #484]	; (8001bbc <HAL_GPIO_Init+0x2b4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019da:	e02c      	b.n	8001a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e029      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e024      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3308      	adds	r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e01f      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	330c      	adds	r3, #12
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e01a      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e013      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	611a      	str	r2, [r3, #16]
          break;
 8001a22:	e009      	b.n	8001a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	615a      	str	r2, [r3, #20]
          break;
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          break;
 8001a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d801      	bhi.n	8001a42 <HAL_GPIO_Init+0x13a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_Init+0x13e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	; 0xff
 8001a4c:	d802      	bhi.n	8001a54 <HAL_GPIO_Init+0x14c>
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x152>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	3b08      	subs	r3, #8
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	210f      	movs	r1, #15
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80b1 	beq.w	8001bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a40      	ldr	r2, [pc, #256]	; (8001bc8 <HAL_GPIO_Init+0x2c0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_GPIO_Init+0x1ec>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3f      	ldr	r2, [pc, #252]	; (8001bcc <HAL_GPIO_Init+0x2c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1e8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <HAL_GPIO_Init+0x2c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3d      	ldr	r2, [pc, #244]	; (8001bd4 <HAL_GPIO_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1e0>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001ae8:	2304      	movs	r3, #4
 8001aea:	e004      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001af4:	2300      	movs	r3, #0
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4093      	lsls	r3, r2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b06:	492f      	ldr	r1, [pc, #188]	; (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	492c      	ldr	r1, [pc, #176]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4928      	ldr	r1, [pc, #160]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	491e      	ldr	r1, [pc, #120]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4918      	ldr	r1, [pc, #96]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4914      	ldr	r1, [pc, #80]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d021      	beq.n	8001bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e021      	b.n	8001bea <HAL_GPIO_Init+0x2e2>
 8001ba6:	bf00      	nop
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10310000 	.word	0x10310000
 8001bb0:	10220000 	.word	0x10220000
 8001bb4:	10210000 	.word	0x10210000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40011400 	.word	0x40011400
 8001bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4909      	ldr	r1, [pc, #36]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f ae8e 	bne.w	800191c <HAL_GPIO_Init+0x14>
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	372c      	adds	r7, #44	; 0x2c
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43d9      	mvns	r1, r3
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	400b      	ands	r3, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fddc 	bl	8000850 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e12b      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fa70 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d08:	f001 f83e 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8001d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a81      	ldr	r2, [pc, #516]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d807      	bhi.n	8001d28 <HAL_I2C_Init+0x84>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a80      	ldr	r2, [pc, #512]	; (8001f1c <HAL_I2C_Init+0x278>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e006      	b.n	8001d36 <HAL_I2C_Init+0x92>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a7d      	ldr	r2, [pc, #500]	; (8001f20 <HAL_I2C_Init+0x27c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e7      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a78      	ldr	r2, [pc, #480]	; (8001f24 <HAL_I2C_Init+0x280>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d802      	bhi.n	8001d78 <HAL_I2C_Init+0xd4>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e009      	b.n	8001d8c <HAL_I2C_Init+0xe8>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_I2C_Init+0x284>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	495c      	ldr	r1, [pc, #368]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001da8:	428b      	cmp	r3, r1
 8001daa:	d819      	bhi.n	8001de0 <HAL_I2C_Init+0x13c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e59      	subs	r1, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_I2C_Init+0x138>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e59      	subs	r1, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	e051      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e04f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_I2C_Init+0x168>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Init+0x18e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x196>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e022      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_I2C_Init+0x1bc>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	0099      	lsls	r1, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6911      	ldr	r1, [r2, #16]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	001e847f 	.word	0x001e847f
 8001f20:	003d08ff 	.word	0x003d08ff
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fba6 	bl	8001690 <HAL_GetTick>
 8001f44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	f040 80e0 	bne.w	8002114 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2319      	movs	r3, #25
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4970      	ldr	r1, [pc, #448]	; (8002120 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f964 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0d3      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2C_Master_Transmit+0x50>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0cc      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d007      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	; 0x21
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f89c 	bl	8002128 <I2C_MasterRequestWrite>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08d      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002010:	e066      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa22 	bl	8002460 <I2C_WaitOnTXEFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b04      	cmp	r3, #4
 8002028:	d107      	bne.n	800203a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002038:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d017      	beq.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6a39      	ldr	r1, [r7, #32]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fa19 	bl	80024f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01a      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d194      	bne.n	8002012 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000

08002128 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d006      	beq.n	8002152 <I2C_MasterRequestWrite+0x2a>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <I2C_MasterRequestWrite+0x2a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	2b12      	cmp	r3, #18
 800216a:	d107      	bne.n	800217c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f84f 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a2:	d103      	bne.n	80021ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e035      	b.n	800221c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b8:	d108      	bne.n	80021cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	e01b      	b.n	8002204 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021cc:	897b      	ldrh	r3, [r7, #10]
 80021ce:	11db      	asrs	r3, r3, #7
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 0306 	and.w	r3, r3, #6
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f063 030f 	orn	r3, r3, #15
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <I2C_MasterRequestWrite+0xfc>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f898 	bl	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e010      	b.n	800221c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021fa:	897b      	ldrh	r3, [r7, #10]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <I2C_MasterRequestWrite+0x100>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f888 	bl	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	00010008 	.word	0x00010008
 8002228:	00010002 	.word	0x00010002

0800222c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	e048      	b.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d044      	beq.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002246:	f7ff fa23 	bl	8001690 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d139      	bne.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10d      	bne.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	43da      	mvns	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	e00c      	b.n	800229c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	43da      	mvns	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d116      	bne.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e023      	b.n	8002318 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	43da      	mvns	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4013      	ands	r3, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	e00c      	b.n	8002310 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	43da      	mvns	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	429a      	cmp	r2, r3
 8002314:	d093      	beq.n	800223e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800232e:	e071      	b.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d123      	bne.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f043 0204 	orr.w	r2, r3, #4
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e067      	b.n	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d041      	beq.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002390:	f7ff f97e 	bl	8001690 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d302      	bcc.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d136      	bne.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10c      	bne.n	80023ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e00b      	b.n	80023e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	43da      	mvns	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4013      	ands	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e021      	b.n	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10c      	bne.n	8002438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	43da      	mvns	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e00b      	b.n	8002450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f af6d 	bne.w	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800246c:	e034      	b.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f886 	bl	8002580 <I2C_IsAcknowledgeFailed>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e034      	b.n	80024e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d028      	beq.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7ff f903 	bl	8001690 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11d      	bne.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d016      	beq.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e007      	b.n	80024e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d1c3      	bne.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024fc:	e034      	b.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f83e 	bl	8002580 <I2C_IsAcknowledgeFailed>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e034      	b.n	8002578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d028      	beq.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7ff f8bb 	bl	8001690 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d11d      	bne.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d016      	beq.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e007      	b.n	8002578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b04      	cmp	r3, #4
 8002574:	d1c3      	bne.n	80024fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002596:	d11b      	bne.n	80025d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0204 	orr.w	r2, r3, #4
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	420e0020 	.word	0x420e0020

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e272      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00c      	beq.n	800263a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d112      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d06c      	beq.n	8002720 <HAL_RCC_OscConfig+0x12c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d168      	bne.n	8002720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e24c      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x76>
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e02e      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe ffde 	bl	8001690 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe ffda 	bl	8001690 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e200      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe4>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe ffca 	bl	8001690 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe ffc6 	bl	8001690 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1ec      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x10c>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c0      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe ff7f 	bl	8001690 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe ff7b 	bl	8001690 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4927      	ldr	r1, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe ff5e 	bl	8001690 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe ff5a 	bl	8001690 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e180      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03a      	beq.n	8002878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d019      	beq.n	800283e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe ff3e 	bl	8001690 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe ff3a 	bl	8001690 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e160      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f000 face 	bl	8002dd8 <RCC_Delay>
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe ff24 	bl	8001690 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe ff20 	bl	8001690 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d908      	bls.n	800286c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e146      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	42420000 	.word	0x42420000
 8002868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e9      	bne.n	800284c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a6 	beq.w	80029d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fee1 	bl	8001690 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe fedd 	bl	8001690 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e103      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x312>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02d      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x334>
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	e01c      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x356>
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e00b      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe fe91 	bl	8001690 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fe8d 	bl	8001690 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0b1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCC_OscConfig+0x37e>
 8002994:	e014      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe fe7b 	bl	8001690 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fe77 	bl	8001690 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e09b      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ee      	bne.n	800299e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8087 	beq.w	8002aea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d061      	beq.n	8002aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d146      	bne.n	8002a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fe4b 	bl	8001690 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fe47 	bl	8001690 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e06d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4921      	ldr	r1, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a19      	ldr	r1, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fe1b 	bl	8001690 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fe17 	bl	8001690 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46a>
 8002a7c:	e035      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fe04 	bl	8001690 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fe00 	bl	8001690 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e026      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x498>
 8002aaa:	e01e      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e019      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x500>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d0      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4965      	ldr	r1, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d040      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e073      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fd52 	bl	8001690 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fd4e 	bl	8001690 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e053      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d210      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fcb0 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	080065d8 	.word	0x080065d8
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	20000008 	.word	0x20000008

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x30>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x36>
 8002cfa:	e027      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfe:	613b      	str	r3, [r7, #16]
      break;
 8002d00:	e027      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c5b      	lsrs	r3, r3, #17
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	fb03 f202 	mul.w	r2, r3, r2
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	613b      	str	r3, [r7, #16]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	693b      	ldr	r3, [r7, #16]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	080065f0 	.word	0x080065f0
 8002d6c:	08006600 	.word	0x08006600
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	080065e8 	.word	0x080065e8

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffde 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	0adb      	lsrs	r3, r3, #11
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	080065e8 	.word	0x080065e8

08002dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCC_Delay+0x34>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <RCC_Delay+0x38>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002df4:	bf00      	nop
  }
  while (Delay --);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <RCC_Delay+0x1c>
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d07d      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	61d3      	str	r3, [r2, #28]
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d118      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e74:	f7fe fc0c 	bl	8001690 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7c:	f7fe fc08 	bl	8001690 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e06d      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9a:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02e      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d027      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d014      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe fbd7 	bl	8001690 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe fbd3 	bl	8001690 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e036      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ee      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4917      	ldr	r1, [pc, #92]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	490b      	ldr	r1, [pc, #44]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42420440 	.word	0x42420440

08002f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	f200 808a 	bhi.w	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d045      	beq.n	800303c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d075      	beq.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fb6:	e082      	b.n	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002fb8:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d07b      	beq.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0c9b      	lsrs	r3, r3, #18
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d015      	beq.n	800300e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe2:	4b3c      	ldr	r3, [pc, #240]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0c5b      	lsrs	r3, r3, #17
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ffc:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fbb2 f2f3 	udiv	r2, r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e004      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003024:	d102      	bne.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	61bb      	str	r3, [r7, #24]
      break;
 800302a:	e04a      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	61bb      	str	r3, [r7, #24]
      break;
 800303a:	e042      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d108      	bne.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e01f      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306a:	d109      	bne.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003078:	f649 4340 	movw	r3, #40000	; 0x9c40
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e00f      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800308a:	d11c      	bne.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003098:	f24f 4324 	movw	r3, #62500	; 0xf424
 800309c:	61bb      	str	r3, [r7, #24]
      break;
 800309e:	e012      	b.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030a0:	e011      	b.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030a2:	f7ff fe85 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0b9b      	lsrs	r3, r3, #14
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	3301      	adds	r3, #1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	61bb      	str	r3, [r7, #24]
      break;
 80030bc:	e004      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030c6:	bf00      	nop
    }
  }
  return (frequency);
 80030c8:	69bb      	ldr	r3, [r7, #24]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08006604 	.word	0x08006604
 80030dc:	08006614 	.word	0x08006614
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	003d0900 	.word	0x003d0900
 80030e8:	aaaaaaab 	.word	0xaaaaaaab

080030ec <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07a      	b.n	80031f8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7c5b      	ldrb	r3, [r3, #17]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f88a 	bl	800122c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 faea 	bl	80036f8 <HAL_RTC_WaitForSynchro>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2204      	movs	r2, #4
 800312e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e061      	b.n	80031f8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fba3 	bl	8003880 <RTC_EnterInitMode>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2204      	movs	r2, #4
 8003144:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e056      	b.n	80031f8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0207 	bic.w	r2, r2, #7
 8003158:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RTC_Init+0x114>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_RTC_Init+0x114>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RTC_Init+0x114>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4921      	ldr	r1, [pc, #132]	; (8003200 <HAL_RTC_Init+0x114>)
 800317c:	4313      	orrs	r3, r2
 800317e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d003      	beq.n	8003192 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e00e      	b.n	80031b0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003192:	2001      	movs	r0, #1
 8003194:	f7ff fef4 	bl	8002f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8003198:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e026      	b.n	80031f8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0c1a      	lsrs	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f002 020f 	and.w	r2, r2, #15
 80031bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	b292      	uxth	r2, r2
 80031c6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fb81 	bl	80038d0 <RTC_ExitInitMode>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2204      	movs	r2, #4
 80031d8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e00c      	b.n	80031f8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40006c00 	.word	0x40006c00

08003204 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_RTC_SetTime+0x20>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e080      	b.n	800332a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	7c1b      	ldrb	r3, [r3, #16]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_RTC_SetTime+0x30>
 8003230:	2302      	movs	r3, #2
 8003232:	e07a      	b.n	800332a <HAL_RTC_SetTime+0x126>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2202      	movs	r2, #2
 800323e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003250:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	4619      	mov	r1, r3
 800325a:	460b      	mov	r3, r1
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a5b      	subs	r3, r3, r1
 8003260:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003262:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e01e      	b.n	80032ac <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fb71 	bl	800395a <RTC_Bcd2ToByte>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003280:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fb66 	bl	800395a <RTC_Bcd2ToByte>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800329a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fb5a 	bl	800395a <RTC_Bcd2ToByte>
 80032a6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032a8:	4423      	add	r3, r4
 80032aa:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80032ac:	6979      	ldr	r1, [r7, #20]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa7f 	bl	80037b2 <RTC_WriteTimeCounter>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2204      	movs	r2, #4
 80032be:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e02f      	b.n	800332a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0205 	bic.w	r2, r2, #5
 80032d8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fa90 	bl	8003800 <RTC_ReadAlarmCounter>
 80032e0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d018      	beq.n	800331c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d214      	bcs.n	800331c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80032f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80032fc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032fe:	6939      	ldr	r1, [r7, #16]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fa96 	bl	8003832 <RTC_WriteAlarmCounter>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2204      	movs	r2, #4
 8003310:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e006      	b.n	800332a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}
	...

08003334 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_RTC_GetTime+0x28>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b5      	b.n	80034cc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0ac      	b.n	80034cc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f9ed 	bl	8003752 <RTC_ReadTimeCounter>
 8003378:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4a55      	ldr	r2, [pc, #340]	; (80034d4 <HAL_RTC_GetTime+0x1a0>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0adb      	lsrs	r3, r3, #11
 8003384:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <HAL_RTC_GetTime+0x1a0>)
 800338a:	fba3 1302 	umull	r1, r3, r3, r2
 800338e:	0adb      	lsrs	r3, r3, #11
 8003390:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_RTC_GetTime+0x1a4>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4a4a      	ldr	r2, [pc, #296]	; (80034d4 <HAL_RTC_GetTime+0x1a0>)
 80033ac:	fba2 1203 	umull	r1, r2, r2, r3
 80033b0:	0ad2      	lsrs	r2, r2, #11
 80033b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80033b6:	fb01 f202 	mul.w	r2, r1, r2
 80033ba:	1a9a      	subs	r2, r3, r2
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RTC_GetTime+0x1a4>)
 80033be:	fba3 1302 	umull	r1, r3, r3, r2
 80033c2:	0959      	lsrs	r1, r3, #5
 80033c4:	460b      	mov	r3, r1
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a5b      	subs	r3, r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	1ad1      	subs	r1, r2, r3
 80033ce:	b2ca      	uxtb	r2, r1
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b17      	cmp	r3, #23
 80033d8:	d955      	bls.n	8003486 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <HAL_RTC_GetTime+0x1a8>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80033e6:	6939      	ldr	r1, [r7, #16]
 80033e8:	4b3c      	ldr	r3, [pc, #240]	; (80034dc <HAL_RTC_GetTime+0x1a8>)
 80033ea:	fba3 2301 	umull	r2, r3, r3, r1
 80033ee:	091a      	lsrs	r2, r3, #4
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1aca      	subs	r2, r1, r3
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f9fd 	bl	8003800 <RTC_ReadAlarmCounter>
 8003406:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d008      	beq.n	8003422 <HAL_RTC_GetTime+0xee>
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	429a      	cmp	r2, r3
 8003416:	d904      	bls.n	8003422 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e002      	b.n	8003428 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_RTC_GetTime+0x1ac>)
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f9ba 	bl	80037b2 <RTC_WriteTimeCounter>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e041      	b.n	80034cc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d00c      	beq.n	800346a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4413      	add	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f9e9 	bl	8003832 <RTC_WriteAlarmCounter>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e030      	b.n	80034cc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800346a:	69f9      	ldr	r1, [r7, #28]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9e0 	bl	8003832 <RTC_WriteAlarmCounter>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e027      	b.n	80034cc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa88 	bl	8003994 <RTC_DateUpdate>
 8003484:	e003      	b.n	800348e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01a      	beq.n	80034ca <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fa41 	bl	8003920 <RTC_ByteToBcd2>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa38 	bl	8003920 <RTC_ByteToBcd2>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	789b      	ldrb	r3, [r3, #2]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fa2f 	bl	8003920 <RTC_ByteToBcd2>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	91a2b3c5 	.word	0x91a2b3c5
 80034d8:	88888889 	.word	0x88888889
 80034dc:	aaaaaaab 	.word	0xaaaaaaab
 80034e0:	00015180 	.word	0x00015180

080034e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_RTC_SetDate+0x24>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e097      	b.n	800363c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	7c1b      	ldrb	r3, [r3, #16]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_RTC_SetDate+0x34>
 8003514:	2302      	movs	r3, #2
 8003516:	e091      	b.n	800363c <HAL_RTC_SetDate+0x158>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2202      	movs	r2, #2
 8003522:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	78da      	ldrb	r2, [r3, #3]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	785a      	ldrb	r2, [r3, #1]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	789a      	ldrb	r2, [r3, #2]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	739a      	strb	r2, [r3, #14]
 8003542:	e01a      	b.n	800357a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	78db      	ldrb	r3, [r3, #3]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fa06 	bl	800395a <RTC_Bcd2ToByte>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f9fd 	bl	800395a <RTC_Bcd2ToByte>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	789b      	ldrb	r3, [r3, #2]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f9f4 	bl	800395a <RTC_Bcd2ToByte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	7bdb      	ldrb	r3, [r3, #15]
 800357e:	4618      	mov	r0, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	7b59      	ldrb	r1, [r3, #13]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	7b9b      	ldrb	r3, [r3, #14]
 8003588:	461a      	mov	r2, r3
 800358a:	f000 fadf 	bl	8003b4c <RTC_WeekDayNum>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	7b1a      	ldrb	r2, [r3, #12]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8d7 	bl	8003752 <RTC_ReadTimeCounter>
 80035a4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_RTC_SetDate+0x160>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0adb      	lsrs	r3, r3, #11
 80035b0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b18      	cmp	r3, #24
 80035b6:	d93a      	bls.n	800362e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_RTC_SetDate+0x164>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_RTC_SetDate+0x168>)
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035ce:	69f9      	ldr	r1, [r7, #28]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f8ee 	bl	80037b2 <RTC_WriteTimeCounter>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2204      	movs	r2, #4
 80035e0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e027      	b.n	800363c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f907 	bl	8003800 <RTC_ReadAlarmCounter>
 80035f2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d018      	beq.n	800362e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	429a      	cmp	r2, r3
 8003602:	d214      	bcs.n	800362e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800360a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800360e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f90d 	bl	8003832 <RTC_WriteAlarmCounter>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2204      	movs	r2, #4
 8003622:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e006      	b.n	800363c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	91a2b3c5 	.word	0x91a2b3c5
 8003648:	aaaaaaab 	.word	0xaaaaaaab
 800364c:	00015180 	.word	0x00015180

08003650 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2100      	movs	r1, #0
 8003662:	460a      	mov	r2, r1
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	460a      	mov	r2, r1
 8003668:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_RTC_GetDate+0x26>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e03a      	b.n	80036f0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	2200      	movs	r2, #0
 8003680:	4619      	mov	r1, r3
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fe56 	bl	8003334 <HAL_RTC_GetTime>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e02e      	b.n	80036f0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	7b1a      	ldrb	r2, [r3, #12]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	7bda      	ldrb	r2, [r3, #15]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	7b5a      	ldrb	r2, [r3, #13]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	7b9a      	ldrb	r2, [r3, #14]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	78db      	ldrb	r3, [r3, #3]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f92f 	bl	8003920 <RTC_ByteToBcd2>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f926 	bl	8003920 <RTC_ByteToBcd2>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	789b      	ldrb	r3, [r3, #2]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f91d 	bl	8003920 <RTC_ByteToBcd2>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e01d      	b.n	800374a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0208 	bic.w	r2, r2, #8
 800371c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800371e:	f7fd ffb7 	bl	8001690 <HAL_GetTick>
 8003722:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003724:	e009      	b.n	800373a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003726:	f7fd ffb3 	bl	8001690 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003734:	d901      	bls.n	800373a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e007      	b.n	800374a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ee      	beq.n	8003726 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	827b      	strh	r3, [r7, #18]
 800375e:	2300      	movs	r3, #0
 8003760:	823b      	strh	r3, [r7, #16]
 8003762:	2300      	movs	r3, #0
 8003764:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003782:	8a7a      	ldrh	r2, [r7, #18]
 8003784:	8a3b      	ldrh	r3, [r7, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	d008      	beq.n	800379c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800378a:	8a3b      	ldrh	r3, [r7, #16]
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	b29b      	uxth	r3, r3
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e004      	b.n	80037a6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800379c:	8a7b      	ldrh	r3, [r7, #18]
 800379e:	041a      	lsls	r2, r3, #16
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80037a6:	697b      	ldr	r3, [r7, #20]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f85d 	bl	8003880 <RTC_EnterInitMode>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e011      	b.n	80037f6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	0c12      	lsrs	r2, r2, #16
 80037da:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b292      	uxth	r2, r2
 80037e4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f872 	bl	80038d0 <RTC_ExitInitMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	81fb      	strh	r3, [r7, #14]
 800380c:	2300      	movs	r3, #0
 800380e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	041a      	lsls	r2, r3, #16
 8003824:	89bb      	ldrh	r3, [r7, #12]
 8003826:	4313      	orrs	r3, r2
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f81d 	bl	8003880 <RTC_EnterInitMode>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e011      	b.n	8003876 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	0c12      	lsrs	r2, r2, #16
 800385a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	b292      	uxth	r2, r2
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f832 	bl	80038d0 <RTC_ExitInitMode>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800388c:	f7fd ff00 	bl	8001690 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003892:	e009      	b.n	80038a8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003894:	f7fd fefc 	bl	8001690 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a2:	d901      	bls.n	80038a8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e00f      	b.n	80038c8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0ee      	beq.n	8003894 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0210 	orr.w	r2, r2, #16
 80038c4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0210 	bic.w	r2, r2, #16
 80038ea:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80038ec:	f7fd fed0 	bl	8001690 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038f2:	e009      	b.n	8003908 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038f4:	f7fd fecc 	bl	8001690 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003902:	d901      	bls.n	8003908 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e007      	b.n	8003918 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0ee      	beq.n	80038f4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800392e:	e005      	b.n	800393c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	3b0a      	subs	r3, #10
 800393a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d8f6      	bhi.n	8003930 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	b2da      	uxtb	r2, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	4313      	orrs	r3, r2
 800394e:	b2db      	uxtb	r3, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4413      	add	r3, r2
 8003988:	b2db      	uxtb	r3, r3
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7bdb      	ldrb	r3, [r3, #15]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7b5b      	ldrb	r3, [r3, #13]
 80039b8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7b9b      	ldrb	r3, [r3, #14]
 80039be:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e06f      	b.n	8003aa6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d011      	beq.n	80039f0 <RTC_DateUpdate+0x5c>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d00e      	beq.n	80039f0 <RTC_DateUpdate+0x5c>
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d00b      	beq.n	80039f0 <RTC_DateUpdate+0x5c>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b07      	cmp	r3, #7
 80039dc:	d008      	beq.n	80039f0 <RTC_DateUpdate+0x5c>
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d005      	beq.n	80039f0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b0a      	cmp	r3, #10
 80039e8:	d002      	beq.n	80039f0 <RTC_DateUpdate+0x5c>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d117      	bne.n	8003a20 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b1e      	cmp	r3, #30
 80039f4:	d803      	bhi.n	80039fe <RTC_DateUpdate+0x6a>
      {
        day++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3301      	adds	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80039fc:	e050      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d005      	beq.n	8003a10 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	3301      	adds	r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003a0e:	e047      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003a10:	2301      	movs	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003a14:	2301      	movs	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
          year++;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003a1e:	e03f      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d008      	beq.n	8003a38 <RTC_DateUpdate+0xa4>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d005      	beq.n	8003a38 <RTC_DateUpdate+0xa4>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b09      	cmp	r3, #9
 8003a30:	d002      	beq.n	8003a38 <RTC_DateUpdate+0xa4>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b0b      	cmp	r3, #11
 8003a36:	d10c      	bne.n	8003a52 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b1d      	cmp	r3, #29
 8003a3c:	d803      	bhi.n	8003a46 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003a44:	e02c      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003a50:	e026      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b1b      	cmp	r3, #27
 8003a5c:	d803      	bhi.n	8003a66 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e01c      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b1c      	cmp	r3, #28
 8003a6a:	d111      	bne.n	8003a90 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f839 	bl	8003ae8 <RTC_IsLeapYear>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e00d      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3301      	adds	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e007      	b.n	8003aa0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b1d      	cmp	r3, #29
 8003a94:	d104      	bne.n	8003aa0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d38b      	bcc.n	80039c6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6978      	ldr	r0, [r7, #20]
 8003ad2:	f000 f83b 	bl	8003b4c <RTC_WeekDayNum>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	731a      	strb	r2, [r3, #12]
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e01d      	b.n	8003b3e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <RTC_IsLeapYear+0x60>)
 8003b06:	fba2 1203 	umull	r1, r2, r2, r3
 8003b0a:	0952      	lsrs	r2, r2, #5
 8003b0c:	2164      	movs	r1, #100	; 0x64
 8003b0e:	fb01 f202 	mul.w	r2, r1, r2
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00f      	b.n	8003b3e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <RTC_IsLeapYear+0x60>)
 8003b22:	fba2 1203 	umull	r1, r2, r2, r3
 8003b26:	09d2      	lsrs	r2, r2, #7
 8003b28:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b2c:	fb01 f202 	mul.w	r2, r1, r2
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003b3c:	2300      	movs	r3, #0
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	51eb851f 	.word	0x51eb851f

08003b4c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003b6a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d82d      	bhi.n	8003bce <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <RTC_WeekDayNum+0xe4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	085a      	lsrs	r2, r3, #1
 8003b86:	78bb      	ldrb	r3, [r7, #2]
 8003b88:	441a      	add	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	4926      	ldr	r1, [pc, #152]	; (8003c34 <RTC_WeekDayNum+0xe8>)
 8003b9c:	fba1 1303 	umull	r1, r3, r1, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	4922      	ldr	r1, [pc, #136]	; (8003c34 <RTC_WeekDayNum+0xe8>)
 8003baa:	fba1 1303 	umull	r1, r3, r1, r3
 8003bae:	09db      	lsrs	r3, r3, #7
 8003bb0:	4413      	add	r3, r2
 8003bb2:	1d1a      	adds	r2, r3, #4
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <RTC_WeekDayNum+0xec>)
 8003bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bba:	1ad1      	subs	r1, r2, r3
 8003bbc:	0849      	lsrs	r1, r1, #1
 8003bbe:	440b      	add	r3, r1
 8003bc0:	0899      	lsrs	r1, r3, #2
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a5b      	subs	r3, r3, r1
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e029      	b.n	8003c22 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <RTC_WeekDayNum+0xe4>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	085a      	lsrs	r2, r3, #1
 8003be2:	78bb      	ldrb	r3, [r7, #2]
 8003be4:	441a      	add	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	441a      	add	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	441a      	add	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4910      	ldr	r1, [pc, #64]	; (8003c34 <RTC_WeekDayNum+0xe8>)
 8003bf4:	fba1 1303 	umull	r1, r3, r1, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	1ad2      	subs	r2, r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	490d      	ldr	r1, [pc, #52]	; (8003c34 <RTC_WeekDayNum+0xe8>)
 8003c00:	fba1 1303 	umull	r1, r3, r1, r3
 8003c04:	09db      	lsrs	r3, r3, #7
 8003c06:	4413      	add	r3, r2
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <RTC_WeekDayNum+0xec>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	1ad1      	subs	r1, r2, r3
 8003c12:	0849      	lsrs	r1, r1, #1
 8003c14:	440b      	add	r3, r1
 8003c16:	0899      	lsrs	r1, r3, #2
 8003c18:	460b      	mov	r3, r1
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	1a5b      	subs	r3, r3, r1
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	b2db      	uxtb	r3, r3
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	38e38e39 	.word	0x38e38e39
 8003c34:	51eb851f 	.word	0x51eb851f
 8003c38:	24924925 	.word	0x24924925

08003c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e076      	b.n	8003d3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5e:	d009      	beq.n	8003c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
 8003c66:	e005      	b.n	8003c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd faf0 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	0c1a      	lsrs	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f002 0204 	and.w	r2, r2, #4
 8003d1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_Transmit+0x22>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e12d      	b.n	8003fc2 <HAL_SPI_Transmit+0x27e>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d6e:	f7fd fc8f 	bl	8001690 <HAL_GetTick>
 8003d72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d88:	e116      	b.n	8003fb8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_Transmit+0x52>
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d9a:	e10d      	b.n	8003fb8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d10f      	bne.n	8003e04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d007      	beq.n	8003e22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2a:	d14f      	bne.n	8003ecc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Transmit+0xf6>
 8003e34:	8afb      	ldrh	r3, [r7, #22]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d142      	bne.n	8003ec0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e5e:	e02f      	b.n	8003ec0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d112      	bne.n	8003e94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e92:	e015      	b.n	8003ec0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e94:	f7fd fbfc 	bl	8001690 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d803      	bhi.n	8003eac <HAL_SPI_Transmit+0x168>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d102      	bne.n	8003eb2 <HAL_SPI_Transmit+0x16e>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ebe:	e07b      	b.n	8003fb8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ca      	bne.n	8003e60 <HAL_SPI_Transmit+0x11c>
 8003eca:	e050      	b.n	8003f6e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Transmit+0x196>
 8003ed4:	8afb      	ldrh	r3, [r7, #22]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d144      	bne.n	8003f64 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f00:	e030      	b.n	8003f64 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d113      	bne.n	8003f38 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f36:	e015      	b.n	8003f64 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f38:	f7fd fbaa 	bl	8001690 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d803      	bhi.n	8003f50 <HAL_SPI_Transmit+0x20c>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d102      	bne.n	8003f56 <HAL_SPI_Transmit+0x212>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f62:	e029      	b.n	8003fb8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1c9      	bne.n	8003f02 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fbcc 	bl	8004710 <SPI_EndRxTxTransaction>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e003      	b.n	8003fb8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af02      	add	r7, sp, #8
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
 8003fec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fee:	e0fb      	b.n	80041e8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff8:	d112      	bne.n	8004020 <HAL_SPI_Receive+0x56>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10e      	bne.n	8004020 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2204      	movs	r2, #4
 8004006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8ef 	bl	80041fa <HAL_SPI_TransmitReceive>
 800401c:	4603      	mov	r3, r0
 800401e:	e0e8      	b.n	80041f2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_SPI_Receive+0x64>
 800402a:	2302      	movs	r3, #2
 800402c:	e0e1      	b.n	80041f2 <HAL_SPI_Receive+0x228>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004036:	f7fd fb2b 	bl	8001690 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_Receive+0x7e>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800404c:	e0cc      	b.n	80041e8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2204      	movs	r2, #4
 8004052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004094:	d10f      	bne.n	80040b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d007      	beq.n	80040d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d16a      	bne.n	80041b2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040dc:	e032      	b.n	8004144 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d115      	bne.n	8004118 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f103 020c 	add.w	r2, r3, #12
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004116:	e015      	b.n	8004144 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004118:	f7fd faba 	bl	8001690 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d803      	bhi.n	8004130 <HAL_SPI_Receive+0x166>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Receive+0x16c>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004142:	e051      	b.n	80041e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1c7      	bne.n	80040de <HAL_SPI_Receive+0x114>
 800414e:	e035      	b.n	80041bc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d113      	bne.n	8004186 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	b292      	uxth	r2, r2
 800416a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004184:	e015      	b.n	80041b2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004186:	f7fd fa83 	bl	8001690 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d803      	bhi.n	800419e <HAL_SPI_Receive+0x1d4>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d102      	bne.n	80041a4 <HAL_SPI_Receive+0x1da>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80041b0:	e01a      	b.n	80041e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1c9      	bne.n	8004150 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	6839      	ldr	r1, [r7, #0]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fa53 	bl	800466c <SPI_EndRxTransaction>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
 80041de:	e003      	b.n	80041e8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08c      	sub	sp, #48	; 0x30
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004208:	2301      	movs	r3, #1
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x26>
 800421c:	2302      	movs	r3, #2
 800421e:	e198      	b.n	8004552 <HAL_SPI_TransmitReceive+0x358>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004228:	f7fd fa32 	bl	8001690 <HAL_GetTick>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004246:	2b01      	cmp	r3, #1
 8004248:	d00f      	beq.n	800426a <HAL_SPI_TransmitReceive+0x70>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004250:	d107      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x68>
 800425a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004268:	e16d      	b.n	8004546 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_SPI_TransmitReceive+0x82>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_SPI_TransmitReceive+0x82>
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004282:	e160      	b.n	8004546 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b04      	cmp	r3, #4
 800428e:	d003      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2205      	movs	r2, #5
 8004294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	887a      	ldrh	r2, [r7, #2]
 80042ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	887a      	ldrh	r2, [r7, #2]
 80042ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d007      	beq.n	80042ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f4:	d17c      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x10a>
 80042fe:	8b7b      	ldrh	r3, [r7, #26]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d16a      	bne.n	80043da <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	1c9a      	adds	r2, r3, #2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004328:	e057      	b.n	80043da <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d11b      	bne.n	8004370 <HAL_SPI_TransmitReceive+0x176>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_SPI_TransmitReceive+0x176>
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d113      	bne.n	8004370 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	881a      	ldrh	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	1c9a      	adds	r2, r3, #2
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d119      	bne.n	80043b2 <HAL_SPI_TransmitReceive+0x1b8>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d014      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	b292      	uxth	r2, r2
 8004394:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ae:	2301      	movs	r3, #1
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043b2:	f7fd f96d 	bl	8001690 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043be:	429a      	cmp	r2, r3
 80043c0:	d80b      	bhi.n	80043da <HAL_SPI_TransmitReceive+0x1e0>
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d007      	beq.n	80043da <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80043d8:	e0b5      	b.n	8004546 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1a2      	bne.n	800432a <HAL_SPI_TransmitReceive+0x130>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d19d      	bne.n	800432a <HAL_SPI_TransmitReceive+0x130>
 80043ee:	e080      	b.n	80044f2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x204>
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d16f      	bne.n	80044de <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004424:	e05b      	b.n	80044de <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d11c      	bne.n	800446e <HAL_SPI_TransmitReceive+0x274>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <HAL_SPI_TransmitReceive+0x274>
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d114      	bne.n	800446e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d119      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x2b6>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d014      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ac:	2301      	movs	r3, #1
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044b0:	f7fd f8ee 	bl	8001690 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044bc:	429a      	cmp	r2, r3
 80044be:	d803      	bhi.n	80044c8 <HAL_SPI_TransmitReceive+0x2ce>
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x2d4>
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80044dc:	e033      	b.n	8004546 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d19e      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x22c>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d199      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f90a 	bl	8004710 <SPI_EndRxTxTransaction>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800450e:	e01a      	b.n	8004546 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453c:	e003      	b.n	8004546 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800454e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004552:	4618      	mov	r0, r3
 8004554:	3730      	adds	r7, #48	; 0x30
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800456c:	f7fd f890 	bl	8001690 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	4413      	add	r3, r2
 800457a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800457c:	f7fd f888 	bl	8001690 <HAL_GetTick>
 8004580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	015b      	lsls	r3, r3, #5
 8004588:	0d1b      	lsrs	r3, r3, #20
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	fb02 f303 	mul.w	r3, r2, r3
 8004590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004592:	e054      	b.n	800463e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d050      	beq.n	800463e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800459c:	f7fd f878 	bl	8001690 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d902      	bls.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d13d      	bne.n	800462e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d111      	bne.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d4:	d004      	beq.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045de:	d107      	bne.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f8:	d10f      	bne.n	800461a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e017      	b.n	800465e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3b01      	subs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	429a      	cmp	r2, r3
 800465a:	d19b      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000004 	.word	0x20000004

0800466c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004680:	d111      	bne.n	80046a6 <SPI_EndRxTransaction+0x3a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d004      	beq.n	8004696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d107      	bne.n	80046a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ae:	d117      	bne.n	80046e0 <SPI_EndRxTransaction+0x74>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d112      	bne.n	80046e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2101      	movs	r1, #1
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f7ff ff49 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01a      	beq.n	8004706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e013      	b.n	8004708 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff36 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e000      	b.n	8004708 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff ff18 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e000      	b.n	8004744 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fde8 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 faa8 	bl	8004ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e041      	b.n	8004880 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fc fd7b 	bl	800130c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f000 fa59 	bl	8004ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_TIM_PWM_Start+0x24>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e022      	b.n	80048f2 <HAL_TIM_PWM_Start+0x6a>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d109      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x3e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e015      	b.n	80048f2 <HAL_TIM_PWM_Start+0x6a>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d109      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x58>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e008      	b.n	80048f2 <HAL_TIM_PWM_Start+0x6a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e05e      	b.n	80049b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0x82>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004908:	e013      	b.n	8004932 <HAL_TIM_PWM_Start+0xaa>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0x92>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	e00b      	b.n	8004932 <HAL_TIM_PWM_Start+0xaa>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xa2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	e003      	b.n	8004932 <HAL_TIM_PWM_Start+0xaa>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fc50 	bl	80051e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIM_PWM_Start+0x138>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d107      	bne.n	800495a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_TIM_PWM_Start+0x138>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_TIM_PWM_Start+0xfa>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d009      	beq.n	8004982 <HAL_TIM_PWM_Start+0xfa>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <HAL_TIM_PWM_Start+0x13c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_TIM_PWM_Start+0xfa>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <HAL_TIM_PWM_Start+0x140>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d111      	bne.n	80049a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b06      	cmp	r3, #6
 8004992:	d010      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	e007      	b.n	80049b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800

080049cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0ae      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	f200 809f 	bhi.w	8004b38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004b39 	.word	0x08004b39
 8004a08:	08004b39 	.word	0x08004b39
 8004a0c:	08004b39 	.word	0x08004b39
 8004a10:	08004a75 	.word	0x08004a75
 8004a14:	08004b39 	.word	0x08004b39
 8004a18:	08004b39 	.word	0x08004b39
 8004a1c:	08004b39 	.word	0x08004b39
 8004a20:	08004ab7 	.word	0x08004ab7
 8004a24:	08004b39 	.word	0x08004b39
 8004a28:	08004b39 	.word	0x08004b39
 8004a2c:	08004b39 	.word	0x08004b39
 8004a30:	08004af7 	.word	0x08004af7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f9b2 	bl	8004da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0204 	bic.w	r2, r2, #4
 8004a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6999      	ldr	r1, [r3, #24]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	619a      	str	r2, [r3, #24]
      break;
 8004a72:	e064      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f9f8 	bl	8004e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6999      	ldr	r1, [r3, #24]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	619a      	str	r2, [r3, #24]
      break;
 8004ab4:	e043      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fa41 	bl	8004f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0208 	orr.w	r2, r2, #8
 8004ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0204 	bic.w	r2, r2, #4
 8004ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69d9      	ldr	r1, [r3, #28]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	61da      	str	r2, [r3, #28]
      break;
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fa8b 	bl	8005018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69d9      	ldr	r1, [r3, #28]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	021a      	lsls	r2, r3, #8
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	61da      	str	r2, [r3, #28]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_ConfigClockSource+0x1c>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0b4      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x186>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba4:	d03e      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004baa:	f200 8087 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	f000 8086 	beq.w	8004cc2 <HAL_TIM_ConfigClockSource+0x172>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d87f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bbc:	2b70      	cmp	r3, #112	; 0x70
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d87b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d050      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x11a>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d877      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b50      	cmp	r3, #80	; 0x50
 8004bce:	d03c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xfa>
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d873      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d058      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x13a>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d86f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b30      	cmp	r3, #48	; 0x30
 8004bde:	d064      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d86b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d060      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d867      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d05a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	f000 facc 	bl	80051a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e04f      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	f000 fab5 	bl	80051a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e03c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fa2c 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	; 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa83 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004c68:	e02c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 fa4a 	bl	8005110 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2160      	movs	r1, #96	; 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fa73 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004c88:	e01c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fa0c 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2140      	movs	r1, #64	; 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fa63 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e00c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 fa5a 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004cba:	e003      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <TIM_Base_SetConfig+0xb8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0x30>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0x30>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <TIM_Base_SetConfig+0xbc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0x30>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <TIM_Base_SetConfig+0xc0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <TIM_Base_SetConfig+0xb8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_Base_SetConfig+0x62>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d30:	d007      	beq.n	8004d42 <TIM_Base_SetConfig+0x62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <TIM_Base_SetConfig+0xbc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_Base_SetConfig+0x62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a18      	ldr	r2, [pc, #96]	; (8004da0 <TIM_Base_SetConfig+0xc0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d108      	bne.n	8004d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <TIM_Base_SetConfig+0xb8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d103      	bne.n	8004d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	615a      	str	r2, [r3, #20]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800

08004da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0201 	bic.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 0302 	bic.w	r3, r3, #2
 8004dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <TIM_OC1_SetConfig+0xc8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10c      	bne.n	8004e1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0308 	bic.w	r3, r3, #8
 8004e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a13      	ldr	r2, [pc, #76]	; (8004e6c <TIM_OC1_SetConfig+0xc8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d111      	bne.n	8004e46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00

08004e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0210 	bic.w	r2, r3, #16
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0320 	bic.w	r3, r3, #32
 8004eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <TIM_OC2_SetConfig+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10d      	bne.n	8004eec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <TIM_OC2_SetConfig+0xd0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d113      	bne.n	8004f1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00

08004f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0303 	bic.w	r3, r3, #3
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <TIM_OC3_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10d      	bne.n	8004fbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <TIM_OC3_SetConfig+0xd0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40012c00 	.word	0x40012c00

08005018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <TIM_OC4_SetConfig+0x98>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d109      	bne.n	800508c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	019b      	lsls	r3, r3, #6
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	40012c00 	.word	0x40012c00

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0210 	bic.w	r2, r3, #16
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	031b      	lsls	r3, r3, #12
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	f043 0307 	orr.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2201      	movs	r2, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1a      	ldr	r2, [r3, #32]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	fa01 f303 	lsl.w	r3, r1, r3
 8005218:	431a      	orrs	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e046      	b.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d009      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800

080052e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e03d      	b.n	800537c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e042      	b.n	800541e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fc f82d 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2224      	movs	r2, #36	; 0x24
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f82c 	bl	8005428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005462:	f023 030c 	bic.w	r3, r3, #12
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	430b      	orrs	r3, r1
 800546e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2c      	ldr	r2, [pc, #176]	; (800553c <UART_SetConfig+0x114>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d103      	bne.n	8005498 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fd fc8e 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	e002      	b.n	800549e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005498:	f7fd fc76 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 800549c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009a      	lsls	r2, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <UART_SetConfig+0x118>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	0119      	lsls	r1, r3, #4
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009a      	lsls	r2, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <UART_SetConfig+0x118>)
 80054d6:	fba3 0302 	umull	r0, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2064      	movs	r0, #100	; 0x64
 80054de:	fb00 f303 	mul.w	r3, r0, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a15      	ldr	r2, [pc, #84]	; (8005540 <UART_SetConfig+0x118>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f4:	4419      	add	r1, r3
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009a      	lsls	r2, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	fbb2 f2f3 	udiv	r2, r2, r3
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <UART_SetConfig+0x118>)
 800550e:	fba3 0302 	umull	r0, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2064      	movs	r0, #100	; 0x64
 8005516:	fb00 f303 	mul.w	r3, r0, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a07      	ldr	r2, [pc, #28]	; (8005540 <UART_SetConfig+0x118>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	440a      	add	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40013800 	.word	0x40013800
 8005540:	51eb851f 	.word	0x51eb851f

08005544 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fc f8a7 	bl	80016a4 <HAL_Delay>
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af02      	add	r7, sp, #8
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	70fb      	strb	r3, [r7, #3]
 800556a:	4613      	mov	r3, r2
 800556c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	f023 030f 	bic.w	r3, r3, #15
 8005574:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7adb      	ldrb	r3, [r3, #11]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	f043 0308 	orr.w	r3, r3, #8
 800558a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	f043 0308 	orr.w	r3, r3, #8
 8005592:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8005594:	78bb      	ldrb	r3, [r7, #2]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d108      	bne.n	80055ac <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	73bb      	strb	r3, [r7, #14]
 80055aa:	e00a      	b.n	80055c2 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80055ac:	78bb      	ldrb	r3, [r7, #2]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	f043 0304 	orr.w	r3, r3, #4
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7ff ffb9 	bl	8005544 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80055e0:	2001      	movs	r0, #1
 80055e2:	f7ff ffaf 	bl	8005544 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	791b      	ldrb	r3, [r3, #4]
 80055f2:	b299      	uxth	r1, r3
 80055f4:	f107 0208 	add.w	r2, r7, #8
 80055f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2304      	movs	r3, #4
 8005600:	f7fc fc94 	bl	8001f2c <HAL_I2C_Master_Transmit>
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	4611      	mov	r1, r2
 8005618:	461a      	mov	r2, r3
 800561a:	460b      	mov	r3, r1
 800561c:	71fb      	strb	r3, [r7, #7]
 800561e:	4613      	mov	r3, r2
 8005620:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	79fa      	ldrb	r2, [r7, #7]
 800562c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	79ba      	ldrb	r2, [r7, #6]
 8005632:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	7e3a      	ldrb	r2, [r7, #24]
 8005638:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2228      	movs	r2, #40	; 0x28
 800563e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2206      	movs	r2, #6
 8005644:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	220c      	movs	r2, #12
 800564a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2214      	movs	r2, #20
 8005650:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2208      	movs	r2, #8
 8005656:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8005658:	2032      	movs	r0, #50	; 0x32
 800565a:	f7ff ff73 	bl	8005544 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800565e:	2200      	movs	r2, #0
 8005660:	2133      	movs	r1, #51	; 0x33
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff ff7b 	bl	800555e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005668:	2200      	movs	r2, #0
 800566a:	2133      	movs	r1, #51	; 0x33
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff76 	bl	800555e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005672:	2005      	movs	r0, #5
 8005674:	f7ff ff66 	bl	8005544 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8005678:	2200      	movs	r2, #0
 800567a:	2132      	movs	r1, #50	; 0x32
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff ff6e 	bl	800555e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005682:	2005      	movs	r0, #5
 8005684:	f7ff ff5e 	bl	8005544 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8005688:	2200      	movs	r2, #0
 800568a:	2120      	movs	r1, #32
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff66 	bl	800555e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005692:	2005      	movs	r0, #5
 8005694:	f7ff ff56 	bl	8005544 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	79db      	ldrb	r3, [r3, #7]
 800569c:	2200      	movs	r2, #0
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff5c 	bl	800555e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	7a1b      	ldrb	r3, [r3, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	4619      	mov	r1, r3
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ff55 	bl	800555e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	7a5b      	ldrb	r3, [r3, #9]
 80056b8:	2200      	movs	r2, #0
 80056ba:	4619      	mov	r1, r3
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff ff4e 	bl	800555e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	7a9b      	ldrb	r3, [r3, #10]
 80056c6:	2200      	movs	r2, #0
 80056c8:	4619      	mov	r1, r3
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff ff47 	bl	800555e <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80056d0:	2200      	movs	r2, #0
 80056d2:	2101      	movs	r1, #1
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff ff42 	bl	800555e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80056da:	2200      	movs	r2, #0
 80056dc:	2102      	movs	r1, #2
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff3d 	bl	800555e <CLCD_WriteI2C>
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
 80056f8:	4613      	mov	r3, r2
 80056fa:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	795b      	ldrb	r3, [r3, #5]
 8005704:	78fa      	ldrb	r2, [r7, #3]
 8005706:	429a      	cmp	r2, r3
 8005708:	d303      	bcc.n	8005712 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	795b      	ldrb	r3, [r3, #5]
 800570e:	3b01      	subs	r3, #1
 8005710:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	799b      	ldrb	r3, [r3, #6]
 8005716:	78ba      	ldrb	r2, [r7, #2]
 8005718:	429a      	cmp	r2, r3
 800571a:	d303      	bcc.n	8005724 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	799b      	ldrb	r3, [r3, #6]
 8005720:	3b01      	subs	r3, #1
 8005722:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8005724:	78bb      	ldrb	r3, [r7, #2]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	e013      	b.n	8005758 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8005730:	78bb      	ldrb	r3, [r7, #2]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d103      	bne.n	800573e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	3340      	adds	r3, #64	; 0x40
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	e00c      	b.n	8005758 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800573e:	78bb      	ldrb	r3, [r7, #2]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d103      	bne.n	800574c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	3314      	adds	r3, #20
 8005748:	73fb      	strb	r3, [r7, #15]
 800574a:	e005      	b.n	8005758 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800574c:	78bb      	ldrb	r3, [r7, #2]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d102      	bne.n	8005758 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	3354      	adds	r3, #84	; 0x54
 8005756:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2200      	movs	r2, #0
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fefa 	bl	800555e <CLCD_WriteI2C>
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	2201      	movs	r2, #1
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff feea 	bl	800555e <CLCD_WriteI2C>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800579c:	e007      	b.n	80057ae <CLCD_I2C_WriteString+0x1c>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	603a      	str	r2, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ffe2 	bl	8005772 <CLCD_I2C_WriteChar>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f3      	bne.n	800579e <CLCD_I2C_WriteString+0xc>
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <initApp>:
extern CLCD_I2C_Name LCD1;
extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c1;

void initApp(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af02      	add	r7, sp, #8
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80057c6:	2104      	movs	r1, #4
 80057c8:	4809      	ldr	r0, [pc, #36]	; (80057f0 <initApp+0x30>)
 80057ca:	f7ff f85d 	bl	8004888 <HAL_TIM_PWM_Start>

    CLCD_I2C_Init(&LCD1, &hi2c1, 0x7E, 20, 4);
 80057ce:	2304      	movs	r3, #4
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2314      	movs	r3, #20
 80057d4:	227e      	movs	r2, #126	; 0x7e
 80057d6:	4907      	ldr	r1, [pc, #28]	; (80057f4 <initApp+0x34>)
 80057d8:	4807      	ldr	r0, [pc, #28]	; (80057f8 <initApp+0x38>)
 80057da:	f7ff ff17 	bl	800560c <CLCD_I2C_Init>

    HAL_GPIO_WritePin(LED_LCD_GPIO_Port, LED_LCD_Pin, GPIO_PIN_SET);
 80057de:	2201      	movs	r2, #1
 80057e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057e4:	4805      	ldr	r0, [pc, #20]	; (80057fc <initApp+0x3c>)
 80057e6:	f7fc fa13 	bl	8001c10 <HAL_GPIO_WritePin>
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000184 	.word	0x20000184
 80057f4:	2000007c 	.word	0x2000007c
 80057f8:	20000214 	.word	0x20000214
 80057fc:	40010c00 	.word	0x40010c00

08005800 <mainMenu>:

void mainMenu(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8005804:	2200      	movs	r2, #0
 8005806:	2100      	movs	r1, #0
 8005808:	4811      	ldr	r0, [pc, #68]	; (8005850 <mainMenu+0x50>)
 800580a:	f7ff ff6f 	bl	80056ec <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "SET POINT:");
 800580e:	4911      	ldr	r1, [pc, #68]	; (8005854 <mainMenu+0x54>)
 8005810:	480f      	ldr	r0, [pc, #60]	; (8005850 <mainMenu+0x50>)
 8005812:	f7ff ffbe 	bl	8005792 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8005816:	2201      	movs	r2, #1
 8005818:	2100      	movs	r1, #0
 800581a:	480d      	ldr	r0, [pc, #52]	; (8005850 <mainMenu+0x50>)
 800581c:	f7ff ff66 	bl	80056ec <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "REAL VALUE:");
 8005820:	490d      	ldr	r1, [pc, #52]	; (8005858 <mainMenu+0x58>)
 8005822:	480b      	ldr	r0, [pc, #44]	; (8005850 <mainMenu+0x50>)
 8005824:	f7ff ffb5 	bl	8005792 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8005828:	2202      	movs	r2, #2
 800582a:	2100      	movs	r1, #0
 800582c:	4808      	ldr	r0, [pc, #32]	; (8005850 <mainMenu+0x50>)
 800582e:	f7ff ff5d 	bl	80056ec <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "TIME RUNNER:");
 8005832:	490a      	ldr	r1, [pc, #40]	; (800585c <mainMenu+0x5c>)
 8005834:	4806      	ldr	r0, [pc, #24]	; (8005850 <mainMenu+0x50>)
 8005836:	f7ff ffac 	bl	8005792 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 0, 3);
 800583a:	2203      	movs	r2, #3
 800583c:	2100      	movs	r1, #0
 800583e:	4804      	ldr	r0, [pc, #16]	; (8005850 <mainMenu+0x50>)
 8005840:	f7ff ff54 	bl	80056ec <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "STATUS:");
 8005844:	4906      	ldr	r1, [pc, #24]	; (8005860 <mainMenu+0x60>)
 8005846:	4802      	ldr	r0, [pc, #8]	; (8005850 <mainMenu+0x50>)
 8005848:	f7ff ffa3 	bl	8005792 <CLCD_I2C_WriteString>
}
 800584c:	bf00      	nop
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000214 	.word	0x20000214
 8005854:	08006580 	.word	0x08006580
 8005858:	0800658c 	.word	0x0800658c
 800585c:	08006598 	.word	0x08006598
 8005860:	080065a8 	.word	0x080065a8

08005864 <updateSetpoint>:

void updateSetpoint(uint16_t temp)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	80fb      	strh	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 13, 0);
 800586e:	2200      	movs	r2, #0
 8005870:	210d      	movs	r1, #13
 8005872:	480a      	ldr	r0, [pc, #40]	; (800589c <updateSetpoint+0x38>)
 8005874:	f7ff ff3a 	bl	80056ec <CLCD_I2C_SetCursor>
    char buffer[5];
    sprintf(buffer, "%06i", temp);
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	4908      	ldr	r1, [pc, #32]	; (80058a0 <updateSetpoint+0x3c>)
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f9bf 	bl	8005c04 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	4619      	mov	r1, r3
 800588c:	4803      	ldr	r0, [pc, #12]	; (800589c <updateSetpoint+0x38>)
 800588e:	f7ff ff80 	bl	8005792 <CLCD_I2C_WriteString>
}
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000214 	.word	0x20000214
 80058a0:	080065b0 	.word	0x080065b0

080058a4 <updateRealValue>:

void updateRealValue(uint16_t temp)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	80fb      	strh	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 13, 1);
 80058ae:	2201      	movs	r2, #1
 80058b0:	210d      	movs	r1, #13
 80058b2:	480a      	ldr	r0, [pc, #40]	; (80058dc <updateRealValue+0x38>)
 80058b4:	f7ff ff1a 	bl	80056ec <CLCD_I2C_SetCursor>
    char buffer[5];
    sprintf(buffer, "%06i", temp);
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <updateRealValue+0x3c>)
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 f99f 	bl	8005c04 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80058c6:	f107 0308 	add.w	r3, r7, #8
 80058ca:	4619      	mov	r1, r3
 80058cc:	4803      	ldr	r0, [pc, #12]	; (80058dc <updateRealValue+0x38>)
 80058ce:	f7ff ff60 	bl	8005792 <CLCD_I2C_WriteString>
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000214 	.word	0x20000214
 80058e0:	080065b0 	.word	0x080065b0

080058e4 <updateStatus>:

void updateStatus(uint8_t status)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_SetCursor(&LCD1, 13, 3);
 80058ee:	2203      	movs	r2, #3
 80058f0:	210d      	movs	r1, #13
 80058f2:	480a      	ldr	r0, [pc, #40]	; (800591c <updateStatus+0x38>)
 80058f4:	f7ff fefa 	bl	80056ec <CLCD_I2C_SetCursor>
    if (status == 0)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <updateStatus+0x22>
        CLCD_I2C_WriteString(&LCD1, "STOP");
 80058fe:	4908      	ldr	r1, [pc, #32]	; (8005920 <updateStatus+0x3c>)
 8005900:	4806      	ldr	r0, [pc, #24]	; (800591c <updateStatus+0x38>)
 8005902:	f7ff ff46 	bl	8005792 <CLCD_I2C_WriteString>
    if (status == 1)
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d103      	bne.n	8005914 <updateStatus+0x30>
        CLCD_I2C_WriteString(&LCD1, "RUN ");
 800590c:	4905      	ldr	r1, [pc, #20]	; (8005924 <updateStatus+0x40>)
 800590e:	4803      	ldr	r0, [pc, #12]	; (800591c <updateStatus+0x38>)
 8005910:	f7ff ff3f 	bl	8005792 <CLCD_I2C_WriteString>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000214 	.word	0x20000214
 8005920:	080065b8 	.word	0x080065b8
 8005924:	080065c0 	.word	0x080065c0

08005928 <initTime>:

void initTime(void){
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
    HAL_RTC_Init(&hrtc);
 800592c:	4809      	ldr	r0, [pc, #36]	; (8005954 <initTime+0x2c>)
 800592e:	f7fd fbdd 	bl	80030ec <HAL_RTC_Init>
    HTime.Hours = 0;
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <initTime+0x30>)
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
    HTime.Minutes = 0;
 8005938:	4b07      	ldr	r3, [pc, #28]	; (8005958 <initTime+0x30>)
 800593a:	2200      	movs	r2, #0
 800593c:	705a      	strb	r2, [r3, #1]
    HTime.Seconds = 0;
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <initTime+0x30>)
 8005940:	2200      	movs	r2, #0
 8005942:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 8005944:	2200      	movs	r2, #0
 8005946:	4904      	ldr	r1, [pc, #16]	; (8005958 <initTime+0x30>)
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <initTime+0x2c>)
 800594a:	f7fd fc5b 	bl	8003204 <HAL_RTC_SetTime>
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	200000d0 	.word	0x200000d0
 8005958:	20000284 	.word	0x20000284

0800595c <updateTime>:

void updateTime(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
    char buffer[10];

    HAL_RTC_GetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 8005962:	2200      	movs	r2, #0
 8005964:	4921      	ldr	r1, [pc, #132]	; (80059ec <updateTime+0x90>)
 8005966:	4822      	ldr	r0, [pc, #136]	; (80059f0 <updateTime+0x94>)
 8005968:	f7fd fce4 	bl	8003334 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &HDate, RTC_FORMAT_BIN);
 800596c:	2200      	movs	r2, #0
 800596e:	4921      	ldr	r1, [pc, #132]	; (80059f4 <updateTime+0x98>)
 8005970:	481f      	ldr	r0, [pc, #124]	; (80059f0 <updateTime+0x94>)
 8005972:	f7fd fe6d 	bl	8003650 <HAL_RTC_GetDate>

    CLCD_I2C_SetCursor(&LCD1, 12, 2);
 8005976:	2202      	movs	r2, #2
 8005978:	210c      	movs	r1, #12
 800597a:	481f      	ldr	r0, [pc, #124]	; (80059f8 <updateTime+0x9c>)
 800597c:	f7ff feb6 	bl	80056ec <CLCD_I2C_SetCursor>
    sprintf(buffer, "%02d:", HTime.Hours);
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <updateTime+0x90>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	491c      	ldr	r1, [pc, #112]	; (80059fc <updateTime+0xa0>)
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f93a 	bl	8005c04 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	4619      	mov	r1, r3
 8005994:	4818      	ldr	r0, [pc, #96]	; (80059f8 <updateTime+0x9c>)
 8005996:	f7ff fefc 	bl	8005792 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 15, 2);
 800599a:	2202      	movs	r2, #2
 800599c:	210f      	movs	r1, #15
 800599e:	4816      	ldr	r0, [pc, #88]	; (80059f8 <updateTime+0x9c>)
 80059a0:	f7ff fea4 	bl	80056ec <CLCD_I2C_SetCursor>
    sprintf(buffer, "%02d:", HTime.Minutes);
 80059a4:	4b11      	ldr	r3, [pc, #68]	; (80059ec <updateTime+0x90>)
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	461a      	mov	r2, r3
 80059aa:	1d3b      	adds	r3, r7, #4
 80059ac:	4913      	ldr	r1, [pc, #76]	; (80059fc <updateTime+0xa0>)
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f928 	bl	8005c04 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	480f      	ldr	r0, [pc, #60]	; (80059f8 <updateTime+0x9c>)
 80059ba:	f7ff feea 	bl	8005792 <CLCD_I2C_WriteString>
    CLCD_I2C_SetCursor(&LCD1, 18, 2);
 80059be:	2202      	movs	r2, #2
 80059c0:	2112      	movs	r1, #18
 80059c2:	480d      	ldr	r0, [pc, #52]	; (80059f8 <updateTime+0x9c>)
 80059c4:	f7ff fe92 	bl	80056ec <CLCD_I2C_SetCursor>
    sprintf(buffer, "%02d", HTime.Seconds);
 80059c8:	4b08      	ldr	r3, [pc, #32]	; (80059ec <updateTime+0x90>)
 80059ca:	789b      	ldrb	r3, [r3, #2]
 80059cc:	461a      	mov	r2, r3
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	490b      	ldr	r1, [pc, #44]	; (8005a00 <updateTime+0xa4>)
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f916 	bl	8005c04 <siprintf>
    CLCD_I2C_WriteString(&LCD1, buffer);
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4806      	ldr	r0, [pc, #24]	; (80059f8 <updateTime+0x9c>)
 80059de:	f7ff fed8 	bl	8005792 <CLCD_I2C_WriteString>
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000284 	.word	0x20000284
 80059f0:	200000d0 	.word	0x200000d0
 80059f4:	20000288 	.word	0x20000288
 80059f8:	20000214 	.word	0x20000214
 80059fc:	080065c8 	.word	0x080065c8
 8005a00:	080065d0 	.word	0x080065d0

08005a04 <MAX6675_Init>:

#include "stm32f1xx.h" // Device header
#include "stdlib.h"
#include "stdio.h"

void MAX6675_Init() {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
    // Cài đặt SPI
    hspi2.Instance = SPI2;
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <MAX6675_Init+0x44>)
 8005a0a:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <MAX6675_Init+0x48>)
 8005a0c:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <MAX6675_Init+0x44>)
 8005a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a14:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <MAX6675_Init+0x44>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <MAX6675_Init+0x44>)
 8005a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a22:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <MAX6675_Init+0x44>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <MAX6675_Init+0x44>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <MAX6675_Init+0x44>)
 8005a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a36:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <MAX6675_Init+0x44>)
 8005a3a:	2238      	movs	r2, #56	; 0x38
 8005a3c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8005a3e:	4802      	ldr	r0, [pc, #8]	; (8005a48 <MAX6675_Init+0x44>)
 8005a40:	f7fe f8fc 	bl	8003c3c <HAL_SPI_Init>
}
 8005a44:	bf00      	nop
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200000e4 	.word	0x200000e4
 8005a4c:	40003800 	.word	0x40003800

08005a50 <getTem>:

uint32_t getTem(void){
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
	uint32_t temperature=0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
    uint16_t value;
    uint8_t txData = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	707b      	strb	r3, [r7, #1]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // Kích hoạt MAX6675
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a64:	481c      	ldr	r0, [pc, #112]	; (8005ad8 <getTem+0x88>)
 8005a66:	f7fc f8d3 	bl	8001c10 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2, &txData, 1, HAL_MAX_DELAY);          // Gửi 1 byte để khởi đầu giao tiếp.
 8005a6a:	1c79      	adds	r1, r7, #1
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a70:	2201      	movs	r2, #1
 8005a72:	481a      	ldr	r0, [pc, #104]	; (8005adc <getTem+0x8c>)
 8005a74:	f7fe f966 	bl	8003d44 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, (uint8_t *)&value, 2, HAL_MAX_DELAY); // Nhận 16 bit dữ liệu.
 8005a78:	1cb9      	adds	r1, r7, #2
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	2202      	movs	r2, #2
 8005a80:	4816      	ldr	r0, [pc, #88]	; (8005adc <getTem+0x8c>)
 8005a82:	f7fe faa2 	bl	8003fca <HAL_SPI_Receive>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // Vô hiệu hóa MAX6675
 8005a86:	2201      	movs	r2, #1
 8005a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a8c:	4812      	ldr	r0, [pc, #72]	; (8005ad8 <getTem+0x88>)
 8005a8e:	f7fc f8bf 	bl	8001c10 <HAL_GPIO_WritePin>

    // Xử lý giá trị đọc để tính nhiệt độ Celsius
    if (value & 0x8000) {
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da02      	bge.n	8005aa0 <getTem+0x50>
      // Bit dấu là 1, nghĩa là lỗi (thermocouple open)
      // Trong trường hợp này, bạn có thể xử lý lỗi hoặc ghi nhận một giá trị nhiệt độ lỗi.
      // Ví dụ:
      temperature = -1.0; // Giá trị nhiệt độ lỗi (điều này phụ thuộc vào ứng dụng của bạn)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	e016      	b.n	8005ace <getTem+0x7e>
    } else {
      // Xóa bit dấu và chia cho 4 để tính nhiệt độ Celsius
      temperature = (float)((value >> 3) * 0.25);
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	08db      	lsrs	r3, r3, #3
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fdce 	bl	8000648 <__aeabi_i2d>
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <getTem+0x90>)
 8005ab2:	f7fa fb4d 	bl	8000150 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4610      	mov	r0, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	f7fa fe55 	bl	800076c <__aeabi_d2f>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fa fea1 	bl	800080c <__aeabi_f2uiz>
 8005aca:	4603      	mov	r3, r0
 8005acc:	607b      	str	r3, [r7, #4]
    }

    return temperature;
 8005ace:	687b      	ldr	r3, [r7, #4]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40010c00 	.word	0x40010c00
 8005adc:	200000e4 	.word	0x200000e4
 8005ae0:	3fd00000 	.word	0x3fd00000

08005ae4 <PID_Init>:
 */
#include "pid.h"

// Khởi tạo bộ điều khiển PID
void    PID_Init(PIDController *pid, double kp, double ki, double kd, double setpoint)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	e9c7 2300 	strd	r2, r3, [r7]
    pid->Kp = kp;
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af6:	e9c1 2300 	strd	r2, r3, [r1]
    pid->Ki = ki;
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b00:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->Kd = kd;
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b0a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->setpoint = setpoint;
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b14:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0.0;
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->prev_error = 0.0;
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <PID_Update>:

// Cập nhật bộ điều khiển PID
double PID_Update(PIDController *pid, double process_variable)
{
 8005b3e:	b5b0      	push	{r4, r5, r7, lr}
 8005b40:	b08a      	sub	sp, #40	; 0x28
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	e9c7 2300 	strd	r2, r3, [r7]
    // Tính sai số
    double error = pid->setpoint - process_variable;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b54:	f7fa fc2a 	bl	80003ac <__aeabi_dsub>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Tính số tích phân
    pid->integral += error;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6a:	f7fa fc21 	bl	80003b0 <__adddf3>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Tính đạo hàm của sai số
    double derivative = error - pid->prev_error;    
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005b7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005b82:	f7fa fc13 	bl	80003ac <__aeabi_dsub>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Tính tín hiệu điều khiển
    double control_signal = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b98:	f7fa fada 	bl	8000150 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	461d      	mov	r5, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bb0:	f7fa face 	bl	8000150 <__aeabi_dmul>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4620      	mov	r0, r4
 8005bba:	4629      	mov	r1, r5
 8005bbc:	f7fa fbf8 	bl	80003b0 <__adddf3>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd2:	f7fa fabd 	bl	8000150 <__aeabi_dmul>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7fa fbe7 	bl	80003b0 <__adddf3>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lưu trữ sai số hiện tại để sử dụng cho lần cập nhật sau
    pid->prev_error = error;
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bf0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    return control_signal;
 8005bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	3728      	adds	r7, #40	; 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c04 <siprintf>:
 8005c04:	b40e      	push	{r1, r2, r3}
 8005c06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c0a:	b500      	push	{lr}
 8005c0c:	b09c      	sub	sp, #112	; 0x70
 8005c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c10:	9002      	str	r0, [sp, #8]
 8005c12:	9006      	str	r0, [sp, #24]
 8005c14:	9107      	str	r1, [sp, #28]
 8005c16:	9104      	str	r1, [sp, #16]
 8005c18:	4808      	ldr	r0, [pc, #32]	; (8005c3c <siprintf+0x38>)
 8005c1a:	4909      	ldr	r1, [pc, #36]	; (8005c40 <siprintf+0x3c>)
 8005c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	6800      	ldr	r0, [r0, #0]
 8005c24:	a902      	add	r1, sp, #8
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	f000 f98e 	bl	8005f48 <_svfiprintf_r>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	b01c      	add	sp, #112	; 0x70
 8005c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c38:	b003      	add	sp, #12
 8005c3a:	4770      	bx	lr
 8005c3c:	2000005c 	.word	0x2000005c
 8005c40:	ffff0208 	.word	0xffff0208

08005c44 <memset>:
 8005c44:	4603      	mov	r3, r0
 8005c46:	4402      	add	r2, r0
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d100      	bne.n	8005c4e <memset+0xa>
 8005c4c:	4770      	bx	lr
 8005c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c52:	e7f9      	b.n	8005c48 <memset+0x4>

08005c54 <__errno>:
 8005c54:	4b01      	ldr	r3, [pc, #4]	; (8005c5c <__errno+0x8>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2000005c 	.word	0x2000005c

08005c60 <__libc_init_array>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	2600      	movs	r6, #0
 8005c64:	4d0c      	ldr	r5, [pc, #48]	; (8005c98 <__libc_init_array+0x38>)
 8005c66:	4c0d      	ldr	r4, [pc, #52]	; (8005c9c <__libc_init_array+0x3c>)
 8005c68:	1b64      	subs	r4, r4, r5
 8005c6a:	10a4      	asrs	r4, r4, #2
 8005c6c:	42a6      	cmp	r6, r4
 8005c6e:	d109      	bne.n	8005c84 <__libc_init_array+0x24>
 8005c70:	f000 fc7a 	bl	8006568 <_init>
 8005c74:	2600      	movs	r6, #0
 8005c76:	4d0a      	ldr	r5, [pc, #40]	; (8005ca0 <__libc_init_array+0x40>)
 8005c78:	4c0a      	ldr	r4, [pc, #40]	; (8005ca4 <__libc_init_array+0x44>)
 8005c7a:	1b64      	subs	r4, r4, r5
 8005c7c:	10a4      	asrs	r4, r4, #2
 8005c7e:	42a6      	cmp	r6, r4
 8005c80:	d105      	bne.n	8005c8e <__libc_init_array+0x2e>
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c88:	4798      	blx	r3
 8005c8a:	3601      	adds	r6, #1
 8005c8c:	e7ee      	b.n	8005c6c <__libc_init_array+0xc>
 8005c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c92:	4798      	blx	r3
 8005c94:	3601      	adds	r6, #1
 8005c96:	e7f2      	b.n	8005c7e <__libc_init_array+0x1e>
 8005c98:	0800664c 	.word	0x0800664c
 8005c9c:	0800664c 	.word	0x0800664c
 8005ca0:	0800664c 	.word	0x0800664c
 8005ca4:	08006650 	.word	0x08006650

08005ca8 <__retarget_lock_acquire_recursive>:
 8005ca8:	4770      	bx	lr

08005caa <__retarget_lock_release_recursive>:
 8005caa:	4770      	bx	lr

08005cac <_free_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4605      	mov	r5, r0
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	d040      	beq.n	8005d36 <_free_r+0x8a>
 8005cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb8:	1f0c      	subs	r4, r1, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bfb8      	it	lt
 8005cbe:	18e4      	addlt	r4, r4, r3
 8005cc0:	f000 f8dc 	bl	8005e7c <__malloc_lock>
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	; (8005d38 <_free_r+0x8c>)
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	b933      	cbnz	r3, 8005cd8 <_free_r+0x2c>
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	6014      	str	r4, [r2, #0]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd4:	f000 b8d8 	b.w	8005e88 <__malloc_unlock>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d908      	bls.n	8005cee <_free_r+0x42>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	1821      	adds	r1, r4, r0
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf01      	itttt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	1809      	addeq	r1, r1, r0
 8005cea:	6021      	streq	r1, [r4, #0]
 8005cec:	e7ed      	b.n	8005cca <_free_r+0x1e>
 8005cee:	461a      	mov	r2, r3
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b10b      	cbz	r3, 8005cf8 <_free_r+0x4c>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d9fa      	bls.n	8005cee <_free_r+0x42>
 8005cf8:	6811      	ldr	r1, [r2, #0]
 8005cfa:	1850      	adds	r0, r2, r1
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d10b      	bne.n	8005d18 <_free_r+0x6c>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	4401      	add	r1, r0
 8005d04:	1850      	adds	r0, r2, r1
 8005d06:	4283      	cmp	r3, r0
 8005d08:	6011      	str	r1, [r2, #0]
 8005d0a:	d1e0      	bne.n	8005cce <_free_r+0x22>
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4408      	add	r0, r1
 8005d12:	6010      	str	r0, [r2, #0]
 8005d14:	6053      	str	r3, [r2, #4]
 8005d16:	e7da      	b.n	8005cce <_free_r+0x22>
 8005d18:	d902      	bls.n	8005d20 <_free_r+0x74>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	e7d6      	b.n	8005cce <_free_r+0x22>
 8005d20:	6820      	ldr	r0, [r4, #0]
 8005d22:	1821      	adds	r1, r4, r0
 8005d24:	428b      	cmp	r3, r1
 8005d26:	bf01      	itttt	eq
 8005d28:	6819      	ldreq	r1, [r3, #0]
 8005d2a:	685b      	ldreq	r3, [r3, #4]
 8005d2c:	1809      	addeq	r1, r1, r0
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	6054      	str	r4, [r2, #4]
 8005d34:	e7cb      	b.n	8005cce <_free_r+0x22>
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	200003cc 	.word	0x200003cc

08005d3c <sbrk_aligned>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4e0e      	ldr	r6, [pc, #56]	; (8005d78 <sbrk_aligned+0x3c>)
 8005d40:	460c      	mov	r4, r1
 8005d42:	6831      	ldr	r1, [r6, #0]
 8005d44:	4605      	mov	r5, r0
 8005d46:	b911      	cbnz	r1, 8005d4e <sbrk_aligned+0x12>
 8005d48:	f000 fbaa 	bl	80064a0 <_sbrk_r>
 8005d4c:	6030      	str	r0, [r6, #0]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 fba5 	bl	80064a0 <_sbrk_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d00a      	beq.n	8005d70 <sbrk_aligned+0x34>
 8005d5a:	1cc4      	adds	r4, r0, #3
 8005d5c:	f024 0403 	bic.w	r4, r4, #3
 8005d60:	42a0      	cmp	r0, r4
 8005d62:	d007      	beq.n	8005d74 <sbrk_aligned+0x38>
 8005d64:	1a21      	subs	r1, r4, r0
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 fb9a 	bl	80064a0 <_sbrk_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d101      	bne.n	8005d74 <sbrk_aligned+0x38>
 8005d70:	f04f 34ff 	mov.w	r4, #4294967295
 8005d74:	4620      	mov	r0, r4
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	200003d0 	.word	0x200003d0

08005d7c <_malloc_r>:
 8005d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d80:	1ccd      	adds	r5, r1, #3
 8005d82:	f025 0503 	bic.w	r5, r5, #3
 8005d86:	3508      	adds	r5, #8
 8005d88:	2d0c      	cmp	r5, #12
 8005d8a:	bf38      	it	cc
 8005d8c:	250c      	movcc	r5, #12
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	4607      	mov	r7, r0
 8005d92:	db01      	blt.n	8005d98 <_malloc_r+0x1c>
 8005d94:	42a9      	cmp	r1, r5
 8005d96:	d905      	bls.n	8005da4 <_malloc_r+0x28>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	4630      	mov	r0, r6
 8005da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e78 <_malloc_r+0xfc>
 8005da8:	f000 f868 	bl	8005e7c <__malloc_lock>
 8005dac:	f8d8 3000 	ldr.w	r3, [r8]
 8005db0:	461c      	mov	r4, r3
 8005db2:	bb5c      	cbnz	r4, 8005e0c <_malloc_r+0x90>
 8005db4:	4629      	mov	r1, r5
 8005db6:	4638      	mov	r0, r7
 8005db8:	f7ff ffc0 	bl	8005d3c <sbrk_aligned>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	d155      	bne.n	8005e6e <_malloc_r+0xf2>
 8005dc2:	f8d8 4000 	ldr.w	r4, [r8]
 8005dc6:	4626      	mov	r6, r4
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	d145      	bne.n	8005e58 <_malloc_r+0xdc>
 8005dcc:	2c00      	cmp	r4, #0
 8005dce:	d048      	beq.n	8005e62 <_malloc_r+0xe6>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	eb04 0903 	add.w	r9, r4, r3
 8005dda:	f000 fb61 	bl	80064a0 <_sbrk_r>
 8005dde:	4581      	cmp	r9, r0
 8005de0:	d13f      	bne.n	8005e62 <_malloc_r+0xe6>
 8005de2:	6821      	ldr	r1, [r4, #0]
 8005de4:	4638      	mov	r0, r7
 8005de6:	1a6d      	subs	r5, r5, r1
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7ff ffa7 	bl	8005d3c <sbrk_aligned>
 8005dee:	3001      	adds	r0, #1
 8005df0:	d037      	beq.n	8005e62 <_malloc_r+0xe6>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	442b      	add	r3, r5
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d038      	beq.n	8005e72 <_malloc_r+0xf6>
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	42a2      	cmp	r2, r4
 8005e04:	d12b      	bne.n	8005e5e <_malloc_r+0xe2>
 8005e06:	2200      	movs	r2, #0
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	e00f      	b.n	8005e2c <_malloc_r+0xb0>
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	1b52      	subs	r2, r2, r5
 8005e10:	d41f      	bmi.n	8005e52 <_malloc_r+0xd6>
 8005e12:	2a0b      	cmp	r2, #11
 8005e14:	d917      	bls.n	8005e46 <_malloc_r+0xca>
 8005e16:	1961      	adds	r1, r4, r5
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	6025      	str	r5, [r4, #0]
 8005e1c:	bf18      	it	ne
 8005e1e:	6059      	strne	r1, [r3, #4]
 8005e20:	6863      	ldr	r3, [r4, #4]
 8005e22:	bf08      	it	eq
 8005e24:	f8c8 1000 	streq.w	r1, [r8]
 8005e28:	5162      	str	r2, [r4, r5]
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f104 060b 	add.w	r6, r4, #11
 8005e32:	f000 f829 	bl	8005e88 <__malloc_unlock>
 8005e36:	f026 0607 	bic.w	r6, r6, #7
 8005e3a:	1d23      	adds	r3, r4, #4
 8005e3c:	1af2      	subs	r2, r6, r3
 8005e3e:	d0ae      	beq.n	8005d9e <_malloc_r+0x22>
 8005e40:	1b9b      	subs	r3, r3, r6
 8005e42:	50a3      	str	r3, [r4, r2]
 8005e44:	e7ab      	b.n	8005d9e <_malloc_r+0x22>
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	6862      	ldr	r2, [r4, #4]
 8005e4a:	d1dd      	bne.n	8005e08 <_malloc_r+0x8c>
 8005e4c:	f8c8 2000 	str.w	r2, [r8]
 8005e50:	e7ec      	b.n	8005e2c <_malloc_r+0xb0>
 8005e52:	4623      	mov	r3, r4
 8005e54:	6864      	ldr	r4, [r4, #4]
 8005e56:	e7ac      	b.n	8005db2 <_malloc_r+0x36>
 8005e58:	4634      	mov	r4, r6
 8005e5a:	6876      	ldr	r6, [r6, #4]
 8005e5c:	e7b4      	b.n	8005dc8 <_malloc_r+0x4c>
 8005e5e:	4613      	mov	r3, r2
 8005e60:	e7cc      	b.n	8005dfc <_malloc_r+0x80>
 8005e62:	230c      	movs	r3, #12
 8005e64:	4638      	mov	r0, r7
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	f000 f80e 	bl	8005e88 <__malloc_unlock>
 8005e6c:	e797      	b.n	8005d9e <_malloc_r+0x22>
 8005e6e:	6025      	str	r5, [r4, #0]
 8005e70:	e7dc      	b.n	8005e2c <_malloc_r+0xb0>
 8005e72:	605b      	str	r3, [r3, #4]
 8005e74:	deff      	udf	#255	; 0xff
 8005e76:	bf00      	nop
 8005e78:	200003cc 	.word	0x200003cc

08005e7c <__malloc_lock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_lock+0x8>)
 8005e7e:	f7ff bf13 	b.w	8005ca8 <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	200003c8 	.word	0x200003c8

08005e88 <__malloc_unlock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_unlock+0x8>)
 8005e8a:	f7ff bf0e 	b.w	8005caa <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200003c8 	.word	0x200003c8

08005e94 <__ssputs_r>:
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	461f      	mov	r7, r3
 8005e9a:	688e      	ldr	r6, [r1, #8]
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	42be      	cmp	r6, r7
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	4690      	mov	r8, r2
 8005ea4:	680b      	ldr	r3, [r1, #0]
 8005ea6:	d82c      	bhi.n	8005f02 <__ssputs_r+0x6e>
 8005ea8:	898a      	ldrh	r2, [r1, #12]
 8005eaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005eae:	d026      	beq.n	8005efe <__ssputs_r+0x6a>
 8005eb0:	6965      	ldr	r5, [r4, #20]
 8005eb2:	6909      	ldr	r1, [r1, #16]
 8005eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eb8:	eba3 0901 	sub.w	r9, r3, r1
 8005ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ec0:	1c7b      	adds	r3, r7, #1
 8005ec2:	444b      	add	r3, r9
 8005ec4:	106d      	asrs	r5, r5, #1
 8005ec6:	429d      	cmp	r5, r3
 8005ec8:	bf38      	it	cc
 8005eca:	461d      	movcc	r5, r3
 8005ecc:	0553      	lsls	r3, r2, #21
 8005ece:	d527      	bpl.n	8005f20 <__ssputs_r+0x8c>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7ff ff53 	bl	8005d7c <_malloc_r>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	b360      	cbz	r0, 8005f34 <__ssputs_r+0xa0>
 8005eda:	464a      	mov	r2, r9
 8005edc:	6921      	ldr	r1, [r4, #16]
 8005ede:	f000 fafd 	bl	80064dc <memcpy>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	6126      	str	r6, [r4, #16]
 8005ef0:	444e      	add	r6, r9
 8005ef2:	6026      	str	r6, [r4, #0]
 8005ef4:	463e      	mov	r6, r7
 8005ef6:	6165      	str	r5, [r4, #20]
 8005ef8:	eba5 0509 	sub.w	r5, r5, r9
 8005efc:	60a5      	str	r5, [r4, #8]
 8005efe:	42be      	cmp	r6, r7
 8005f00:	d900      	bls.n	8005f04 <__ssputs_r+0x70>
 8005f02:	463e      	mov	r6, r7
 8005f04:	4632      	mov	r2, r6
 8005f06:	4641      	mov	r1, r8
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	f000 faaf 	bl	800646c <memmove>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	1b9b      	subs	r3, r3, r6
 8005f14:	60a3      	str	r3, [r4, #8]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	4433      	add	r3, r6
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f20:	462a      	mov	r2, r5
 8005f22:	f000 fae9 	bl	80064f8 <_realloc_r>
 8005f26:	4606      	mov	r6, r0
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d1e0      	bne.n	8005eee <__ssputs_r+0x5a>
 8005f2c:	4650      	mov	r0, sl
 8005f2e:	6921      	ldr	r1, [r4, #16]
 8005f30:	f7ff febc 	bl	8005cac <_free_r>
 8005f34:	230c      	movs	r3, #12
 8005f36:	f8ca 3000 	str.w	r3, [sl]
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f44:	81a3      	strh	r3, [r4, #12]
 8005f46:	e7e9      	b.n	8005f1c <__ssputs_r+0x88>

08005f48 <_svfiprintf_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	4698      	mov	r8, r3
 8005f4e:	898b      	ldrh	r3, [r1, #12]
 8005f50:	4607      	mov	r7, r0
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	460d      	mov	r5, r1
 8005f56:	4614      	mov	r4, r2
 8005f58:	b09d      	sub	sp, #116	; 0x74
 8005f5a:	d50e      	bpl.n	8005f7a <_svfiprintf_r+0x32>
 8005f5c:	690b      	ldr	r3, [r1, #16]
 8005f5e:	b963      	cbnz	r3, 8005f7a <_svfiprintf_r+0x32>
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	f7ff ff0b 	bl	8005d7c <_malloc_r>
 8005f66:	6028      	str	r0, [r5, #0]
 8005f68:	6128      	str	r0, [r5, #16]
 8005f6a:	b920      	cbnz	r0, 8005f76 <_svfiprintf_r+0x2e>
 8005f6c:	230c      	movs	r3, #12
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	e0d0      	b.n	8006118 <_svfiprintf_r+0x1d0>
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	616b      	str	r3, [r5, #20]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7e:	2320      	movs	r3, #32
 8005f80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f84:	2330      	movs	r3, #48	; 0x30
 8005f86:	f04f 0901 	mov.w	r9, #1
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006130 <_svfiprintf_r+0x1e8>
 8005f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f96:	4623      	mov	r3, r4
 8005f98:	469a      	mov	sl, r3
 8005f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9e:	b10a      	cbz	r2, 8005fa4 <_svfiprintf_r+0x5c>
 8005fa0:	2a25      	cmp	r2, #37	; 0x25
 8005fa2:	d1f9      	bne.n	8005f98 <_svfiprintf_r+0x50>
 8005fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa8:	d00b      	beq.n	8005fc2 <_svfiprintf_r+0x7a>
 8005faa:	465b      	mov	r3, fp
 8005fac:	4622      	mov	r2, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7ff ff6f 	bl	8005e94 <__ssputs_r>
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f000 80a9 	beq.w	800610e <_svfiprintf_r+0x1c6>
 8005fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fbe:	445a      	add	r2, fp
 8005fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80a1 	beq.w	800610e <_svfiprintf_r+0x1c6>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd6:	f10a 0a01 	add.w	sl, sl, #1
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	9307      	str	r3, [sp, #28]
 8005fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fe4:	4654      	mov	r4, sl
 8005fe6:	2205      	movs	r2, #5
 8005fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fec:	4850      	ldr	r0, [pc, #320]	; (8006130 <_svfiprintf_r+0x1e8>)
 8005fee:	f000 fa67 	bl	80064c0 <memchr>
 8005ff2:	9a04      	ldr	r2, [sp, #16]
 8005ff4:	b9d8      	cbnz	r0, 800602e <_svfiprintf_r+0xe6>
 8005ff6:	06d0      	lsls	r0, r2, #27
 8005ff8:	bf44      	itt	mi
 8005ffa:	2320      	movmi	r3, #32
 8005ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006000:	0711      	lsls	r1, r2, #28
 8006002:	bf44      	itt	mi
 8006004:	232b      	movmi	r3, #43	; 0x2b
 8006006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800600a:	f89a 3000 	ldrb.w	r3, [sl]
 800600e:	2b2a      	cmp	r3, #42	; 0x2a
 8006010:	d015      	beq.n	800603e <_svfiprintf_r+0xf6>
 8006012:	4654      	mov	r4, sl
 8006014:	2000      	movs	r0, #0
 8006016:	f04f 0c0a 	mov.w	ip, #10
 800601a:	9a07      	ldr	r2, [sp, #28]
 800601c:	4621      	mov	r1, r4
 800601e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006022:	3b30      	subs	r3, #48	; 0x30
 8006024:	2b09      	cmp	r3, #9
 8006026:	d94d      	bls.n	80060c4 <_svfiprintf_r+0x17c>
 8006028:	b1b0      	cbz	r0, 8006058 <_svfiprintf_r+0x110>
 800602a:	9207      	str	r2, [sp, #28]
 800602c:	e014      	b.n	8006058 <_svfiprintf_r+0x110>
 800602e:	eba0 0308 	sub.w	r3, r0, r8
 8006032:	fa09 f303 	lsl.w	r3, r9, r3
 8006036:	4313      	orrs	r3, r2
 8006038:	46a2      	mov	sl, r4
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	e7d2      	b.n	8005fe4 <_svfiprintf_r+0x9c>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	1d19      	adds	r1, r3, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	9103      	str	r1, [sp, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	bfbb      	ittet	lt
 800604a:	425b      	neglt	r3, r3
 800604c:	f042 0202 	orrlt.w	r2, r2, #2
 8006050:	9307      	strge	r3, [sp, #28]
 8006052:	9307      	strlt	r3, [sp, #28]
 8006054:	bfb8      	it	lt
 8006056:	9204      	strlt	r2, [sp, #16]
 8006058:	7823      	ldrb	r3, [r4, #0]
 800605a:	2b2e      	cmp	r3, #46	; 0x2e
 800605c:	d10c      	bne.n	8006078 <_svfiprintf_r+0x130>
 800605e:	7863      	ldrb	r3, [r4, #1]
 8006060:	2b2a      	cmp	r3, #42	; 0x2a
 8006062:	d134      	bne.n	80060ce <_svfiprintf_r+0x186>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	3402      	adds	r4, #2
 8006068:	1d1a      	adds	r2, r3, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	9203      	str	r2, [sp, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	bfb8      	it	lt
 8006072:	f04f 33ff 	movlt.w	r3, #4294967295
 8006076:	9305      	str	r3, [sp, #20]
 8006078:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006134 <_svfiprintf_r+0x1ec>
 800607c:	2203      	movs	r2, #3
 800607e:	4650      	mov	r0, sl
 8006080:	7821      	ldrb	r1, [r4, #0]
 8006082:	f000 fa1d 	bl	80064c0 <memchr>
 8006086:	b138      	cbz	r0, 8006098 <_svfiprintf_r+0x150>
 8006088:	2240      	movs	r2, #64	; 0x40
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	eba0 000a 	sub.w	r0, r0, sl
 8006090:	4082      	lsls	r2, r0
 8006092:	4313      	orrs	r3, r2
 8006094:	3401      	adds	r4, #1
 8006096:	9304      	str	r3, [sp, #16]
 8006098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609c:	2206      	movs	r2, #6
 800609e:	4826      	ldr	r0, [pc, #152]	; (8006138 <_svfiprintf_r+0x1f0>)
 80060a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060a4:	f000 fa0c 	bl	80064c0 <memchr>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d038      	beq.n	800611e <_svfiprintf_r+0x1d6>
 80060ac:	4b23      	ldr	r3, [pc, #140]	; (800613c <_svfiprintf_r+0x1f4>)
 80060ae:	bb1b      	cbnz	r3, 80060f8 <_svfiprintf_r+0x1b0>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	3307      	adds	r3, #7
 80060b4:	f023 0307 	bic.w	r3, r3, #7
 80060b8:	3308      	adds	r3, #8
 80060ba:	9303      	str	r3, [sp, #12]
 80060bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060be:	4433      	add	r3, r6
 80060c0:	9309      	str	r3, [sp, #36]	; 0x24
 80060c2:	e768      	b.n	8005f96 <_svfiprintf_r+0x4e>
 80060c4:	460c      	mov	r4, r1
 80060c6:	2001      	movs	r0, #1
 80060c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80060cc:	e7a6      	b.n	800601c <_svfiprintf_r+0xd4>
 80060ce:	2300      	movs	r3, #0
 80060d0:	f04f 0c0a 	mov.w	ip, #10
 80060d4:	4619      	mov	r1, r3
 80060d6:	3401      	adds	r4, #1
 80060d8:	9305      	str	r3, [sp, #20]
 80060da:	4620      	mov	r0, r4
 80060dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e0:	3a30      	subs	r2, #48	; 0x30
 80060e2:	2a09      	cmp	r2, #9
 80060e4:	d903      	bls.n	80060ee <_svfiprintf_r+0x1a6>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0c6      	beq.n	8006078 <_svfiprintf_r+0x130>
 80060ea:	9105      	str	r1, [sp, #20]
 80060ec:	e7c4      	b.n	8006078 <_svfiprintf_r+0x130>
 80060ee:	4604      	mov	r4, r0
 80060f0:	2301      	movs	r3, #1
 80060f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80060f6:	e7f0      	b.n	80060da <_svfiprintf_r+0x192>
 80060f8:	ab03      	add	r3, sp, #12
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	462a      	mov	r2, r5
 80060fe:	4638      	mov	r0, r7
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <_svfiprintf_r+0x1f8>)
 8006102:	a904      	add	r1, sp, #16
 8006104:	f3af 8000 	nop.w
 8006108:	1c42      	adds	r2, r0, #1
 800610a:	4606      	mov	r6, r0
 800610c:	d1d6      	bne.n	80060bc <_svfiprintf_r+0x174>
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	065b      	lsls	r3, r3, #25
 8006112:	f53f af2d 	bmi.w	8005f70 <_svfiprintf_r+0x28>
 8006116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006118:	b01d      	add	sp, #116	; 0x74
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	ab03      	add	r3, sp, #12
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	462a      	mov	r2, r5
 8006124:	4638      	mov	r0, r7
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <_svfiprintf_r+0x1f8>)
 8006128:	a904      	add	r1, sp, #16
 800612a:	f000 f87d 	bl	8006228 <_printf_i>
 800612e:	e7eb      	b.n	8006108 <_svfiprintf_r+0x1c0>
 8006130:	08006616 	.word	0x08006616
 8006134:	0800661c 	.word	0x0800661c
 8006138:	08006620 	.word	0x08006620
 800613c:	00000000 	.word	0x00000000
 8006140:	08005e95 	.word	0x08005e95

08006144 <_printf_common>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	4616      	mov	r6, r2
 800614a:	4699      	mov	r9, r3
 800614c:	688a      	ldr	r2, [r1, #8]
 800614e:	690b      	ldr	r3, [r1, #16]
 8006150:	4607      	mov	r7, r0
 8006152:	4293      	cmp	r3, r2
 8006154:	bfb8      	it	lt
 8006156:	4613      	movlt	r3, r2
 8006158:	6033      	str	r3, [r6, #0]
 800615a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800615e:	460c      	mov	r4, r1
 8006160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006164:	b10a      	cbz	r2, 800616a <_printf_common+0x26>
 8006166:	3301      	adds	r3, #1
 8006168:	6033      	str	r3, [r6, #0]
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	0699      	lsls	r1, r3, #26
 800616e:	bf42      	ittt	mi
 8006170:	6833      	ldrmi	r3, [r6, #0]
 8006172:	3302      	addmi	r3, #2
 8006174:	6033      	strmi	r3, [r6, #0]
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	f015 0506 	ands.w	r5, r5, #6
 800617c:	d106      	bne.n	800618c <_printf_common+0x48>
 800617e:	f104 0a19 	add.w	sl, r4, #25
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	6832      	ldr	r2, [r6, #0]
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	42ab      	cmp	r3, r5
 800618a:	dc2b      	bgt.n	80061e4 <_printf_common+0xa0>
 800618c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006190:	1e13      	subs	r3, r2, #0
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	bf18      	it	ne
 8006196:	2301      	movne	r3, #1
 8006198:	0692      	lsls	r2, r2, #26
 800619a:	d430      	bmi.n	80061fe <_printf_common+0xba>
 800619c:	4649      	mov	r1, r9
 800619e:	4638      	mov	r0, r7
 80061a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a4:	47c0      	blx	r8
 80061a6:	3001      	adds	r0, #1
 80061a8:	d023      	beq.n	80061f2 <_printf_common+0xae>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	f003 0306 	and.w	r3, r3, #6
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	bf14      	ite	ne
 80061b6:	2500      	movne	r5, #0
 80061b8:	6833      	ldreq	r3, [r6, #0]
 80061ba:	f04f 0600 	mov.w	r6, #0
 80061be:	bf08      	it	eq
 80061c0:	68e5      	ldreq	r5, [r4, #12]
 80061c2:	f104 041a 	add.w	r4, r4, #26
 80061c6:	bf08      	it	eq
 80061c8:	1aed      	subeq	r5, r5, r3
 80061ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80061ce:	bf08      	it	eq
 80061d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfc4      	itt	gt
 80061d8:	1a9b      	subgt	r3, r3, r2
 80061da:	18ed      	addgt	r5, r5, r3
 80061dc:	42b5      	cmp	r5, r6
 80061de:	d11a      	bne.n	8006216 <_printf_common+0xd2>
 80061e0:	2000      	movs	r0, #0
 80061e2:	e008      	b.n	80061f6 <_printf_common+0xb2>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4652      	mov	r2, sl
 80061e8:	4649      	mov	r1, r9
 80061ea:	4638      	mov	r0, r7
 80061ec:	47c0      	blx	r8
 80061ee:	3001      	adds	r0, #1
 80061f0:	d103      	bne.n	80061fa <_printf_common+0xb6>
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	3501      	adds	r5, #1
 80061fc:	e7c1      	b.n	8006182 <_printf_common+0x3e>
 80061fe:	2030      	movs	r0, #48	; 0x30
 8006200:	18e1      	adds	r1, r4, r3
 8006202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800620c:	4422      	add	r2, r4
 800620e:	3302      	adds	r3, #2
 8006210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006214:	e7c2      	b.n	800619c <_printf_common+0x58>
 8006216:	2301      	movs	r3, #1
 8006218:	4622      	mov	r2, r4
 800621a:	4649      	mov	r1, r9
 800621c:	4638      	mov	r0, r7
 800621e:	47c0      	blx	r8
 8006220:	3001      	adds	r0, #1
 8006222:	d0e6      	beq.n	80061f2 <_printf_common+0xae>
 8006224:	3601      	adds	r6, #1
 8006226:	e7d9      	b.n	80061dc <_printf_common+0x98>

08006228 <_printf_i>:
 8006228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	7e0f      	ldrb	r7, [r1, #24]
 800622e:	4691      	mov	r9, r2
 8006230:	2f78      	cmp	r7, #120	; 0x78
 8006232:	4680      	mov	r8, r0
 8006234:	460c      	mov	r4, r1
 8006236:	469a      	mov	sl, r3
 8006238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800623a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800623e:	d807      	bhi.n	8006250 <_printf_i+0x28>
 8006240:	2f62      	cmp	r7, #98	; 0x62
 8006242:	d80a      	bhi.n	800625a <_printf_i+0x32>
 8006244:	2f00      	cmp	r7, #0
 8006246:	f000 80d5 	beq.w	80063f4 <_printf_i+0x1cc>
 800624a:	2f58      	cmp	r7, #88	; 0x58
 800624c:	f000 80c1 	beq.w	80063d2 <_printf_i+0x1aa>
 8006250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006258:	e03a      	b.n	80062d0 <_printf_i+0xa8>
 800625a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800625e:	2b15      	cmp	r3, #21
 8006260:	d8f6      	bhi.n	8006250 <_printf_i+0x28>
 8006262:	a101      	add	r1, pc, #4	; (adr r1, 8006268 <_printf_i+0x40>)
 8006264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006268:	080062c1 	.word	0x080062c1
 800626c:	080062d5 	.word	0x080062d5
 8006270:	08006251 	.word	0x08006251
 8006274:	08006251 	.word	0x08006251
 8006278:	08006251 	.word	0x08006251
 800627c:	08006251 	.word	0x08006251
 8006280:	080062d5 	.word	0x080062d5
 8006284:	08006251 	.word	0x08006251
 8006288:	08006251 	.word	0x08006251
 800628c:	08006251 	.word	0x08006251
 8006290:	08006251 	.word	0x08006251
 8006294:	080063db 	.word	0x080063db
 8006298:	08006301 	.word	0x08006301
 800629c:	08006395 	.word	0x08006395
 80062a0:	08006251 	.word	0x08006251
 80062a4:	08006251 	.word	0x08006251
 80062a8:	080063fd 	.word	0x080063fd
 80062ac:	08006251 	.word	0x08006251
 80062b0:	08006301 	.word	0x08006301
 80062b4:	08006251 	.word	0x08006251
 80062b8:	08006251 	.word	0x08006251
 80062bc:	0800639d 	.word	0x0800639d
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	602a      	str	r2, [r5, #0]
 80062c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0a0      	b.n	8006416 <_printf_i+0x1ee>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	0607      	lsls	r7, r0, #24
 80062da:	f103 0104 	add.w	r1, r3, #4
 80062de:	6029      	str	r1, [r5, #0]
 80062e0:	d501      	bpl.n	80062e6 <_printf_i+0xbe>
 80062e2:	681e      	ldr	r6, [r3, #0]
 80062e4:	e003      	b.n	80062ee <_printf_i+0xc6>
 80062e6:	0646      	lsls	r6, r0, #25
 80062e8:	d5fb      	bpl.n	80062e2 <_printf_i+0xba>
 80062ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	da03      	bge.n	80062fa <_printf_i+0xd2>
 80062f2:	232d      	movs	r3, #45	; 0x2d
 80062f4:	4276      	negs	r6, r6
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	230a      	movs	r3, #10
 80062fc:	4859      	ldr	r0, [pc, #356]	; (8006464 <_printf_i+0x23c>)
 80062fe:	e012      	b.n	8006326 <_printf_i+0xfe>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	1d19      	adds	r1, r3, #4
 8006306:	6029      	str	r1, [r5, #0]
 8006308:	0605      	lsls	r5, r0, #24
 800630a:	d501      	bpl.n	8006310 <_printf_i+0xe8>
 800630c:	681e      	ldr	r6, [r3, #0]
 800630e:	e002      	b.n	8006316 <_printf_i+0xee>
 8006310:	0641      	lsls	r1, r0, #25
 8006312:	d5fb      	bpl.n	800630c <_printf_i+0xe4>
 8006314:	881e      	ldrh	r6, [r3, #0]
 8006316:	2f6f      	cmp	r7, #111	; 0x6f
 8006318:	bf0c      	ite	eq
 800631a:	2308      	moveq	r3, #8
 800631c:	230a      	movne	r3, #10
 800631e:	4851      	ldr	r0, [pc, #324]	; (8006464 <_printf_i+0x23c>)
 8006320:	2100      	movs	r1, #0
 8006322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006326:	6865      	ldr	r5, [r4, #4]
 8006328:	2d00      	cmp	r5, #0
 800632a:	bfa8      	it	ge
 800632c:	6821      	ldrge	r1, [r4, #0]
 800632e:	60a5      	str	r5, [r4, #8]
 8006330:	bfa4      	itt	ge
 8006332:	f021 0104 	bicge.w	r1, r1, #4
 8006336:	6021      	strge	r1, [r4, #0]
 8006338:	b90e      	cbnz	r6, 800633e <_printf_i+0x116>
 800633a:	2d00      	cmp	r5, #0
 800633c:	d04b      	beq.n	80063d6 <_printf_i+0x1ae>
 800633e:	4615      	mov	r5, r2
 8006340:	fbb6 f1f3 	udiv	r1, r6, r3
 8006344:	fb03 6711 	mls	r7, r3, r1, r6
 8006348:	5dc7      	ldrb	r7, [r0, r7]
 800634a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800634e:	4637      	mov	r7, r6
 8006350:	42bb      	cmp	r3, r7
 8006352:	460e      	mov	r6, r1
 8006354:	d9f4      	bls.n	8006340 <_printf_i+0x118>
 8006356:	2b08      	cmp	r3, #8
 8006358:	d10b      	bne.n	8006372 <_printf_i+0x14a>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	07de      	lsls	r6, r3, #31
 800635e:	d508      	bpl.n	8006372 <_printf_i+0x14a>
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	6861      	ldr	r1, [r4, #4]
 8006364:	4299      	cmp	r1, r3
 8006366:	bfde      	ittt	le
 8006368:	2330      	movle	r3, #48	; 0x30
 800636a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800636e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006372:	1b52      	subs	r2, r2, r5
 8006374:	6122      	str	r2, [r4, #16]
 8006376:	464b      	mov	r3, r9
 8006378:	4621      	mov	r1, r4
 800637a:	4640      	mov	r0, r8
 800637c:	f8cd a000 	str.w	sl, [sp]
 8006380:	aa03      	add	r2, sp, #12
 8006382:	f7ff fedf 	bl	8006144 <_printf_common>
 8006386:	3001      	adds	r0, #1
 8006388:	d14a      	bne.n	8006420 <_printf_i+0x1f8>
 800638a:	f04f 30ff 	mov.w	r0, #4294967295
 800638e:	b004      	add	sp, #16
 8006390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	f043 0320 	orr.w	r3, r3, #32
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	2778      	movs	r7, #120	; 0x78
 800639e:	4832      	ldr	r0, [pc, #200]	; (8006468 <_printf_i+0x240>)
 80063a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	6829      	ldr	r1, [r5, #0]
 80063a8:	061f      	lsls	r7, r3, #24
 80063aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80063ae:	d402      	bmi.n	80063b6 <_printf_i+0x18e>
 80063b0:	065f      	lsls	r7, r3, #25
 80063b2:	bf48      	it	mi
 80063b4:	b2b6      	uxthmi	r6, r6
 80063b6:	07df      	lsls	r7, r3, #31
 80063b8:	bf48      	it	mi
 80063ba:	f043 0320 	orrmi.w	r3, r3, #32
 80063be:	6029      	str	r1, [r5, #0]
 80063c0:	bf48      	it	mi
 80063c2:	6023      	strmi	r3, [r4, #0]
 80063c4:	b91e      	cbnz	r6, 80063ce <_printf_i+0x1a6>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	f023 0320 	bic.w	r3, r3, #32
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	2310      	movs	r3, #16
 80063d0:	e7a6      	b.n	8006320 <_printf_i+0xf8>
 80063d2:	4824      	ldr	r0, [pc, #144]	; (8006464 <_printf_i+0x23c>)
 80063d4:	e7e4      	b.n	80063a0 <_printf_i+0x178>
 80063d6:	4615      	mov	r5, r2
 80063d8:	e7bd      	b.n	8006356 <_printf_i+0x12e>
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	6826      	ldr	r6, [r4, #0]
 80063de:	1d18      	adds	r0, r3, #4
 80063e0:	6961      	ldr	r1, [r4, #20]
 80063e2:	6028      	str	r0, [r5, #0]
 80063e4:	0635      	lsls	r5, r6, #24
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	d501      	bpl.n	80063ee <_printf_i+0x1c6>
 80063ea:	6019      	str	r1, [r3, #0]
 80063ec:	e002      	b.n	80063f4 <_printf_i+0x1cc>
 80063ee:	0670      	lsls	r0, r6, #25
 80063f0:	d5fb      	bpl.n	80063ea <_printf_i+0x1c2>
 80063f2:	8019      	strh	r1, [r3, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	4615      	mov	r5, r2
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	e7bc      	b.n	8006376 <_printf_i+0x14e>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	2100      	movs	r1, #0
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	602a      	str	r2, [r5, #0]
 8006404:	681d      	ldr	r5, [r3, #0]
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	4628      	mov	r0, r5
 800640a:	f000 f859 	bl	80064c0 <memchr>
 800640e:	b108      	cbz	r0, 8006414 <_printf_i+0x1ec>
 8006410:	1b40      	subs	r0, r0, r5
 8006412:	6060      	str	r0, [r4, #4]
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2300      	movs	r3, #0
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641e:	e7aa      	b.n	8006376 <_printf_i+0x14e>
 8006420:	462a      	mov	r2, r5
 8006422:	4649      	mov	r1, r9
 8006424:	4640      	mov	r0, r8
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	47d0      	blx	sl
 800642a:	3001      	adds	r0, #1
 800642c:	d0ad      	beq.n	800638a <_printf_i+0x162>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	079b      	lsls	r3, r3, #30
 8006432:	d413      	bmi.n	800645c <_printf_i+0x234>
 8006434:	68e0      	ldr	r0, [r4, #12]
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	4298      	cmp	r0, r3
 800643a:	bfb8      	it	lt
 800643c:	4618      	movlt	r0, r3
 800643e:	e7a6      	b.n	800638e <_printf_i+0x166>
 8006440:	2301      	movs	r3, #1
 8006442:	4632      	mov	r2, r6
 8006444:	4649      	mov	r1, r9
 8006446:	4640      	mov	r0, r8
 8006448:	47d0      	blx	sl
 800644a:	3001      	adds	r0, #1
 800644c:	d09d      	beq.n	800638a <_printf_i+0x162>
 800644e:	3501      	adds	r5, #1
 8006450:	68e3      	ldr	r3, [r4, #12]
 8006452:	9903      	ldr	r1, [sp, #12]
 8006454:	1a5b      	subs	r3, r3, r1
 8006456:	42ab      	cmp	r3, r5
 8006458:	dcf2      	bgt.n	8006440 <_printf_i+0x218>
 800645a:	e7eb      	b.n	8006434 <_printf_i+0x20c>
 800645c:	2500      	movs	r5, #0
 800645e:	f104 0619 	add.w	r6, r4, #25
 8006462:	e7f5      	b.n	8006450 <_printf_i+0x228>
 8006464:	08006627 	.word	0x08006627
 8006468:	08006638 	.word	0x08006638

0800646c <memmove>:
 800646c:	4288      	cmp	r0, r1
 800646e:	b510      	push	{r4, lr}
 8006470:	eb01 0402 	add.w	r4, r1, r2
 8006474:	d902      	bls.n	800647c <memmove+0x10>
 8006476:	4284      	cmp	r4, r0
 8006478:	4623      	mov	r3, r4
 800647a:	d807      	bhi.n	800648c <memmove+0x20>
 800647c:	1e43      	subs	r3, r0, #1
 800647e:	42a1      	cmp	r1, r4
 8006480:	d008      	beq.n	8006494 <memmove+0x28>
 8006482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800648a:	e7f8      	b.n	800647e <memmove+0x12>
 800648c:	4601      	mov	r1, r0
 800648e:	4402      	add	r2, r0
 8006490:	428a      	cmp	r2, r1
 8006492:	d100      	bne.n	8006496 <memmove+0x2a>
 8006494:	bd10      	pop	{r4, pc}
 8006496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800649a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800649e:	e7f7      	b.n	8006490 <memmove+0x24>

080064a0 <_sbrk_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	2300      	movs	r3, #0
 80064a4:	4d05      	ldr	r5, [pc, #20]	; (80064bc <_sbrk_r+0x1c>)
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fb f836 	bl	800151c <_sbrk>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_sbrk_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_sbrk_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	200003c4 	.word	0x200003c4

080064c0 <memchr>:
 80064c0:	4603      	mov	r3, r0
 80064c2:	b510      	push	{r4, lr}
 80064c4:	b2c9      	uxtb	r1, r1
 80064c6:	4402      	add	r2, r0
 80064c8:	4293      	cmp	r3, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	d101      	bne.n	80064d2 <memchr+0x12>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e003      	b.n	80064da <memchr+0x1a>
 80064d2:	7804      	ldrb	r4, [r0, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	428c      	cmp	r4, r1
 80064d8:	d1f6      	bne.n	80064c8 <memchr+0x8>
 80064da:	bd10      	pop	{r4, pc}

080064dc <memcpy>:
 80064dc:	440a      	add	r2, r1
 80064de:	4291      	cmp	r1, r2
 80064e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064e4:	d100      	bne.n	80064e8 <memcpy+0xc>
 80064e6:	4770      	bx	lr
 80064e8:	b510      	push	{r4, lr}
 80064ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ee:	4291      	cmp	r1, r2
 80064f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064f4:	d1f9      	bne.n	80064ea <memcpy+0xe>
 80064f6:	bd10      	pop	{r4, pc}

080064f8 <_realloc_r>:
 80064f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fc:	4680      	mov	r8, r0
 80064fe:	4614      	mov	r4, r2
 8006500:	460e      	mov	r6, r1
 8006502:	b921      	cbnz	r1, 800650e <_realloc_r+0x16>
 8006504:	4611      	mov	r1, r2
 8006506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650a:	f7ff bc37 	b.w	8005d7c <_malloc_r>
 800650e:	b92a      	cbnz	r2, 800651c <_realloc_r+0x24>
 8006510:	f7ff fbcc 	bl	8005cac <_free_r>
 8006514:	4625      	mov	r5, r4
 8006516:	4628      	mov	r0, r5
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800651c:	f000 f81b 	bl	8006556 <_malloc_usable_size_r>
 8006520:	4284      	cmp	r4, r0
 8006522:	4607      	mov	r7, r0
 8006524:	d802      	bhi.n	800652c <_realloc_r+0x34>
 8006526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800652a:	d812      	bhi.n	8006552 <_realloc_r+0x5a>
 800652c:	4621      	mov	r1, r4
 800652e:	4640      	mov	r0, r8
 8006530:	f7ff fc24 	bl	8005d7c <_malloc_r>
 8006534:	4605      	mov	r5, r0
 8006536:	2800      	cmp	r0, #0
 8006538:	d0ed      	beq.n	8006516 <_realloc_r+0x1e>
 800653a:	42bc      	cmp	r4, r7
 800653c:	4622      	mov	r2, r4
 800653e:	4631      	mov	r1, r6
 8006540:	bf28      	it	cs
 8006542:	463a      	movcs	r2, r7
 8006544:	f7ff ffca 	bl	80064dc <memcpy>
 8006548:	4631      	mov	r1, r6
 800654a:	4640      	mov	r0, r8
 800654c:	f7ff fbae 	bl	8005cac <_free_r>
 8006550:	e7e1      	b.n	8006516 <_realloc_r+0x1e>
 8006552:	4635      	mov	r5, r6
 8006554:	e7df      	b.n	8006516 <_realloc_r+0x1e>

08006556 <_malloc_usable_size_r>:
 8006556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655a:	1f18      	subs	r0, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbc      	itt	lt
 8006560:	580b      	ldrlt	r3, [r1, r0]
 8006562:	18c0      	addlt	r0, r0, r3
 8006564:	4770      	bx	lr
	...

08006568 <_init>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr

08006574 <_fini>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr
